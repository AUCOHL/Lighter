Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> source_text
Rule 1     source_text -> description
Rule 2     description -> definitions
Rule 3     definitions -> definitions definition
Rule 4     definitions -> definition
Rule 5     definition -> moduledef
Rule 6     definition -> pragma
Rule 7     pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN
Rule 8     pragma -> LPAREN TIMES ID TIMES RPAREN
Rule 9     moduledef -> MODULE modulename paramlist portlist items ENDMODULE
Rule 10    modulename -> ID
Rule 11    modulename -> SENS_OR
Rule 12    paramlist -> DELAY LPAREN params RPAREN
Rule 13    paramlist -> empty
Rule 14    params -> params_begin param_end
Rule 15    params_begin -> params_begin param
Rule 16    params_begin -> param
Rule 17    params -> param_end
Rule 18    param -> PARAMETER param_substitution_list COMMA
Rule 19    param -> PARAMETER SIGNED param_substitution_list COMMA
Rule 20    param -> PARAMETER width param_substitution_list COMMA
Rule 21    param -> PARAMETER SIGNED width param_substitution_list COMMA
Rule 22    param -> PARAMETER INTEGER param_substitution_list COMMA
Rule 23    param_end -> PARAMETER param_substitution_list
Rule 24    param_end -> PARAMETER SIGNED param_substitution_list
Rule 25    param_end -> PARAMETER width param_substitution_list
Rule 26    param_end -> PARAMETER SIGNED width param_substitution_list
Rule 27    param_end -> PARAMETER INTEGER param_substitution_list
Rule 28    portlist -> LPAREN ports RPAREN SEMICOLON
Rule 29    portlist -> LPAREN ioports RPAREN SEMICOLON
Rule 30    portlist -> LPAREN RPAREN SEMICOLON
Rule 31    portlist -> SEMICOLON
Rule 32    ports -> ports COMMA portname
Rule 33    ports -> portname
Rule 34    portname -> ID
Rule 35    sigtypes -> sigtypes sigtype
Rule 36    sigtypes -> sigtype
Rule 37    sigtype -> INPUT
Rule 38    sigtype -> OUTPUT
Rule 39    sigtype -> INOUT
Rule 40    sigtype -> TRI
Rule 41    sigtype -> REG
Rule 42    sigtype -> LOGIC
Rule 43    sigtype -> WIRE
Rule 44    sigtype -> SIGNED
Rule 45    sigtype -> SUPPLY0
Rule 46    sigtype -> SUPPLY1
Rule 47    ioports -> ioports COMMA ioport
Rule 48    ioports -> ioport_head
Rule 49    ioport -> sigtypes portname
Rule 50    ioport -> sigtypes width portname
Rule 51    ioport -> sigtypes width portname dimensions
Rule 52    ioport_head -> sigtypes portname
Rule 53    ioport_head -> sigtypes width portname
Rule 54    ioport_head -> sigtypes width portname dimensions
Rule 55    ioport -> portname
Rule 56    width -> LBRACKET expression COLON expression RBRACKET
Rule 57    length -> LBRACKET expression COLON expression RBRACKET
Rule 58    dimensions -> dimensions length
Rule 59    dimensions -> length
Rule 60    items -> items item
Rule 61    items -> item
Rule 62    items -> empty
Rule 63    item -> standard_item
Rule 64    item -> generate
Rule 65    standard_item -> decl
Rule 66    standard_item -> integerdecl
Rule 67    standard_item -> realdecl
Rule 68    standard_item -> declassign
Rule 69    standard_item -> parameterdecl
Rule 70    standard_item -> localparamdecl
Rule 71    standard_item -> genvardecl
Rule 72    standard_item -> assignment
Rule 73    standard_item -> always
Rule 74    standard_item -> always_ff
Rule 75    standard_item -> always_comb
Rule 76    standard_item -> always_latch
Rule 77    standard_item -> initial
Rule 78    standard_item -> instance
Rule 79    standard_item -> function
Rule 80    standard_item -> task
Rule 81    standard_item -> pragma
Rule 82    decl -> sigtypes declnamelist SEMICOLON
Rule 83    decl -> sigtypes width declnamelist SEMICOLON
Rule 84    declnamelist -> declnamelist COMMA declname
Rule 85    declnamelist -> declname
Rule 86    declname -> ID
Rule 87    declname -> ID dimensions
Rule 88    declassign -> sigtypes declassign_element SEMICOLON
Rule 89    declassign -> sigtypes width declassign_element SEMICOLON
Rule 90    declassign_element -> ID EQUALS rvalue
Rule 91    declassign_element -> delays ID EQUALS delays rvalue
Rule 92    integerdecl -> INTEGER integernamelist SEMICOLON
Rule 93    integerdecl -> INTEGER SIGNED integernamelist SEMICOLON
Rule 94    integernamelist -> integernamelist COMMA integername
Rule 95    integernamelist -> integername
Rule 96    integername -> ID EQUALS rvalue
Rule 97    integername -> ID
Rule 98    realdecl -> REAL realnamelist SEMICOLON
Rule 99    realnamelist -> realnamelist COMMA realname
Rule 100   realnamelist -> realname
Rule 101   realname -> ID
Rule 102   parameterdecl -> PARAMETER param_substitution_list SEMICOLON
Rule 103   parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON
Rule 104   parameterdecl -> PARAMETER width param_substitution_list SEMICOLON
Rule 105   parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON
Rule 106   parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON
Rule 107   localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON
Rule 108   localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON
Rule 109   localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON
Rule 110   localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON
Rule 111   localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON
Rule 112   param_substitution_list -> param_substitution_list COMMA param_substitution
Rule 113   param_substitution_list -> param_substitution
Rule 114   param_substitution -> ID EQUALS rvalue
Rule 115   assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON
Rule 116   assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
Rule 117   lpartselect -> pointer LBRACKET expression COLON expression RBRACKET
Rule 118   lpartselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET
Rule 119   lpartselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET
Rule 120   lpartselect -> identifier LBRACKET expression COLON expression RBRACKET
Rule 121   lpartselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET
Rule 122   lpartselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET
Rule 123   lpointer -> pointer
Rule 124   lconcat -> LBRACE lconcatlist RBRACE
Rule 125   lconcatlist -> lconcatlist COMMA lconcat_one
Rule 126   lconcatlist -> lconcat_one
Rule 127   lconcat_one -> identifier
Rule 128   lconcat_one -> lpartselect
Rule 129   lconcat_one -> lpointer
Rule 130   lconcat_one -> lconcat
Rule 131   lvalue -> lpartselect
Rule 132   lvalue -> lpointer
Rule 133   lvalue -> lconcat
Rule 134   lvalue -> identifier
Rule 135   rvalue -> expression
Rule 136   expression -> MINUS expression
Rule 137   expression -> PLUS expression
Rule 138   expression -> LNOT expression
Rule 139   expression -> NOT expression
Rule 140   expression -> AND expression
Rule 141   expression -> NAND expression
Rule 142   expression -> NOR expression
Rule 143   expression -> OR expression
Rule 144   expression -> XOR expression
Rule 145   expression -> XNOR expression
Rule 146   expression -> expression POWER expression
Rule 147   expression -> expression TIMES expression
Rule 148   expression -> expression DIVIDE expression
Rule 149   expression -> expression MOD expression
Rule 150   expression -> expression PLUS expression
Rule 151   expression -> expression MINUS expression
Rule 152   expression -> expression LSHIFT expression
Rule 153   expression -> expression RSHIFT expression
Rule 154   expression -> expression LSHIFTA expression
Rule 155   expression -> expression RSHIFTA expression
Rule 156   expression -> expression LT expression
Rule 157   expression -> expression GT expression
Rule 158   expression -> expression LE expression
Rule 159   expression -> expression GE expression
Rule 160   expression -> expression EQ expression
Rule 161   expression -> expression NE expression
Rule 162   expression -> expression EQL expression
Rule 163   expression -> expression NEL expression
Rule 164   expression -> expression AND expression
Rule 165   expression -> expression XOR expression
Rule 166   expression -> expression XNOR expression
Rule 167   expression -> expression OR expression
Rule 168   expression -> expression LAND expression
Rule 169   expression -> expression LOR expression
Rule 170   expression -> expression COND expression COLON expression
Rule 171   expression -> LPAREN expression RPAREN
Rule 172   expression -> concat
Rule 173   expression -> repeat
Rule 174   expression -> partselect
Rule 175   expression -> pointer
Rule 176   expression -> functioncall
Rule 177   expression -> systemcall
Rule 178   expression -> identifier
Rule 179   expression -> const_expression
Rule 180   concat -> LBRACE concatlist RBRACE
Rule 181   concatlist -> concatlist COMMA expression
Rule 182   concatlist -> expression
Rule 183   repeat -> LBRACE expression concat RBRACE
Rule 184   partselect -> identifier LBRACKET expression COLON expression RBRACKET
Rule 185   partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET
Rule 186   partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET
Rule 187   partselect -> pointer LBRACKET expression COLON expression RBRACKET
Rule 188   partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET
Rule 189   partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET
Rule 190   pointer -> identifier LBRACKET expression RBRACKET
Rule 191   pointer -> pointer LBRACKET expression RBRACKET
Rule 192   const_expression -> intnumber
Rule 193   const_expression -> floatnumber
Rule 194   const_expression -> stringliteral
Rule 195   floatnumber -> FLOATNUMBER
Rule 196   intnumber -> INTNUMBER_DEC
Rule 197   intnumber -> SIGNED_INTNUMBER_DEC
Rule 198   intnumber -> INTNUMBER_BIN
Rule 199   intnumber -> SIGNED_INTNUMBER_BIN
Rule 200   intnumber -> INTNUMBER_OCT
Rule 201   intnumber -> SIGNED_INTNUMBER_OCT
Rule 202   intnumber -> INTNUMBER_HEX
Rule 203   intnumber -> SIGNED_INTNUMBER_HEX
Rule 204   stringliteral -> STRING_LITERAL
Rule 205   always -> ALWAYS senslist always_statement
Rule 206   always_ff -> ALWAYS_FF senslist always_statement
Rule 207   always_comb -> ALWAYS_COMB senslist always_statement
Rule 208   always_latch -> ALWAYS_LATCH senslist always_statement
Rule 209   senslist -> AT LPAREN edgesigs RPAREN
Rule 210   edgesig -> POSEDGE edgesig_base
Rule 211   edgesig -> NEGEDGE edgesig_base
Rule 212   edgesig_base -> identifier
Rule 213   edgesig_base -> pointer
Rule 214   edgesigs -> edgesigs SENS_OR edgesig
Rule 215   edgesigs -> edgesigs COMMA edgesig
Rule 216   edgesigs -> edgesig
Rule 217   senslist -> empty
Rule 218   senslist -> AT levelsig
Rule 219   senslist -> AT LPAREN levelsigs RPAREN
Rule 220   levelsig -> levelsig_base
Rule 221   levelsig_base -> identifier
Rule 222   levelsig_base -> pointer
Rule 223   levelsig_base -> partselect
Rule 224   levelsigs -> levelsigs SENS_OR levelsig
Rule 225   levelsigs -> levelsigs COMMA levelsig
Rule 226   levelsigs -> levelsig
Rule 227   senslist -> AT TIMES
Rule 228   senslist -> AT LPAREN TIMES RPAREN
Rule 229   basic_statement -> if_statement
Rule 230   basic_statement -> case_statement
Rule 231   basic_statement -> casex_statement
Rule 232   basic_statement -> casez_statement
Rule 233   basic_statement -> unique_case_statement
Rule 234   basic_statement -> for_statement
Rule 235   basic_statement -> while_statement
Rule 236   basic_statement -> event_statement
Rule 237   basic_statement -> wait_statement
Rule 238   basic_statement -> forever_statement
Rule 239   basic_statement -> block
Rule 240   basic_statement -> namedblock
Rule 241   basic_statement -> parallelblock
Rule 242   basic_statement -> blocking_substitution
Rule 243   basic_statement -> nonblocking_substitution
Rule 244   basic_statement -> single_statement
Rule 245   always_statement -> basic_statement
Rule 246   blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON
Rule 247   blocking_substitution_base -> delays lvalue EQUALS delays rvalue
Rule 248   nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON
Rule 249   delays -> DELAY LPAREN expression RPAREN
Rule 250   delays -> DELAY identifier
Rule 251   delays -> DELAY intnumber
Rule 252   delays -> DELAY floatnumber
Rule 253   delays -> empty
Rule 254   block -> BEGIN block_statements END
Rule 255   block -> BEGIN END
Rule 256   block_statements -> block_statements block_statement
Rule 257   block_statements -> block_statement
Rule 258   block_statement -> basic_statement
Rule 259   namedblock -> BEGIN COLON ID namedblock_statements END
Rule 260   namedblock -> BEGIN COLON ID END
Rule 261   namedblock_statements -> namedblock_statements namedblock_statement
Rule 262   namedblock_statements -> namedblock_statement
Rule 263   namedblock_statement -> basic_statement
Rule 264   namedblock_statement -> decl
Rule 265   namedblock_statement -> integerdecl
Rule 266   namedblock_statement -> realdecl
Rule 267   namedblock_statement -> parameterdecl
Rule 268   namedblock_statement -> localparamdecl
Rule 269   parallelblock -> FORK block_statements JOIN
Rule 270   parallelblock -> FORK JOIN
Rule 271   if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement
Rule 272   if_statement -> IF LPAREN cond RPAREN true_statement
Rule 273   if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement
Rule 274   if_statement -> delays IF LPAREN cond RPAREN true_statement
Rule 275   cond -> expression
Rule 276   ifcontent_statement -> basic_statement
Rule 277   true_statement -> ifcontent_statement
Rule 278   else_statement -> ifcontent_statement
Rule 279   for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
Rule 280   forpre -> blocking_substitution
Rule 281   forpre -> SEMICOLON
Rule 282   forcond -> cond SEMICOLON
Rule 283   forcond -> SEMICOLON
Rule 284   forpost -> blocking_substitution_base
Rule 285   forpost -> empty
Rule 286   forcontent_statement -> basic_statement
Rule 287   while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement
Rule 288   whilecontent_statement -> basic_statement
Rule 289   case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
Rule 290   casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
Rule 291   casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE
Rule 292   unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
Rule 293   case_comp -> expression
Rule 294   casecontent_statements -> casecontent_statements casecontent_statement
Rule 295   casecontent_statements -> casecontent_statement
Rule 296   casecontent_statement -> casecontent_condition COLON basic_statement
Rule 297   casecontent_condition -> casecontent_condition COMMA expression
Rule 298   casecontent_condition -> expression
Rule 299   casecontent_statement -> DEFAULT COLON basic_statement
Rule 300   initial -> INITIAL initial_statement
Rule 301   initial_statement -> basic_statement
Rule 302   event_statement -> senslist SEMICOLON
Rule 303   wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement
Rule 304   waitcontent_statement -> basic_statement
Rule 305   waitcontent_statement -> SEMICOLON
Rule 306   forever_statement -> FOREVER basic_statement
Rule 307   instance -> ID parameterlist instance_bodylist SEMICOLON
Rule 308   instance -> SENS_OR parameterlist instance_bodylist SEMICOLON
Rule 309   instance_bodylist -> instance_bodylist COMMA instance_body
Rule 310   instance_bodylist -> instance_body
Rule 311   instance_body -> ID LPAREN instance_ports RPAREN
Rule 312   instance_body -> ID width LPAREN instance_ports RPAREN
Rule 313   instance -> ID instance_bodylist_noname SEMICOLON
Rule 314   instance -> SENS_OR instance_bodylist_noname SEMICOLON
Rule 315   instance_bodylist_noname -> instance_bodylist_noname COMMA instance_body_noname
Rule 316   instance_bodylist_noname -> instance_body_noname
Rule 317   instance_body_noname -> LPAREN instance_ports RPAREN
Rule 318   parameterlist -> DELAY LPAREN param_args RPAREN
Rule 319   parameterlist -> DELAY LPAREN param_args_noname RPAREN
Rule 320   parameterlist -> empty
Rule 321   param_args_noname -> param_args_noname COMMA param_arg_noname
Rule 322   param_args_noname -> param_arg_noname
Rule 323   param_args -> param_args COMMA param_arg
Rule 324   param_args -> param_arg
Rule 325   param_args -> empty
Rule 326   param_arg_noname -> expression
Rule 327   param_arg -> DOT ID LPAREN expression RPAREN
Rule 328   instance_ports -> instance_ports_list
Rule 329   instance_ports -> instance_ports_arg
Rule 330   instance_ports_list -> instance_ports_list COMMA instance_port_list
Rule 331   instance_ports_list -> instance_port_list
Rule 332   instance_ports_list -> empty
Rule 333   instance_port_list -> expression
Rule 334   instance_ports_arg -> instance_ports_arg COMMA instance_port_arg
Rule 335   instance_ports_arg -> instance_port_arg
Rule 336   instance_port_arg -> DOT ID LPAREN identifier RPAREN
Rule 337   instance_port_arg -> DOT ID LPAREN expression RPAREN
Rule 338   instance_port_arg -> DOT ID LPAREN RPAREN
Rule 339   genvardecl -> GENVAR genvarlist SEMICOLON
Rule 340   genvarlist -> genvarlist COMMA genvar
Rule 341   genvarlist -> genvar
Rule 342   genvar -> ID
Rule 343   generate -> GENERATE generate_items ENDGENERATE
Rule 344   generate_items -> empty
Rule 345   generate_items -> generate_items generate_item
Rule 346   generate_items -> generate_item
Rule 347   generate_item -> standard_item
Rule 348   generate_item -> generate_if
Rule 349   generate_item -> generate_for
Rule 350   generate_block -> BEGIN generate_items END
Rule 351   generate_block -> BEGIN COLON ID generate_items END
Rule 352   generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
Rule 353   generate_if -> IF LPAREN cond RPAREN gif_true_item
Rule 354   gif_true_item -> generate_item
Rule 355   gif_true_item -> generate_block
Rule 356   gif_false_item -> generate_item
Rule 357   gif_false_item -> generate_block
Rule 358   generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
Rule 359   generate_forcontent -> generate_item
Rule 360   generate_forcontent -> generate_block
Rule 361   systemcall -> DOLLER ID
Rule 362   systemcall -> DOLLER ID LPAREN sysargs RPAREN
Rule 363   systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN
Rule 364   sysargs -> sysargs COMMA sysarg
Rule 365   sysargs -> sysarg
Rule 366   sysargs -> empty
Rule 367   sysarg -> expression
Rule 368   function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
Rule 369   function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION
Rule 370   function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION
Rule 371   function_statement -> funcvardecls function_calc
Rule 372   funcvardecls -> funcvardecls funcvardecl
Rule 373   funcvardecls -> funcvardecl
Rule 374   funcvardecl -> decl
Rule 375   funcvardecl -> integerdecl
Rule 376   function_calc -> blocking_substitution
Rule 377   function_calc -> if_statement
Rule 378   function_calc -> for_statement
Rule 379   function_calc -> while_statement
Rule 380   function_calc -> case_statement
Rule 381   function_calc -> casex_statement
Rule 382   function_calc -> casez_statement
Rule 383   function_calc -> block
Rule 384   function_calc -> namedblock
Rule 385   functioncall -> identifier LPAREN func_args RPAREN
Rule 386   func_args -> func_args COMMA expression
Rule 387   func_args -> expression
Rule 388   func_args -> empty
Rule 389   task -> TASK ID SEMICOLON task_statement ENDTASK
Rule 390   task_statement -> taskvardecls task_calc
Rule 391   taskvardecls -> taskvardecls taskvardecl
Rule 392   taskvardecls -> taskvardecl
Rule 393   taskvardecls -> empty
Rule 394   taskvardecl -> decl
Rule 395   taskvardecl -> integerdecl
Rule 396   task_calc -> blocking_substitution
Rule 397   task_calc -> if_statement
Rule 398   task_calc -> for_statement
Rule 399   task_calc -> while_statement
Rule 400   task_calc -> case_statement
Rule 401   task_calc -> casex_statement
Rule 402   task_calc -> casez_statement
Rule 403   task_calc -> block
Rule 404   task_calc -> namedblock
Rule 405   identifier -> ID
Rule 406   identifier -> scope ID
Rule 407   scope -> identifier DOT
Rule 408   scope -> pointer DOT
Rule 409   disable -> DISABLE ID
Rule 410   single_statement -> DELAY expression SEMICOLON
Rule 411   single_statement -> systemcall SEMICOLON
Rule 412   single_statement -> disable SEMICOLON
Rule 413   empty -> <empty>

Terminals, with rules where they appear

ALWAYS               : 205
ALWAYS_COMB          : 207
ALWAYS_FF            : 206
ALWAYS_LATCH         : 208
AND                  : 140 164
ASSIGN               : 115 116
AT                   : 209 218 219 227 228
BEGIN                : 254 255 259 260 350 351
CASE                 : 289 292
CASEX                : 290
CASEZ                : 291
COLON                : 56 57 117 120 170 184 187 259 260 296 299 351
COMMA                : 18 19 20 21 22 32 47 84 94 99 112 125 181 215 225 297 309 315 321 323 330 334 340 364 386
COND                 : 170
DEFAULT              : 299
DELAY                : 12 249 250 251 252 318 319 410
DISABLE              : 409
DIVIDE               : 148
DOLLER               : 361 362 363
DOT                  : 327 336 337 338 407 408
ELSE                 : 271 273 352
END                  : 254 255 259 260 350 351
ENDCASE              : 289 290 291 292
ENDFUNCTION          : 368 369 370
ENDGENERATE          : 343
ENDMODULE            : 9
ENDTASK              : 389
EQ                   : 160
EQL                  : 162
EQUALS               : 7 90 91 96 114 115 116 246 247
FLOATNUMBER          : 195
FOR                  : 279 358
FOREVER              : 306
FORK                 : 269 270
FUNCTION             : 368 369 370
GE                   : 159
GENERATE             : 343
GENVAR               : 339
GT                   : 157
ID                   : 7 8 10 34 86 87 90 91 96 97 101 114 259 260 307 311 312 313 327 336 337 338 342 351 361 362 368 369 370 389 405 406 409
IF                   : 271 272 273 274 352 353
INITIAL              : 300
INOUT                : 39
INPUT                : 37
INTEGER              : 22 27 92 93 106 111 370
INTNUMBER_BIN        : 198
INTNUMBER_DEC        : 196
INTNUMBER_HEX        : 202
INTNUMBER_OCT        : 200
JOIN                 : 269 270
LAND                 : 168
LBRACE               : 124 180 183
LBRACKET             : 56 57 117 118 119 120 121 122 184 185 186 187 188 189 190 191
LE                   : 158 248
LNOT                 : 138
LOCALPARAM           : 107 108 109 110 111
LOGIC                : 42
LOR                  : 169
LPAREN               : 7 8 12 28 29 30 171 209 219 228 249 271 272 273 274 279 287 289 290 291 292 303 311 312 317 318 319 327 336 337 338 352 353 358 362 363 385
LSHIFT               : 152
LSHIFTA              : 154
LT                   : 156
MINUS                : 136 151
MINUSCOLON           : 119 122 186 189
MOD                  : 149
MODULE               : 9
NAND                 : 141
NE                   : 161
NEGEDGE              : 211
NEL                  : 163
NOR                  : 142
NOT                  : 139
OR                   : 143 167
OUTPUT               : 38
PARAMETER            : 18 19 20 21 22 23 24 25 26 27 102 103 104 105 106
PLUS                 : 137 150
PLUSCOLON            : 118 121 185 188
POSEDGE              : 210
POWER                : 146
RBRACE               : 124 180 183
RBRACKET             : 56 57 117 118 119 120 121 122 184 185 186 187 188 189 190 191
REAL                 : 98
REG                  : 41
RPAREN               : 7 8 12 28 29 30 171 209 219 228 249 271 272 273 274 279 287 289 290 291 292 303 311 312 317 318 319 327 336 337 338 352 353 358 362 363 385
RSHIFT               : 153
RSHIFTA              : 155
SEMICOLON            : 28 29 30 31 82 83 88 89 92 93 98 102 103 104 105 106 107 108 109 110 111 115 116 246 248 281 282 283 302 305 307 308 313 314 339 368 369 370 389 410 411 412
SENS_OR              : 11 214 224 308 314
SIGNED               : 19 21 24 26 44 93 103 105 108 110 363
SIGNED_INTNUMBER_BIN : 199
SIGNED_INTNUMBER_DEC : 197
SIGNED_INTNUMBER_HEX : 203
SIGNED_INTNUMBER_OCT : 201
STRING_LITERAL       : 204
SUPPLY0              : 45
SUPPLY1              : 46
TASK                 : 389
TIMES                : 7 7 8 8 147 227 228
TRI                  : 40
UNIQUE               : 292
WAIT                 : 303
WHILE                : 287
WIRE                 : 43
XNOR                 : 145 166
XOR                  : 144 165
error                : 

Nonterminals, with rules where they appear

always               : 73
always_comb          : 75
always_ff            : 74
always_latch         : 76
always_statement     : 205 206 207 208
assignment           : 72
basic_statement      : 245 258 263 276 286 288 296 299 301 304 306
block                : 239 383 403
block_statement      : 256 257
block_statements     : 254 256 269
blocking_substitution : 242 280 376 396
blocking_substitution_base : 284
case_comp            : 289 290 291 292
case_statement       : 230 380 400
casecontent_condition : 296 297
casecontent_statement : 294 295
casecontent_statements : 289 290 291 292 294
casex_statement      : 231 381 401
casez_statement      : 232 382 402
concat               : 172 183
concatlist           : 180 181
cond                 : 271 272 273 274 282 287 303 352 353
const_expression     : 179
decl                 : 65 264 374 394
declassign           : 68
declassign_element   : 88 89
declname             : 84 85
declnamelist         : 82 83 84
definition           : 3 4
definitions          : 2 3
delays               : 91 91 116 116 246 246 247 247 248 248 273 274
description          : 1
dimensions           : 51 54 58 87
disable              : 412
edgesig              : 214 215 216
edgesig_base         : 210 211
edgesigs             : 209 214 215
else_statement       : 271 273
empty                : 13 62 217 253 285 320 325 332 344 366 388 393
event_statement      : 236
expression           : 7 56 56 57 57 117 117 118 118 119 119 120 120 121 121 122 122 135 136 137 138 139 140 141 142 143 144 145 146 146 147 147 148 148 149 149 150 150 151 151 152 152 153 153 154 154 155 155 156 156 157 157 158 158 159 159 160 160 161 161 162 162 163 163 164 164 165 165 166 166 167 167 168 168 169 169 170 170 170 171 181 182 183 184 184 185 185 186 186 187 187 188 188 189 189 190 191 249 275 293 297 298 326 327 333 337 367 386 387 410
floatnumber          : 193 252
for_statement        : 234 378 398
forcond              : 279 358
forcontent_statement : 279
forever_statement    : 238
forpost              : 279 358
forpre               : 279 358
func_args            : 385 386
function             : 79
function_calc        : 371
function_statement   : 368 369 370
functioncall         : 176
funcvardecl          : 372 373
funcvardecls         : 371 372
generate             : 64
generate_block       : 355 357 360
generate_for         : 349
generate_forcontent  : 358
generate_if          : 348
generate_item        : 345 346 354 356 359
generate_items       : 343 345 350 351
genvar               : 340 341
genvardecl           : 71
genvarlist           : 339 340
gif_false_item       : 352
gif_true_item        : 352 353
identifier           : 120 121 122 127 134 178 184 185 186 190 212 221 250 336 385 407
if_statement         : 229 377 397
ifcontent_statement  : 277 278
initial              : 77
initial_statement    : 300
instance             : 78
instance_body        : 309 310
instance_body_noname : 315 316
instance_bodylist    : 307 308 309
instance_bodylist_noname : 313 314 315
instance_port_arg    : 334 335
instance_port_list   : 330 331
instance_ports       : 311 312 317
instance_ports_arg   : 329 334
instance_ports_list  : 328 330
integerdecl          : 66 265 375 395
integername          : 94 95
integernamelist      : 92 93 94
intnumber            : 192 251
ioport               : 47
ioport_head          : 48
ioports              : 29 47
item                 : 60 61
items                : 9 60
lconcat              : 130 133
lconcat_one          : 125 126
lconcatlist          : 124 125
length               : 58 59
levelsig             : 218 224 225 226
levelsig_base        : 220
levelsigs            : 219 224 225
localparamdecl       : 70 268
lpartselect          : 128 131
lpointer             : 129 132
lvalue               : 115 116 246 247 248
moduledef            : 5
modulename           : 9
namedblock           : 240 384 404
namedblock_statement : 261 262
namedblock_statements : 259 261
nonblocking_substitution : 243
parallelblock        : 241
param                : 15 16
param_arg            : 323 324
param_arg_noname     : 321 322
param_args           : 318 323
param_args_noname    : 319 321
param_end            : 14 17
param_substitution   : 112 113
param_substitution_list : 18 19 20 21 22 23 24 25 26 27 102 103 104 105 106 107 108 109 110 111 112
parameterdecl        : 69 267
parameterlist        : 307 308
paramlist            : 9
params               : 12
params_begin         : 14 15
partselect           : 174 223
pointer              : 117 118 119 123 175 187 188 189 191 213 222 408
portlist             : 9
portname             : 32 33 49 50 51 52 53 54 55
ports                : 28 32
pragma               : 6 81
realdecl             : 67 266
realname             : 99 100
realnamelist         : 98 99
repeat               : 173
rvalue               : 90 91 96 114 115 116 246 247 248
scope                : 406
senslist             : 205 206 207 208 302
sigtype              : 35 36
sigtypes             : 35 49 50 51 52 53 54 82 83 88 89
single_statement     : 244
source_text          : 0
standard_item        : 63 347
stringliteral        : 194
sysarg               : 364 365
sysargs              : 362 363 364
systemcall           : 177 411
task                 : 80
task_calc            : 390
task_statement       : 389
taskvardecl          : 391 392
taskvardecls         : 390 391
true_statement       : 271 272 273 274
unique_case_statement : 233
wait_statement       : 237
waitcontent_statement : 303
while_statement      : 235 379 399
whilecontent_statement : 287
width                : 20 21 25 26 50 51 53 54 83 89 104 105 109 110 312 368

Parsing method: LALR

state 0

    (0) S' -> . source_text
    (1) source_text -> . description
    (2) description -> . definitions
    (3) definitions -> . definitions definition
    (4) definitions -> . definition
    (5) definition -> . moduledef
    (6) definition -> . pragma
    (9) moduledef -> . MODULE modulename paramlist portlist items ENDMODULE
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN

    MODULE          shift and go to state 7
    LPAREN          shift and go to state 8

    source_text                    shift and go to state 1
    description                    shift and go to state 2
    definitions                    shift and go to state 3
    definition                     shift and go to state 4
    moduledef                      shift and go to state 5
    pragma                         shift and go to state 6

state 1

    (0) S' -> source_text .



state 2

    (1) source_text -> description .

    $end            reduce using rule 1 (source_text -> description .)


state 3

    (2) description -> definitions .
    (3) definitions -> definitions . definition
    (5) definition -> . moduledef
    (6) definition -> . pragma
    (9) moduledef -> . MODULE modulename paramlist portlist items ENDMODULE
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN

    $end            reduce using rule 2 (description -> definitions .)
    MODULE          shift and go to state 7
    LPAREN          shift and go to state 8

    definition                     shift and go to state 9
    moduledef                      shift and go to state 5
    pragma                         shift and go to state 6

state 4

    (4) definitions -> definition .

    MODULE          reduce using rule 4 (definitions -> definition .)
    LPAREN          reduce using rule 4 (definitions -> definition .)
    $end            reduce using rule 4 (definitions -> definition .)


state 5

    (5) definition -> moduledef .

    MODULE          reduce using rule 5 (definition -> moduledef .)
    LPAREN          reduce using rule 5 (definition -> moduledef .)
    $end            reduce using rule 5 (definition -> moduledef .)


state 6

    (6) definition -> pragma .

    MODULE          reduce using rule 6 (definition -> pragma .)
    LPAREN          reduce using rule 6 (definition -> pragma .)
    $end            reduce using rule 6 (definition -> pragma .)


state 7

    (9) moduledef -> MODULE . modulename paramlist portlist items ENDMODULE
    (10) modulename -> . ID
    (11) modulename -> . SENS_OR

    ID              shift and go to state 11
    SENS_OR         shift and go to state 12

    modulename                     shift and go to state 10

state 8

    (7) pragma -> LPAREN . TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> LPAREN . TIMES ID TIMES RPAREN

    TIMES           shift and go to state 13


state 9

    (3) definitions -> definitions definition .

    MODULE          reduce using rule 3 (definitions -> definitions definition .)
    LPAREN          reduce using rule 3 (definitions -> definitions definition .)
    $end            reduce using rule 3 (definitions -> definitions definition .)


state 10

    (9) moduledef -> MODULE modulename . paramlist portlist items ENDMODULE
    (12) paramlist -> . DELAY LPAREN params RPAREN
    (13) paramlist -> . empty
    (413) empty -> .

    DELAY           shift and go to state 15
    LPAREN          reduce using rule 413 (empty -> .)
    SEMICOLON       reduce using rule 413 (empty -> .)

    paramlist                      shift and go to state 14
    empty                          shift and go to state 16

state 11

    (10) modulename -> ID .

    DELAY           reduce using rule 10 (modulename -> ID .)
    LPAREN          reduce using rule 10 (modulename -> ID .)
    SEMICOLON       reduce using rule 10 (modulename -> ID .)


state 12

    (11) modulename -> SENS_OR .

    DELAY           reduce using rule 11 (modulename -> SENS_OR .)
    LPAREN          reduce using rule 11 (modulename -> SENS_OR .)
    SEMICOLON       reduce using rule 11 (modulename -> SENS_OR .)


state 13

    (7) pragma -> LPAREN TIMES . ID EQUALS expression TIMES RPAREN
    (8) pragma -> LPAREN TIMES . ID TIMES RPAREN

    ID              shift and go to state 17


state 14

    (9) moduledef -> MODULE modulename paramlist . portlist items ENDMODULE
    (28) portlist -> . LPAREN ports RPAREN SEMICOLON
    (29) portlist -> . LPAREN ioports RPAREN SEMICOLON
    (30) portlist -> . LPAREN RPAREN SEMICOLON
    (31) portlist -> . SEMICOLON

    LPAREN          shift and go to state 19
    SEMICOLON       shift and go to state 20

    portlist                       shift and go to state 18

state 15

    (12) paramlist -> DELAY . LPAREN params RPAREN

    LPAREN          shift and go to state 21


state 16

    (13) paramlist -> empty .

    LPAREN          reduce using rule 13 (paramlist -> empty .)
    SEMICOLON       reduce using rule 13 (paramlist -> empty .)


state 17

    (7) pragma -> LPAREN TIMES ID . EQUALS expression TIMES RPAREN
    (8) pragma -> LPAREN TIMES ID . TIMES RPAREN

    EQUALS          shift and go to state 23
    TIMES           shift and go to state 22


state 18

    (9) moduledef -> MODULE modulename paramlist portlist . items ENDMODULE
    (60) items -> . items item
    (61) items -> . item
    (62) items -> . empty
    (63) item -> . standard_item
    (64) item -> . generate
    (413) empty -> .
    (65) standard_item -> . decl
    (66) standard_item -> . integerdecl
    (67) standard_item -> . realdecl
    (68) standard_item -> . declassign
    (69) standard_item -> . parameterdecl
    (70) standard_item -> . localparamdecl
    (71) standard_item -> . genvardecl
    (72) standard_item -> . assignment
    (73) standard_item -> . always
    (74) standard_item -> . always_ff
    (75) standard_item -> . always_comb
    (76) standard_item -> . always_latch
    (77) standard_item -> . initial
    (78) standard_item -> . instance
    (79) standard_item -> . function
    (80) standard_item -> . task
    (81) standard_item -> . pragma
    (343) generate -> . GENERATE generate_items ENDGENERATE
    (82) decl -> . sigtypes declnamelist SEMICOLON
    (83) decl -> . sigtypes width declnamelist SEMICOLON
    (92) integerdecl -> . INTEGER integernamelist SEMICOLON
    (93) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (98) realdecl -> . REAL realnamelist SEMICOLON
    (88) declassign -> . sigtypes declassign_element SEMICOLON
    (89) declassign -> . sigtypes width declassign_element SEMICOLON
    (102) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (103) parameterdecl -> . PARAMETER SIGNED param_substitution_list SEMICOLON
    (104) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (105) parameterdecl -> . PARAMETER SIGNED width param_substitution_list SEMICOLON
    (106) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (107) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (108) localparamdecl -> . LOCALPARAM SIGNED param_substitution_list SEMICOLON
    (109) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (110) localparamdecl -> . LOCALPARAM SIGNED width param_substitution_list SEMICOLON
    (111) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (339) genvardecl -> . GENVAR genvarlist SEMICOLON
    (115) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (116) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (205) always -> . ALWAYS senslist always_statement
    (206) always_ff -> . ALWAYS_FF senslist always_statement
    (207) always_comb -> . ALWAYS_COMB senslist always_statement
    (208) always_latch -> . ALWAYS_LATCH senslist always_statement
    (300) initial -> . INITIAL initial_statement
    (307) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (308) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (313) instance -> . ID instance_bodylist_noname SEMICOLON
    (314) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (368) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (369) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (370) function -> . FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION
    (389) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

  ! shift/reduce conflict for GENERATE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
  ! shift/reduce conflict for PARAMETER resolved as shift
  ! shift/reduce conflict for LOCALPARAM resolved as shift
  ! shift/reduce conflict for GENVAR resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for ALWAYS resolved as shift
  ! shift/reduce conflict for ALWAYS_FF resolved as shift
  ! shift/reduce conflict for ALWAYS_COMB resolved as shift
  ! shift/reduce conflict for ALWAYS_LATCH resolved as shift
  ! shift/reduce conflict for INITIAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for SENS_OR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for TASK resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for INOUT resolved as shift
  ! shift/reduce conflict for TRI resolved as shift
  ! shift/reduce conflict for REG resolved as shift
  ! shift/reduce conflict for LOGIC resolved as shift
  ! shift/reduce conflict for WIRE resolved as shift
  ! shift/reduce conflict for SIGNED resolved as shift
  ! shift/reduce conflict for SUPPLY0 resolved as shift
  ! shift/reduce conflict for SUPPLY1 resolved as shift
    ENDMODULE       reduce using rule 413 (empty -> .)
    GENERATE        shift and go to state 46
    INTEGER         shift and go to state 48
    REAL            shift and go to state 50
    PARAMETER       shift and go to state 51
    LOCALPARAM      shift and go to state 52
    GENVAR          shift and go to state 53
    ASSIGN          shift and go to state 54
    ALWAYS          shift and go to state 55
    ALWAYS_FF       shift and go to state 56
    ALWAYS_COMB     shift and go to state 57
    ALWAYS_LATCH    shift and go to state 58
    INITIAL         shift and go to state 59
    ID              shift and go to state 60
    SENS_OR         shift and go to state 61
    FUNCTION        shift and go to state 62
    TASK            shift and go to state 63
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 65
    OUTPUT          shift and go to state 66
    INOUT           shift and go to state 67
    TRI             shift and go to state 68
    REG             shift and go to state 69
    LOGIC           shift and go to state 70
    WIRE            shift and go to state 71
    SIGNED          shift and go to state 49
    SUPPLY0         shift and go to state 72
    SUPPLY1         shift and go to state 73

  ! GENERATE        [ reduce using rule 413 (empty -> .) ]
  ! INTEGER         [ reduce using rule 413 (empty -> .) ]
  ! REAL            [ reduce using rule 413 (empty -> .) ]
  ! PARAMETER       [ reduce using rule 413 (empty -> .) ]
  ! LOCALPARAM      [ reduce using rule 413 (empty -> .) ]
  ! GENVAR          [ reduce using rule 413 (empty -> .) ]
  ! ASSIGN          [ reduce using rule 413 (empty -> .) ]
  ! ALWAYS          [ reduce using rule 413 (empty -> .) ]
  ! ALWAYS_FF       [ reduce using rule 413 (empty -> .) ]
  ! ALWAYS_COMB     [ reduce using rule 413 (empty -> .) ]
  ! ALWAYS_LATCH    [ reduce using rule 413 (empty -> .) ]
  ! INITIAL         [ reduce using rule 413 (empty -> .) ]
  ! ID              [ reduce using rule 413 (empty -> .) ]
  ! SENS_OR         [ reduce using rule 413 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 413 (empty -> .) ]
  ! TASK            [ reduce using rule 413 (empty -> .) ]
  ! LPAREN          [ reduce using rule 413 (empty -> .) ]
  ! INPUT           [ reduce using rule 413 (empty -> .) ]
  ! OUTPUT          [ reduce using rule 413 (empty -> .) ]
  ! INOUT           [ reduce using rule 413 (empty -> .) ]
  ! TRI             [ reduce using rule 413 (empty -> .) ]
  ! REG             [ reduce using rule 413 (empty -> .) ]
  ! LOGIC           [ reduce using rule 413 (empty -> .) ]
  ! WIRE            [ reduce using rule 413 (empty -> .) ]
  ! SIGNED          [ reduce using rule 413 (empty -> .) ]
  ! SUPPLY0         [ reduce using rule 413 (empty -> .) ]
  ! SUPPLY1         [ reduce using rule 413 (empty -> .) ]

    items                          shift and go to state 24
    item                           shift and go to state 25
    empty                          shift and go to state 26
    standard_item                  shift and go to state 27
    generate                       shift and go to state 28
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    always_ff                      shift and go to state 38
    always_comb                    shift and go to state 39
    always_latch                   shift and go to state 40
    initial                        shift and go to state 41
    instance                       shift and go to state 42
    function                       shift and go to state 43
    task                           shift and go to state 44
    pragma                         shift and go to state 45
    sigtypes                       shift and go to state 47
    sigtype                        shift and go to state 64

state 19

    (28) portlist -> LPAREN . ports RPAREN SEMICOLON
    (29) portlist -> LPAREN . ioports RPAREN SEMICOLON
    (30) portlist -> LPAREN . RPAREN SEMICOLON
    (32) ports -> . ports COMMA portname
    (33) ports -> . portname
    (47) ioports -> . ioports COMMA ioport
    (48) ioports -> . ioport_head
    (34) portname -> . ID
    (52) ioport_head -> . sigtypes portname
    (53) ioport_head -> . sigtypes width portname
    (54) ioport_head -> . sigtypes width portname dimensions
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

    RPAREN          shift and go to state 75
    ID              shift and go to state 79
    INPUT           shift and go to state 65
    OUTPUT          shift and go to state 66
    INOUT           shift and go to state 67
    TRI             shift and go to state 68
    REG             shift and go to state 69
    LOGIC           shift and go to state 70
    WIRE            shift and go to state 71
    SIGNED          shift and go to state 49
    SUPPLY0         shift and go to state 72
    SUPPLY1         shift and go to state 73

    ports                          shift and go to state 74
    ioports                        shift and go to state 76
    portname                       shift and go to state 77
    ioport_head                    shift and go to state 78
    sigtypes                       shift and go to state 80
    sigtype                        shift and go to state 64

state 20

    (31) portlist -> SEMICOLON .

    GENERATE        reduce using rule 31 (portlist -> SEMICOLON .)
    INTEGER         reduce using rule 31 (portlist -> SEMICOLON .)
    REAL            reduce using rule 31 (portlist -> SEMICOLON .)
    PARAMETER       reduce using rule 31 (portlist -> SEMICOLON .)
    LOCALPARAM      reduce using rule 31 (portlist -> SEMICOLON .)
    GENVAR          reduce using rule 31 (portlist -> SEMICOLON .)
    ASSIGN          reduce using rule 31 (portlist -> SEMICOLON .)
    ALWAYS          reduce using rule 31 (portlist -> SEMICOLON .)
    ALWAYS_FF       reduce using rule 31 (portlist -> SEMICOLON .)
    ALWAYS_COMB     reduce using rule 31 (portlist -> SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 31 (portlist -> SEMICOLON .)
    INITIAL         reduce using rule 31 (portlist -> SEMICOLON .)
    ID              reduce using rule 31 (portlist -> SEMICOLON .)
    SENS_OR         reduce using rule 31 (portlist -> SEMICOLON .)
    FUNCTION        reduce using rule 31 (portlist -> SEMICOLON .)
    TASK            reduce using rule 31 (portlist -> SEMICOLON .)
    LPAREN          reduce using rule 31 (portlist -> SEMICOLON .)
    INPUT           reduce using rule 31 (portlist -> SEMICOLON .)
    OUTPUT          reduce using rule 31 (portlist -> SEMICOLON .)
    INOUT           reduce using rule 31 (portlist -> SEMICOLON .)
    TRI             reduce using rule 31 (portlist -> SEMICOLON .)
    REG             reduce using rule 31 (portlist -> SEMICOLON .)
    LOGIC           reduce using rule 31 (portlist -> SEMICOLON .)
    WIRE            reduce using rule 31 (portlist -> SEMICOLON .)
    SIGNED          reduce using rule 31 (portlist -> SEMICOLON .)
    SUPPLY0         reduce using rule 31 (portlist -> SEMICOLON .)
    SUPPLY1         reduce using rule 31 (portlist -> SEMICOLON .)
    ENDMODULE       reduce using rule 31 (portlist -> SEMICOLON .)


state 21

    (12) paramlist -> DELAY LPAREN . params RPAREN
    (14) params -> . params_begin param_end
    (17) params -> . param_end
    (15) params_begin -> . params_begin param
    (16) params_begin -> . param
    (23) param_end -> . PARAMETER param_substitution_list
    (24) param_end -> . PARAMETER SIGNED param_substitution_list
    (25) param_end -> . PARAMETER width param_substitution_list
    (26) param_end -> . PARAMETER SIGNED width param_substitution_list
    (27) param_end -> . PARAMETER INTEGER param_substitution_list
    (18) param -> . PARAMETER param_substitution_list COMMA
    (19) param -> . PARAMETER SIGNED param_substitution_list COMMA
    (20) param -> . PARAMETER width param_substitution_list COMMA
    (21) param -> . PARAMETER SIGNED width param_substitution_list COMMA
    (22) param -> . PARAMETER INTEGER param_substitution_list COMMA

    PARAMETER       shift and go to state 85

    params                         shift and go to state 81
    params_begin                   shift and go to state 82
    param_end                      shift and go to state 83
    param                          shift and go to state 84

state 22

    (8) pragma -> LPAREN TIMES ID TIMES . RPAREN

    RPAREN          shift and go to state 86


state 23

    (7) pragma -> LPAREN TIMES ID EQUALS . expression TIMES RPAREN
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 89
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 24

    (9) moduledef -> MODULE modulename paramlist portlist items . ENDMODULE
    (60) items -> items . item
    (63) item -> . standard_item
    (64) item -> . generate
    (65) standard_item -> . decl
    (66) standard_item -> . integerdecl
    (67) standard_item -> . realdecl
    (68) standard_item -> . declassign
    (69) standard_item -> . parameterdecl
    (70) standard_item -> . localparamdecl
    (71) standard_item -> . genvardecl
    (72) standard_item -> . assignment
    (73) standard_item -> . always
    (74) standard_item -> . always_ff
    (75) standard_item -> . always_comb
    (76) standard_item -> . always_latch
    (77) standard_item -> . initial
    (78) standard_item -> . instance
    (79) standard_item -> . function
    (80) standard_item -> . task
    (81) standard_item -> . pragma
    (343) generate -> . GENERATE generate_items ENDGENERATE
    (82) decl -> . sigtypes declnamelist SEMICOLON
    (83) decl -> . sigtypes width declnamelist SEMICOLON
    (92) integerdecl -> . INTEGER integernamelist SEMICOLON
    (93) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (98) realdecl -> . REAL realnamelist SEMICOLON
    (88) declassign -> . sigtypes declassign_element SEMICOLON
    (89) declassign -> . sigtypes width declassign_element SEMICOLON
    (102) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (103) parameterdecl -> . PARAMETER SIGNED param_substitution_list SEMICOLON
    (104) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (105) parameterdecl -> . PARAMETER SIGNED width param_substitution_list SEMICOLON
    (106) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (107) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (108) localparamdecl -> . LOCALPARAM SIGNED param_substitution_list SEMICOLON
    (109) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (110) localparamdecl -> . LOCALPARAM SIGNED width param_substitution_list SEMICOLON
    (111) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (339) genvardecl -> . GENVAR genvarlist SEMICOLON
    (115) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (116) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (205) always -> . ALWAYS senslist always_statement
    (206) always_ff -> . ALWAYS_FF senslist always_statement
    (207) always_comb -> . ALWAYS_COMB senslist always_statement
    (208) always_latch -> . ALWAYS_LATCH senslist always_statement
    (300) initial -> . INITIAL initial_statement
    (307) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (308) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (313) instance -> . ID instance_bodylist_noname SEMICOLON
    (314) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (368) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (369) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (370) function -> . FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION
    (389) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

    ENDMODULE       shift and go to state 124
    GENERATE        shift and go to state 46
    INTEGER         shift and go to state 48
    REAL            shift and go to state 50
    PARAMETER       shift and go to state 51
    LOCALPARAM      shift and go to state 52
    GENVAR          shift and go to state 53
    ASSIGN          shift and go to state 54
    ALWAYS          shift and go to state 55
    ALWAYS_FF       shift and go to state 56
    ALWAYS_COMB     shift and go to state 57
    ALWAYS_LATCH    shift and go to state 58
    INITIAL         shift and go to state 59
    ID              shift and go to state 60
    SENS_OR         shift and go to state 61
    FUNCTION        shift and go to state 62
    TASK            shift and go to state 63
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 65
    OUTPUT          shift and go to state 66
    INOUT           shift and go to state 67
    TRI             shift and go to state 68
    REG             shift and go to state 69
    LOGIC           shift and go to state 70
    WIRE            shift and go to state 71
    SIGNED          shift and go to state 49
    SUPPLY0         shift and go to state 72
    SUPPLY1         shift and go to state 73

    item                           shift and go to state 125
    standard_item                  shift and go to state 27
    generate                       shift and go to state 28
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    always_ff                      shift and go to state 38
    always_comb                    shift and go to state 39
    always_latch                   shift and go to state 40
    initial                        shift and go to state 41
    instance                       shift and go to state 42
    function                       shift and go to state 43
    task                           shift and go to state 44
    pragma                         shift and go to state 45
    sigtypes                       shift and go to state 47
    sigtype                        shift and go to state 64

state 25

    (61) items -> item .

    ENDMODULE       reduce using rule 61 (items -> item .)
    GENERATE        reduce using rule 61 (items -> item .)
    INTEGER         reduce using rule 61 (items -> item .)
    REAL            reduce using rule 61 (items -> item .)
    PARAMETER       reduce using rule 61 (items -> item .)
    LOCALPARAM      reduce using rule 61 (items -> item .)
    GENVAR          reduce using rule 61 (items -> item .)
    ASSIGN          reduce using rule 61 (items -> item .)
    ALWAYS          reduce using rule 61 (items -> item .)
    ALWAYS_FF       reduce using rule 61 (items -> item .)
    ALWAYS_COMB     reduce using rule 61 (items -> item .)
    ALWAYS_LATCH    reduce using rule 61 (items -> item .)
    INITIAL         reduce using rule 61 (items -> item .)
    ID              reduce using rule 61 (items -> item .)
    SENS_OR         reduce using rule 61 (items -> item .)
    FUNCTION        reduce using rule 61 (items -> item .)
    TASK            reduce using rule 61 (items -> item .)
    LPAREN          reduce using rule 61 (items -> item .)
    INPUT           reduce using rule 61 (items -> item .)
    OUTPUT          reduce using rule 61 (items -> item .)
    INOUT           reduce using rule 61 (items -> item .)
    TRI             reduce using rule 61 (items -> item .)
    REG             reduce using rule 61 (items -> item .)
    LOGIC           reduce using rule 61 (items -> item .)
    WIRE            reduce using rule 61 (items -> item .)
    SIGNED          reduce using rule 61 (items -> item .)
    SUPPLY0         reduce using rule 61 (items -> item .)
    SUPPLY1         reduce using rule 61 (items -> item .)


state 26

    (62) items -> empty .

    ENDMODULE       reduce using rule 62 (items -> empty .)
    GENERATE        reduce using rule 62 (items -> empty .)
    INTEGER         reduce using rule 62 (items -> empty .)
    REAL            reduce using rule 62 (items -> empty .)
    PARAMETER       reduce using rule 62 (items -> empty .)
    LOCALPARAM      reduce using rule 62 (items -> empty .)
    GENVAR          reduce using rule 62 (items -> empty .)
    ASSIGN          reduce using rule 62 (items -> empty .)
    ALWAYS          reduce using rule 62 (items -> empty .)
    ALWAYS_FF       reduce using rule 62 (items -> empty .)
    ALWAYS_COMB     reduce using rule 62 (items -> empty .)
    ALWAYS_LATCH    reduce using rule 62 (items -> empty .)
    INITIAL         reduce using rule 62 (items -> empty .)
    ID              reduce using rule 62 (items -> empty .)
    SENS_OR         reduce using rule 62 (items -> empty .)
    FUNCTION        reduce using rule 62 (items -> empty .)
    TASK            reduce using rule 62 (items -> empty .)
    LPAREN          reduce using rule 62 (items -> empty .)
    INPUT           reduce using rule 62 (items -> empty .)
    OUTPUT          reduce using rule 62 (items -> empty .)
    INOUT           reduce using rule 62 (items -> empty .)
    TRI             reduce using rule 62 (items -> empty .)
    REG             reduce using rule 62 (items -> empty .)
    LOGIC           reduce using rule 62 (items -> empty .)
    WIRE            reduce using rule 62 (items -> empty .)
    SIGNED          reduce using rule 62 (items -> empty .)
    SUPPLY0         reduce using rule 62 (items -> empty .)
    SUPPLY1         reduce using rule 62 (items -> empty .)


state 27

    (63) item -> standard_item .

    ENDMODULE       reduce using rule 63 (item -> standard_item .)
    GENERATE        reduce using rule 63 (item -> standard_item .)
    INTEGER         reduce using rule 63 (item -> standard_item .)
    REAL            reduce using rule 63 (item -> standard_item .)
    PARAMETER       reduce using rule 63 (item -> standard_item .)
    LOCALPARAM      reduce using rule 63 (item -> standard_item .)
    GENVAR          reduce using rule 63 (item -> standard_item .)
    ASSIGN          reduce using rule 63 (item -> standard_item .)
    ALWAYS          reduce using rule 63 (item -> standard_item .)
    ALWAYS_FF       reduce using rule 63 (item -> standard_item .)
    ALWAYS_COMB     reduce using rule 63 (item -> standard_item .)
    ALWAYS_LATCH    reduce using rule 63 (item -> standard_item .)
    INITIAL         reduce using rule 63 (item -> standard_item .)
    ID              reduce using rule 63 (item -> standard_item .)
    SENS_OR         reduce using rule 63 (item -> standard_item .)
    FUNCTION        reduce using rule 63 (item -> standard_item .)
    TASK            reduce using rule 63 (item -> standard_item .)
    LPAREN          reduce using rule 63 (item -> standard_item .)
    INPUT           reduce using rule 63 (item -> standard_item .)
    OUTPUT          reduce using rule 63 (item -> standard_item .)
    INOUT           reduce using rule 63 (item -> standard_item .)
    TRI             reduce using rule 63 (item -> standard_item .)
    REG             reduce using rule 63 (item -> standard_item .)
    LOGIC           reduce using rule 63 (item -> standard_item .)
    WIRE            reduce using rule 63 (item -> standard_item .)
    SIGNED          reduce using rule 63 (item -> standard_item .)
    SUPPLY0         reduce using rule 63 (item -> standard_item .)
    SUPPLY1         reduce using rule 63 (item -> standard_item .)


state 28

    (64) item -> generate .

    ENDMODULE       reduce using rule 64 (item -> generate .)
    GENERATE        reduce using rule 64 (item -> generate .)
    INTEGER         reduce using rule 64 (item -> generate .)
    REAL            reduce using rule 64 (item -> generate .)
    PARAMETER       reduce using rule 64 (item -> generate .)
    LOCALPARAM      reduce using rule 64 (item -> generate .)
    GENVAR          reduce using rule 64 (item -> generate .)
    ASSIGN          reduce using rule 64 (item -> generate .)
    ALWAYS          reduce using rule 64 (item -> generate .)
    ALWAYS_FF       reduce using rule 64 (item -> generate .)
    ALWAYS_COMB     reduce using rule 64 (item -> generate .)
    ALWAYS_LATCH    reduce using rule 64 (item -> generate .)
    INITIAL         reduce using rule 64 (item -> generate .)
    ID              reduce using rule 64 (item -> generate .)
    SENS_OR         reduce using rule 64 (item -> generate .)
    FUNCTION        reduce using rule 64 (item -> generate .)
    TASK            reduce using rule 64 (item -> generate .)
    LPAREN          reduce using rule 64 (item -> generate .)
    INPUT           reduce using rule 64 (item -> generate .)
    OUTPUT          reduce using rule 64 (item -> generate .)
    INOUT           reduce using rule 64 (item -> generate .)
    TRI             reduce using rule 64 (item -> generate .)
    REG             reduce using rule 64 (item -> generate .)
    LOGIC           reduce using rule 64 (item -> generate .)
    WIRE            reduce using rule 64 (item -> generate .)
    SIGNED          reduce using rule 64 (item -> generate .)
    SUPPLY0         reduce using rule 64 (item -> generate .)
    SUPPLY1         reduce using rule 64 (item -> generate .)


state 29

    (65) standard_item -> decl .

    ENDMODULE       reduce using rule 65 (standard_item -> decl .)
    GENERATE        reduce using rule 65 (standard_item -> decl .)
    INTEGER         reduce using rule 65 (standard_item -> decl .)
    REAL            reduce using rule 65 (standard_item -> decl .)
    PARAMETER       reduce using rule 65 (standard_item -> decl .)
    LOCALPARAM      reduce using rule 65 (standard_item -> decl .)
    GENVAR          reduce using rule 65 (standard_item -> decl .)
    ASSIGN          reduce using rule 65 (standard_item -> decl .)
    ALWAYS          reduce using rule 65 (standard_item -> decl .)
    ALWAYS_FF       reduce using rule 65 (standard_item -> decl .)
    ALWAYS_COMB     reduce using rule 65 (standard_item -> decl .)
    ALWAYS_LATCH    reduce using rule 65 (standard_item -> decl .)
    INITIAL         reduce using rule 65 (standard_item -> decl .)
    ID              reduce using rule 65 (standard_item -> decl .)
    SENS_OR         reduce using rule 65 (standard_item -> decl .)
    FUNCTION        reduce using rule 65 (standard_item -> decl .)
    TASK            reduce using rule 65 (standard_item -> decl .)
    LPAREN          reduce using rule 65 (standard_item -> decl .)
    INPUT           reduce using rule 65 (standard_item -> decl .)
    OUTPUT          reduce using rule 65 (standard_item -> decl .)
    INOUT           reduce using rule 65 (standard_item -> decl .)
    TRI             reduce using rule 65 (standard_item -> decl .)
    REG             reduce using rule 65 (standard_item -> decl .)
    LOGIC           reduce using rule 65 (standard_item -> decl .)
    WIRE            reduce using rule 65 (standard_item -> decl .)
    SIGNED          reduce using rule 65 (standard_item -> decl .)
    SUPPLY0         reduce using rule 65 (standard_item -> decl .)
    SUPPLY1         reduce using rule 65 (standard_item -> decl .)
    ENDGENERATE     reduce using rule 65 (standard_item -> decl .)
    IF              reduce using rule 65 (standard_item -> decl .)
    FOR             reduce using rule 65 (standard_item -> decl .)
    ELSE            reduce using rule 65 (standard_item -> decl .)
    END             reduce using rule 65 (standard_item -> decl .)


state 30

    (66) standard_item -> integerdecl .

    ENDMODULE       reduce using rule 66 (standard_item -> integerdecl .)
    GENERATE        reduce using rule 66 (standard_item -> integerdecl .)
    INTEGER         reduce using rule 66 (standard_item -> integerdecl .)
    REAL            reduce using rule 66 (standard_item -> integerdecl .)
    PARAMETER       reduce using rule 66 (standard_item -> integerdecl .)
    LOCALPARAM      reduce using rule 66 (standard_item -> integerdecl .)
    GENVAR          reduce using rule 66 (standard_item -> integerdecl .)
    ASSIGN          reduce using rule 66 (standard_item -> integerdecl .)
    ALWAYS          reduce using rule 66 (standard_item -> integerdecl .)
    ALWAYS_FF       reduce using rule 66 (standard_item -> integerdecl .)
    ALWAYS_COMB     reduce using rule 66 (standard_item -> integerdecl .)
    ALWAYS_LATCH    reduce using rule 66 (standard_item -> integerdecl .)
    INITIAL         reduce using rule 66 (standard_item -> integerdecl .)
    ID              reduce using rule 66 (standard_item -> integerdecl .)
    SENS_OR         reduce using rule 66 (standard_item -> integerdecl .)
    FUNCTION        reduce using rule 66 (standard_item -> integerdecl .)
    TASK            reduce using rule 66 (standard_item -> integerdecl .)
    LPAREN          reduce using rule 66 (standard_item -> integerdecl .)
    INPUT           reduce using rule 66 (standard_item -> integerdecl .)
    OUTPUT          reduce using rule 66 (standard_item -> integerdecl .)
    INOUT           reduce using rule 66 (standard_item -> integerdecl .)
    TRI             reduce using rule 66 (standard_item -> integerdecl .)
    REG             reduce using rule 66 (standard_item -> integerdecl .)
    LOGIC           reduce using rule 66 (standard_item -> integerdecl .)
    WIRE            reduce using rule 66 (standard_item -> integerdecl .)
    SIGNED          reduce using rule 66 (standard_item -> integerdecl .)
    SUPPLY0         reduce using rule 66 (standard_item -> integerdecl .)
    SUPPLY1         reduce using rule 66 (standard_item -> integerdecl .)
    ENDGENERATE     reduce using rule 66 (standard_item -> integerdecl .)
    IF              reduce using rule 66 (standard_item -> integerdecl .)
    FOR             reduce using rule 66 (standard_item -> integerdecl .)
    ELSE            reduce using rule 66 (standard_item -> integerdecl .)
    END             reduce using rule 66 (standard_item -> integerdecl .)


state 31

    (67) standard_item -> realdecl .

    ENDMODULE       reduce using rule 67 (standard_item -> realdecl .)
    GENERATE        reduce using rule 67 (standard_item -> realdecl .)
    INTEGER         reduce using rule 67 (standard_item -> realdecl .)
    REAL            reduce using rule 67 (standard_item -> realdecl .)
    PARAMETER       reduce using rule 67 (standard_item -> realdecl .)
    LOCALPARAM      reduce using rule 67 (standard_item -> realdecl .)
    GENVAR          reduce using rule 67 (standard_item -> realdecl .)
    ASSIGN          reduce using rule 67 (standard_item -> realdecl .)
    ALWAYS          reduce using rule 67 (standard_item -> realdecl .)
    ALWAYS_FF       reduce using rule 67 (standard_item -> realdecl .)
    ALWAYS_COMB     reduce using rule 67 (standard_item -> realdecl .)
    ALWAYS_LATCH    reduce using rule 67 (standard_item -> realdecl .)
    INITIAL         reduce using rule 67 (standard_item -> realdecl .)
    ID              reduce using rule 67 (standard_item -> realdecl .)
    SENS_OR         reduce using rule 67 (standard_item -> realdecl .)
    FUNCTION        reduce using rule 67 (standard_item -> realdecl .)
    TASK            reduce using rule 67 (standard_item -> realdecl .)
    LPAREN          reduce using rule 67 (standard_item -> realdecl .)
    INPUT           reduce using rule 67 (standard_item -> realdecl .)
    OUTPUT          reduce using rule 67 (standard_item -> realdecl .)
    INOUT           reduce using rule 67 (standard_item -> realdecl .)
    TRI             reduce using rule 67 (standard_item -> realdecl .)
    REG             reduce using rule 67 (standard_item -> realdecl .)
    LOGIC           reduce using rule 67 (standard_item -> realdecl .)
    WIRE            reduce using rule 67 (standard_item -> realdecl .)
    SIGNED          reduce using rule 67 (standard_item -> realdecl .)
    SUPPLY0         reduce using rule 67 (standard_item -> realdecl .)
    SUPPLY1         reduce using rule 67 (standard_item -> realdecl .)
    ENDGENERATE     reduce using rule 67 (standard_item -> realdecl .)
    IF              reduce using rule 67 (standard_item -> realdecl .)
    FOR             reduce using rule 67 (standard_item -> realdecl .)
    ELSE            reduce using rule 67 (standard_item -> realdecl .)
    END             reduce using rule 67 (standard_item -> realdecl .)


state 32

    (68) standard_item -> declassign .

    ENDMODULE       reduce using rule 68 (standard_item -> declassign .)
    GENERATE        reduce using rule 68 (standard_item -> declassign .)
    INTEGER         reduce using rule 68 (standard_item -> declassign .)
    REAL            reduce using rule 68 (standard_item -> declassign .)
    PARAMETER       reduce using rule 68 (standard_item -> declassign .)
    LOCALPARAM      reduce using rule 68 (standard_item -> declassign .)
    GENVAR          reduce using rule 68 (standard_item -> declassign .)
    ASSIGN          reduce using rule 68 (standard_item -> declassign .)
    ALWAYS          reduce using rule 68 (standard_item -> declassign .)
    ALWAYS_FF       reduce using rule 68 (standard_item -> declassign .)
    ALWAYS_COMB     reduce using rule 68 (standard_item -> declassign .)
    ALWAYS_LATCH    reduce using rule 68 (standard_item -> declassign .)
    INITIAL         reduce using rule 68 (standard_item -> declassign .)
    ID              reduce using rule 68 (standard_item -> declassign .)
    SENS_OR         reduce using rule 68 (standard_item -> declassign .)
    FUNCTION        reduce using rule 68 (standard_item -> declassign .)
    TASK            reduce using rule 68 (standard_item -> declassign .)
    LPAREN          reduce using rule 68 (standard_item -> declassign .)
    INPUT           reduce using rule 68 (standard_item -> declassign .)
    OUTPUT          reduce using rule 68 (standard_item -> declassign .)
    INOUT           reduce using rule 68 (standard_item -> declassign .)
    TRI             reduce using rule 68 (standard_item -> declassign .)
    REG             reduce using rule 68 (standard_item -> declassign .)
    LOGIC           reduce using rule 68 (standard_item -> declassign .)
    WIRE            reduce using rule 68 (standard_item -> declassign .)
    SIGNED          reduce using rule 68 (standard_item -> declassign .)
    SUPPLY0         reduce using rule 68 (standard_item -> declassign .)
    SUPPLY1         reduce using rule 68 (standard_item -> declassign .)
    ENDGENERATE     reduce using rule 68 (standard_item -> declassign .)
    IF              reduce using rule 68 (standard_item -> declassign .)
    FOR             reduce using rule 68 (standard_item -> declassign .)
    ELSE            reduce using rule 68 (standard_item -> declassign .)
    END             reduce using rule 68 (standard_item -> declassign .)


state 33

    (69) standard_item -> parameterdecl .

    ENDMODULE       reduce using rule 69 (standard_item -> parameterdecl .)
    GENERATE        reduce using rule 69 (standard_item -> parameterdecl .)
    INTEGER         reduce using rule 69 (standard_item -> parameterdecl .)
    REAL            reduce using rule 69 (standard_item -> parameterdecl .)
    PARAMETER       reduce using rule 69 (standard_item -> parameterdecl .)
    LOCALPARAM      reduce using rule 69 (standard_item -> parameterdecl .)
    GENVAR          reduce using rule 69 (standard_item -> parameterdecl .)
    ASSIGN          reduce using rule 69 (standard_item -> parameterdecl .)
    ALWAYS          reduce using rule 69 (standard_item -> parameterdecl .)
    ALWAYS_FF       reduce using rule 69 (standard_item -> parameterdecl .)
    ALWAYS_COMB     reduce using rule 69 (standard_item -> parameterdecl .)
    ALWAYS_LATCH    reduce using rule 69 (standard_item -> parameterdecl .)
    INITIAL         reduce using rule 69 (standard_item -> parameterdecl .)
    ID              reduce using rule 69 (standard_item -> parameterdecl .)
    SENS_OR         reduce using rule 69 (standard_item -> parameterdecl .)
    FUNCTION        reduce using rule 69 (standard_item -> parameterdecl .)
    TASK            reduce using rule 69 (standard_item -> parameterdecl .)
    LPAREN          reduce using rule 69 (standard_item -> parameterdecl .)
    INPUT           reduce using rule 69 (standard_item -> parameterdecl .)
    OUTPUT          reduce using rule 69 (standard_item -> parameterdecl .)
    INOUT           reduce using rule 69 (standard_item -> parameterdecl .)
    TRI             reduce using rule 69 (standard_item -> parameterdecl .)
    REG             reduce using rule 69 (standard_item -> parameterdecl .)
    LOGIC           reduce using rule 69 (standard_item -> parameterdecl .)
    WIRE            reduce using rule 69 (standard_item -> parameterdecl .)
    SIGNED          reduce using rule 69 (standard_item -> parameterdecl .)
    SUPPLY0         reduce using rule 69 (standard_item -> parameterdecl .)
    SUPPLY1         reduce using rule 69 (standard_item -> parameterdecl .)
    ENDGENERATE     reduce using rule 69 (standard_item -> parameterdecl .)
    IF              reduce using rule 69 (standard_item -> parameterdecl .)
    FOR             reduce using rule 69 (standard_item -> parameterdecl .)
    ELSE            reduce using rule 69 (standard_item -> parameterdecl .)
    END             reduce using rule 69 (standard_item -> parameterdecl .)


state 34

    (70) standard_item -> localparamdecl .

    ENDMODULE       reduce using rule 70 (standard_item -> localparamdecl .)
    GENERATE        reduce using rule 70 (standard_item -> localparamdecl .)
    INTEGER         reduce using rule 70 (standard_item -> localparamdecl .)
    REAL            reduce using rule 70 (standard_item -> localparamdecl .)
    PARAMETER       reduce using rule 70 (standard_item -> localparamdecl .)
    LOCALPARAM      reduce using rule 70 (standard_item -> localparamdecl .)
    GENVAR          reduce using rule 70 (standard_item -> localparamdecl .)
    ASSIGN          reduce using rule 70 (standard_item -> localparamdecl .)
    ALWAYS          reduce using rule 70 (standard_item -> localparamdecl .)
    ALWAYS_FF       reduce using rule 70 (standard_item -> localparamdecl .)
    ALWAYS_COMB     reduce using rule 70 (standard_item -> localparamdecl .)
    ALWAYS_LATCH    reduce using rule 70 (standard_item -> localparamdecl .)
    INITIAL         reduce using rule 70 (standard_item -> localparamdecl .)
    ID              reduce using rule 70 (standard_item -> localparamdecl .)
    SENS_OR         reduce using rule 70 (standard_item -> localparamdecl .)
    FUNCTION        reduce using rule 70 (standard_item -> localparamdecl .)
    TASK            reduce using rule 70 (standard_item -> localparamdecl .)
    LPAREN          reduce using rule 70 (standard_item -> localparamdecl .)
    INPUT           reduce using rule 70 (standard_item -> localparamdecl .)
    OUTPUT          reduce using rule 70 (standard_item -> localparamdecl .)
    INOUT           reduce using rule 70 (standard_item -> localparamdecl .)
    TRI             reduce using rule 70 (standard_item -> localparamdecl .)
    REG             reduce using rule 70 (standard_item -> localparamdecl .)
    LOGIC           reduce using rule 70 (standard_item -> localparamdecl .)
    WIRE            reduce using rule 70 (standard_item -> localparamdecl .)
    SIGNED          reduce using rule 70 (standard_item -> localparamdecl .)
    SUPPLY0         reduce using rule 70 (standard_item -> localparamdecl .)
    SUPPLY1         reduce using rule 70 (standard_item -> localparamdecl .)
    ENDGENERATE     reduce using rule 70 (standard_item -> localparamdecl .)
    IF              reduce using rule 70 (standard_item -> localparamdecl .)
    FOR             reduce using rule 70 (standard_item -> localparamdecl .)
    ELSE            reduce using rule 70 (standard_item -> localparamdecl .)
    END             reduce using rule 70 (standard_item -> localparamdecl .)


state 35

    (71) standard_item -> genvardecl .

    ENDMODULE       reduce using rule 71 (standard_item -> genvardecl .)
    GENERATE        reduce using rule 71 (standard_item -> genvardecl .)
    INTEGER         reduce using rule 71 (standard_item -> genvardecl .)
    REAL            reduce using rule 71 (standard_item -> genvardecl .)
    PARAMETER       reduce using rule 71 (standard_item -> genvardecl .)
    LOCALPARAM      reduce using rule 71 (standard_item -> genvardecl .)
    GENVAR          reduce using rule 71 (standard_item -> genvardecl .)
    ASSIGN          reduce using rule 71 (standard_item -> genvardecl .)
    ALWAYS          reduce using rule 71 (standard_item -> genvardecl .)
    ALWAYS_FF       reduce using rule 71 (standard_item -> genvardecl .)
    ALWAYS_COMB     reduce using rule 71 (standard_item -> genvardecl .)
    ALWAYS_LATCH    reduce using rule 71 (standard_item -> genvardecl .)
    INITIAL         reduce using rule 71 (standard_item -> genvardecl .)
    ID              reduce using rule 71 (standard_item -> genvardecl .)
    SENS_OR         reduce using rule 71 (standard_item -> genvardecl .)
    FUNCTION        reduce using rule 71 (standard_item -> genvardecl .)
    TASK            reduce using rule 71 (standard_item -> genvardecl .)
    LPAREN          reduce using rule 71 (standard_item -> genvardecl .)
    INPUT           reduce using rule 71 (standard_item -> genvardecl .)
    OUTPUT          reduce using rule 71 (standard_item -> genvardecl .)
    INOUT           reduce using rule 71 (standard_item -> genvardecl .)
    TRI             reduce using rule 71 (standard_item -> genvardecl .)
    REG             reduce using rule 71 (standard_item -> genvardecl .)
    LOGIC           reduce using rule 71 (standard_item -> genvardecl .)
    WIRE            reduce using rule 71 (standard_item -> genvardecl .)
    SIGNED          reduce using rule 71 (standard_item -> genvardecl .)
    SUPPLY0         reduce using rule 71 (standard_item -> genvardecl .)
    SUPPLY1         reduce using rule 71 (standard_item -> genvardecl .)
    ENDGENERATE     reduce using rule 71 (standard_item -> genvardecl .)
    IF              reduce using rule 71 (standard_item -> genvardecl .)
    FOR             reduce using rule 71 (standard_item -> genvardecl .)
    ELSE            reduce using rule 71 (standard_item -> genvardecl .)
    END             reduce using rule 71 (standard_item -> genvardecl .)


state 36

    (72) standard_item -> assignment .

    ENDMODULE       reduce using rule 72 (standard_item -> assignment .)
    GENERATE        reduce using rule 72 (standard_item -> assignment .)
    INTEGER         reduce using rule 72 (standard_item -> assignment .)
    REAL            reduce using rule 72 (standard_item -> assignment .)
    PARAMETER       reduce using rule 72 (standard_item -> assignment .)
    LOCALPARAM      reduce using rule 72 (standard_item -> assignment .)
    GENVAR          reduce using rule 72 (standard_item -> assignment .)
    ASSIGN          reduce using rule 72 (standard_item -> assignment .)
    ALWAYS          reduce using rule 72 (standard_item -> assignment .)
    ALWAYS_FF       reduce using rule 72 (standard_item -> assignment .)
    ALWAYS_COMB     reduce using rule 72 (standard_item -> assignment .)
    ALWAYS_LATCH    reduce using rule 72 (standard_item -> assignment .)
    INITIAL         reduce using rule 72 (standard_item -> assignment .)
    ID              reduce using rule 72 (standard_item -> assignment .)
    SENS_OR         reduce using rule 72 (standard_item -> assignment .)
    FUNCTION        reduce using rule 72 (standard_item -> assignment .)
    TASK            reduce using rule 72 (standard_item -> assignment .)
    LPAREN          reduce using rule 72 (standard_item -> assignment .)
    INPUT           reduce using rule 72 (standard_item -> assignment .)
    OUTPUT          reduce using rule 72 (standard_item -> assignment .)
    INOUT           reduce using rule 72 (standard_item -> assignment .)
    TRI             reduce using rule 72 (standard_item -> assignment .)
    REG             reduce using rule 72 (standard_item -> assignment .)
    LOGIC           reduce using rule 72 (standard_item -> assignment .)
    WIRE            reduce using rule 72 (standard_item -> assignment .)
    SIGNED          reduce using rule 72 (standard_item -> assignment .)
    SUPPLY0         reduce using rule 72 (standard_item -> assignment .)
    SUPPLY1         reduce using rule 72 (standard_item -> assignment .)
    ENDGENERATE     reduce using rule 72 (standard_item -> assignment .)
    IF              reduce using rule 72 (standard_item -> assignment .)
    FOR             reduce using rule 72 (standard_item -> assignment .)
    ELSE            reduce using rule 72 (standard_item -> assignment .)
    END             reduce using rule 72 (standard_item -> assignment .)


state 37

    (73) standard_item -> always .

    ENDMODULE       reduce using rule 73 (standard_item -> always .)
    GENERATE        reduce using rule 73 (standard_item -> always .)
    INTEGER         reduce using rule 73 (standard_item -> always .)
    REAL            reduce using rule 73 (standard_item -> always .)
    PARAMETER       reduce using rule 73 (standard_item -> always .)
    LOCALPARAM      reduce using rule 73 (standard_item -> always .)
    GENVAR          reduce using rule 73 (standard_item -> always .)
    ASSIGN          reduce using rule 73 (standard_item -> always .)
    ALWAYS          reduce using rule 73 (standard_item -> always .)
    ALWAYS_FF       reduce using rule 73 (standard_item -> always .)
    ALWAYS_COMB     reduce using rule 73 (standard_item -> always .)
    ALWAYS_LATCH    reduce using rule 73 (standard_item -> always .)
    INITIAL         reduce using rule 73 (standard_item -> always .)
    ID              reduce using rule 73 (standard_item -> always .)
    SENS_OR         reduce using rule 73 (standard_item -> always .)
    FUNCTION        reduce using rule 73 (standard_item -> always .)
    TASK            reduce using rule 73 (standard_item -> always .)
    LPAREN          reduce using rule 73 (standard_item -> always .)
    INPUT           reduce using rule 73 (standard_item -> always .)
    OUTPUT          reduce using rule 73 (standard_item -> always .)
    INOUT           reduce using rule 73 (standard_item -> always .)
    TRI             reduce using rule 73 (standard_item -> always .)
    REG             reduce using rule 73 (standard_item -> always .)
    LOGIC           reduce using rule 73 (standard_item -> always .)
    WIRE            reduce using rule 73 (standard_item -> always .)
    SIGNED          reduce using rule 73 (standard_item -> always .)
    SUPPLY0         reduce using rule 73 (standard_item -> always .)
    SUPPLY1         reduce using rule 73 (standard_item -> always .)
    ENDGENERATE     reduce using rule 73 (standard_item -> always .)
    IF              reduce using rule 73 (standard_item -> always .)
    FOR             reduce using rule 73 (standard_item -> always .)
    ELSE            reduce using rule 73 (standard_item -> always .)
    END             reduce using rule 73 (standard_item -> always .)


state 38

    (74) standard_item -> always_ff .

    ENDMODULE       reduce using rule 74 (standard_item -> always_ff .)
    GENERATE        reduce using rule 74 (standard_item -> always_ff .)
    INTEGER         reduce using rule 74 (standard_item -> always_ff .)
    REAL            reduce using rule 74 (standard_item -> always_ff .)
    PARAMETER       reduce using rule 74 (standard_item -> always_ff .)
    LOCALPARAM      reduce using rule 74 (standard_item -> always_ff .)
    GENVAR          reduce using rule 74 (standard_item -> always_ff .)
    ASSIGN          reduce using rule 74 (standard_item -> always_ff .)
    ALWAYS          reduce using rule 74 (standard_item -> always_ff .)
    ALWAYS_FF       reduce using rule 74 (standard_item -> always_ff .)
    ALWAYS_COMB     reduce using rule 74 (standard_item -> always_ff .)
    ALWAYS_LATCH    reduce using rule 74 (standard_item -> always_ff .)
    INITIAL         reduce using rule 74 (standard_item -> always_ff .)
    ID              reduce using rule 74 (standard_item -> always_ff .)
    SENS_OR         reduce using rule 74 (standard_item -> always_ff .)
    FUNCTION        reduce using rule 74 (standard_item -> always_ff .)
    TASK            reduce using rule 74 (standard_item -> always_ff .)
    LPAREN          reduce using rule 74 (standard_item -> always_ff .)
    INPUT           reduce using rule 74 (standard_item -> always_ff .)
    OUTPUT          reduce using rule 74 (standard_item -> always_ff .)
    INOUT           reduce using rule 74 (standard_item -> always_ff .)
    TRI             reduce using rule 74 (standard_item -> always_ff .)
    REG             reduce using rule 74 (standard_item -> always_ff .)
    LOGIC           reduce using rule 74 (standard_item -> always_ff .)
    WIRE            reduce using rule 74 (standard_item -> always_ff .)
    SIGNED          reduce using rule 74 (standard_item -> always_ff .)
    SUPPLY0         reduce using rule 74 (standard_item -> always_ff .)
    SUPPLY1         reduce using rule 74 (standard_item -> always_ff .)
    ENDGENERATE     reduce using rule 74 (standard_item -> always_ff .)
    IF              reduce using rule 74 (standard_item -> always_ff .)
    FOR             reduce using rule 74 (standard_item -> always_ff .)
    ELSE            reduce using rule 74 (standard_item -> always_ff .)
    END             reduce using rule 74 (standard_item -> always_ff .)


state 39

    (75) standard_item -> always_comb .

    ENDMODULE       reduce using rule 75 (standard_item -> always_comb .)
    GENERATE        reduce using rule 75 (standard_item -> always_comb .)
    INTEGER         reduce using rule 75 (standard_item -> always_comb .)
    REAL            reduce using rule 75 (standard_item -> always_comb .)
    PARAMETER       reduce using rule 75 (standard_item -> always_comb .)
    LOCALPARAM      reduce using rule 75 (standard_item -> always_comb .)
    GENVAR          reduce using rule 75 (standard_item -> always_comb .)
    ASSIGN          reduce using rule 75 (standard_item -> always_comb .)
    ALWAYS          reduce using rule 75 (standard_item -> always_comb .)
    ALWAYS_FF       reduce using rule 75 (standard_item -> always_comb .)
    ALWAYS_COMB     reduce using rule 75 (standard_item -> always_comb .)
    ALWAYS_LATCH    reduce using rule 75 (standard_item -> always_comb .)
    INITIAL         reduce using rule 75 (standard_item -> always_comb .)
    ID              reduce using rule 75 (standard_item -> always_comb .)
    SENS_OR         reduce using rule 75 (standard_item -> always_comb .)
    FUNCTION        reduce using rule 75 (standard_item -> always_comb .)
    TASK            reduce using rule 75 (standard_item -> always_comb .)
    LPAREN          reduce using rule 75 (standard_item -> always_comb .)
    INPUT           reduce using rule 75 (standard_item -> always_comb .)
    OUTPUT          reduce using rule 75 (standard_item -> always_comb .)
    INOUT           reduce using rule 75 (standard_item -> always_comb .)
    TRI             reduce using rule 75 (standard_item -> always_comb .)
    REG             reduce using rule 75 (standard_item -> always_comb .)
    LOGIC           reduce using rule 75 (standard_item -> always_comb .)
    WIRE            reduce using rule 75 (standard_item -> always_comb .)
    SIGNED          reduce using rule 75 (standard_item -> always_comb .)
    SUPPLY0         reduce using rule 75 (standard_item -> always_comb .)
    SUPPLY1         reduce using rule 75 (standard_item -> always_comb .)
    ENDGENERATE     reduce using rule 75 (standard_item -> always_comb .)
    IF              reduce using rule 75 (standard_item -> always_comb .)
    FOR             reduce using rule 75 (standard_item -> always_comb .)
    ELSE            reduce using rule 75 (standard_item -> always_comb .)
    END             reduce using rule 75 (standard_item -> always_comb .)


state 40

    (76) standard_item -> always_latch .

    ENDMODULE       reduce using rule 76 (standard_item -> always_latch .)
    GENERATE        reduce using rule 76 (standard_item -> always_latch .)
    INTEGER         reduce using rule 76 (standard_item -> always_latch .)
    REAL            reduce using rule 76 (standard_item -> always_latch .)
    PARAMETER       reduce using rule 76 (standard_item -> always_latch .)
    LOCALPARAM      reduce using rule 76 (standard_item -> always_latch .)
    GENVAR          reduce using rule 76 (standard_item -> always_latch .)
    ASSIGN          reduce using rule 76 (standard_item -> always_latch .)
    ALWAYS          reduce using rule 76 (standard_item -> always_latch .)
    ALWAYS_FF       reduce using rule 76 (standard_item -> always_latch .)
    ALWAYS_COMB     reduce using rule 76 (standard_item -> always_latch .)
    ALWAYS_LATCH    reduce using rule 76 (standard_item -> always_latch .)
    INITIAL         reduce using rule 76 (standard_item -> always_latch .)
    ID              reduce using rule 76 (standard_item -> always_latch .)
    SENS_OR         reduce using rule 76 (standard_item -> always_latch .)
    FUNCTION        reduce using rule 76 (standard_item -> always_latch .)
    TASK            reduce using rule 76 (standard_item -> always_latch .)
    LPAREN          reduce using rule 76 (standard_item -> always_latch .)
    INPUT           reduce using rule 76 (standard_item -> always_latch .)
    OUTPUT          reduce using rule 76 (standard_item -> always_latch .)
    INOUT           reduce using rule 76 (standard_item -> always_latch .)
    TRI             reduce using rule 76 (standard_item -> always_latch .)
    REG             reduce using rule 76 (standard_item -> always_latch .)
    LOGIC           reduce using rule 76 (standard_item -> always_latch .)
    WIRE            reduce using rule 76 (standard_item -> always_latch .)
    SIGNED          reduce using rule 76 (standard_item -> always_latch .)
    SUPPLY0         reduce using rule 76 (standard_item -> always_latch .)
    SUPPLY1         reduce using rule 76 (standard_item -> always_latch .)
    ENDGENERATE     reduce using rule 76 (standard_item -> always_latch .)
    IF              reduce using rule 76 (standard_item -> always_latch .)
    FOR             reduce using rule 76 (standard_item -> always_latch .)
    ELSE            reduce using rule 76 (standard_item -> always_latch .)
    END             reduce using rule 76 (standard_item -> always_latch .)


state 41

    (77) standard_item -> initial .

    ENDMODULE       reduce using rule 77 (standard_item -> initial .)
    GENERATE        reduce using rule 77 (standard_item -> initial .)
    INTEGER         reduce using rule 77 (standard_item -> initial .)
    REAL            reduce using rule 77 (standard_item -> initial .)
    PARAMETER       reduce using rule 77 (standard_item -> initial .)
    LOCALPARAM      reduce using rule 77 (standard_item -> initial .)
    GENVAR          reduce using rule 77 (standard_item -> initial .)
    ASSIGN          reduce using rule 77 (standard_item -> initial .)
    ALWAYS          reduce using rule 77 (standard_item -> initial .)
    ALWAYS_FF       reduce using rule 77 (standard_item -> initial .)
    ALWAYS_COMB     reduce using rule 77 (standard_item -> initial .)
    ALWAYS_LATCH    reduce using rule 77 (standard_item -> initial .)
    INITIAL         reduce using rule 77 (standard_item -> initial .)
    ID              reduce using rule 77 (standard_item -> initial .)
    SENS_OR         reduce using rule 77 (standard_item -> initial .)
    FUNCTION        reduce using rule 77 (standard_item -> initial .)
    TASK            reduce using rule 77 (standard_item -> initial .)
    LPAREN          reduce using rule 77 (standard_item -> initial .)
    INPUT           reduce using rule 77 (standard_item -> initial .)
    OUTPUT          reduce using rule 77 (standard_item -> initial .)
    INOUT           reduce using rule 77 (standard_item -> initial .)
    TRI             reduce using rule 77 (standard_item -> initial .)
    REG             reduce using rule 77 (standard_item -> initial .)
    LOGIC           reduce using rule 77 (standard_item -> initial .)
    WIRE            reduce using rule 77 (standard_item -> initial .)
    SIGNED          reduce using rule 77 (standard_item -> initial .)
    SUPPLY0         reduce using rule 77 (standard_item -> initial .)
    SUPPLY1         reduce using rule 77 (standard_item -> initial .)
    ENDGENERATE     reduce using rule 77 (standard_item -> initial .)
    IF              reduce using rule 77 (standard_item -> initial .)
    FOR             reduce using rule 77 (standard_item -> initial .)
    ELSE            reduce using rule 77 (standard_item -> initial .)
    END             reduce using rule 77 (standard_item -> initial .)


state 42

    (78) standard_item -> instance .

    ENDMODULE       reduce using rule 78 (standard_item -> instance .)
    GENERATE        reduce using rule 78 (standard_item -> instance .)
    INTEGER         reduce using rule 78 (standard_item -> instance .)
    REAL            reduce using rule 78 (standard_item -> instance .)
    PARAMETER       reduce using rule 78 (standard_item -> instance .)
    LOCALPARAM      reduce using rule 78 (standard_item -> instance .)
    GENVAR          reduce using rule 78 (standard_item -> instance .)
    ASSIGN          reduce using rule 78 (standard_item -> instance .)
    ALWAYS          reduce using rule 78 (standard_item -> instance .)
    ALWAYS_FF       reduce using rule 78 (standard_item -> instance .)
    ALWAYS_COMB     reduce using rule 78 (standard_item -> instance .)
    ALWAYS_LATCH    reduce using rule 78 (standard_item -> instance .)
    INITIAL         reduce using rule 78 (standard_item -> instance .)
    ID              reduce using rule 78 (standard_item -> instance .)
    SENS_OR         reduce using rule 78 (standard_item -> instance .)
    FUNCTION        reduce using rule 78 (standard_item -> instance .)
    TASK            reduce using rule 78 (standard_item -> instance .)
    LPAREN          reduce using rule 78 (standard_item -> instance .)
    INPUT           reduce using rule 78 (standard_item -> instance .)
    OUTPUT          reduce using rule 78 (standard_item -> instance .)
    INOUT           reduce using rule 78 (standard_item -> instance .)
    TRI             reduce using rule 78 (standard_item -> instance .)
    REG             reduce using rule 78 (standard_item -> instance .)
    LOGIC           reduce using rule 78 (standard_item -> instance .)
    WIRE            reduce using rule 78 (standard_item -> instance .)
    SIGNED          reduce using rule 78 (standard_item -> instance .)
    SUPPLY0         reduce using rule 78 (standard_item -> instance .)
    SUPPLY1         reduce using rule 78 (standard_item -> instance .)
    ENDGENERATE     reduce using rule 78 (standard_item -> instance .)
    IF              reduce using rule 78 (standard_item -> instance .)
    FOR             reduce using rule 78 (standard_item -> instance .)
    ELSE            reduce using rule 78 (standard_item -> instance .)
    END             reduce using rule 78 (standard_item -> instance .)


state 43

    (79) standard_item -> function .

    ENDMODULE       reduce using rule 79 (standard_item -> function .)
    GENERATE        reduce using rule 79 (standard_item -> function .)
    INTEGER         reduce using rule 79 (standard_item -> function .)
    REAL            reduce using rule 79 (standard_item -> function .)
    PARAMETER       reduce using rule 79 (standard_item -> function .)
    LOCALPARAM      reduce using rule 79 (standard_item -> function .)
    GENVAR          reduce using rule 79 (standard_item -> function .)
    ASSIGN          reduce using rule 79 (standard_item -> function .)
    ALWAYS          reduce using rule 79 (standard_item -> function .)
    ALWAYS_FF       reduce using rule 79 (standard_item -> function .)
    ALWAYS_COMB     reduce using rule 79 (standard_item -> function .)
    ALWAYS_LATCH    reduce using rule 79 (standard_item -> function .)
    INITIAL         reduce using rule 79 (standard_item -> function .)
    ID              reduce using rule 79 (standard_item -> function .)
    SENS_OR         reduce using rule 79 (standard_item -> function .)
    FUNCTION        reduce using rule 79 (standard_item -> function .)
    TASK            reduce using rule 79 (standard_item -> function .)
    LPAREN          reduce using rule 79 (standard_item -> function .)
    INPUT           reduce using rule 79 (standard_item -> function .)
    OUTPUT          reduce using rule 79 (standard_item -> function .)
    INOUT           reduce using rule 79 (standard_item -> function .)
    TRI             reduce using rule 79 (standard_item -> function .)
    REG             reduce using rule 79 (standard_item -> function .)
    LOGIC           reduce using rule 79 (standard_item -> function .)
    WIRE            reduce using rule 79 (standard_item -> function .)
    SIGNED          reduce using rule 79 (standard_item -> function .)
    SUPPLY0         reduce using rule 79 (standard_item -> function .)
    SUPPLY1         reduce using rule 79 (standard_item -> function .)
    ENDGENERATE     reduce using rule 79 (standard_item -> function .)
    IF              reduce using rule 79 (standard_item -> function .)
    FOR             reduce using rule 79 (standard_item -> function .)
    ELSE            reduce using rule 79 (standard_item -> function .)
    END             reduce using rule 79 (standard_item -> function .)


state 44

    (80) standard_item -> task .

    ENDMODULE       reduce using rule 80 (standard_item -> task .)
    GENERATE        reduce using rule 80 (standard_item -> task .)
    INTEGER         reduce using rule 80 (standard_item -> task .)
    REAL            reduce using rule 80 (standard_item -> task .)
    PARAMETER       reduce using rule 80 (standard_item -> task .)
    LOCALPARAM      reduce using rule 80 (standard_item -> task .)
    GENVAR          reduce using rule 80 (standard_item -> task .)
    ASSIGN          reduce using rule 80 (standard_item -> task .)
    ALWAYS          reduce using rule 80 (standard_item -> task .)
    ALWAYS_FF       reduce using rule 80 (standard_item -> task .)
    ALWAYS_COMB     reduce using rule 80 (standard_item -> task .)
    ALWAYS_LATCH    reduce using rule 80 (standard_item -> task .)
    INITIAL         reduce using rule 80 (standard_item -> task .)
    ID              reduce using rule 80 (standard_item -> task .)
    SENS_OR         reduce using rule 80 (standard_item -> task .)
    FUNCTION        reduce using rule 80 (standard_item -> task .)
    TASK            reduce using rule 80 (standard_item -> task .)
    LPAREN          reduce using rule 80 (standard_item -> task .)
    INPUT           reduce using rule 80 (standard_item -> task .)
    OUTPUT          reduce using rule 80 (standard_item -> task .)
    INOUT           reduce using rule 80 (standard_item -> task .)
    TRI             reduce using rule 80 (standard_item -> task .)
    REG             reduce using rule 80 (standard_item -> task .)
    LOGIC           reduce using rule 80 (standard_item -> task .)
    WIRE            reduce using rule 80 (standard_item -> task .)
    SIGNED          reduce using rule 80 (standard_item -> task .)
    SUPPLY0         reduce using rule 80 (standard_item -> task .)
    SUPPLY1         reduce using rule 80 (standard_item -> task .)
    ENDGENERATE     reduce using rule 80 (standard_item -> task .)
    IF              reduce using rule 80 (standard_item -> task .)
    FOR             reduce using rule 80 (standard_item -> task .)
    ELSE            reduce using rule 80 (standard_item -> task .)
    END             reduce using rule 80 (standard_item -> task .)


state 45

    (81) standard_item -> pragma .

    ENDMODULE       reduce using rule 81 (standard_item -> pragma .)
    GENERATE        reduce using rule 81 (standard_item -> pragma .)
    INTEGER         reduce using rule 81 (standard_item -> pragma .)
    REAL            reduce using rule 81 (standard_item -> pragma .)
    PARAMETER       reduce using rule 81 (standard_item -> pragma .)
    LOCALPARAM      reduce using rule 81 (standard_item -> pragma .)
    GENVAR          reduce using rule 81 (standard_item -> pragma .)
    ASSIGN          reduce using rule 81 (standard_item -> pragma .)
    ALWAYS          reduce using rule 81 (standard_item -> pragma .)
    ALWAYS_FF       reduce using rule 81 (standard_item -> pragma .)
    ALWAYS_COMB     reduce using rule 81 (standard_item -> pragma .)
    ALWAYS_LATCH    reduce using rule 81 (standard_item -> pragma .)
    INITIAL         reduce using rule 81 (standard_item -> pragma .)
    ID              reduce using rule 81 (standard_item -> pragma .)
    SENS_OR         reduce using rule 81 (standard_item -> pragma .)
    FUNCTION        reduce using rule 81 (standard_item -> pragma .)
    TASK            reduce using rule 81 (standard_item -> pragma .)
    LPAREN          reduce using rule 81 (standard_item -> pragma .)
    INPUT           reduce using rule 81 (standard_item -> pragma .)
    OUTPUT          reduce using rule 81 (standard_item -> pragma .)
    INOUT           reduce using rule 81 (standard_item -> pragma .)
    TRI             reduce using rule 81 (standard_item -> pragma .)
    REG             reduce using rule 81 (standard_item -> pragma .)
    LOGIC           reduce using rule 81 (standard_item -> pragma .)
    WIRE            reduce using rule 81 (standard_item -> pragma .)
    SIGNED          reduce using rule 81 (standard_item -> pragma .)
    SUPPLY0         reduce using rule 81 (standard_item -> pragma .)
    SUPPLY1         reduce using rule 81 (standard_item -> pragma .)
    ENDGENERATE     reduce using rule 81 (standard_item -> pragma .)
    IF              reduce using rule 81 (standard_item -> pragma .)
    FOR             reduce using rule 81 (standard_item -> pragma .)
    ELSE            reduce using rule 81 (standard_item -> pragma .)
    END             reduce using rule 81 (standard_item -> pragma .)


state 46

    (343) generate -> GENERATE . generate_items ENDGENERATE
    (344) generate_items -> . empty
    (345) generate_items -> . generate_items generate_item
    (346) generate_items -> . generate_item
    (413) empty -> .
    (347) generate_item -> . standard_item
    (348) generate_item -> . generate_if
    (349) generate_item -> . generate_for
    (65) standard_item -> . decl
    (66) standard_item -> . integerdecl
    (67) standard_item -> . realdecl
    (68) standard_item -> . declassign
    (69) standard_item -> . parameterdecl
    (70) standard_item -> . localparamdecl
    (71) standard_item -> . genvardecl
    (72) standard_item -> . assignment
    (73) standard_item -> . always
    (74) standard_item -> . always_ff
    (75) standard_item -> . always_comb
    (76) standard_item -> . always_latch
    (77) standard_item -> . initial
    (78) standard_item -> . instance
    (79) standard_item -> . function
    (80) standard_item -> . task
    (81) standard_item -> . pragma
    (352) generate_if -> . IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (353) generate_if -> . IF LPAREN cond RPAREN gif_true_item
    (358) generate_for -> . FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
    (82) decl -> . sigtypes declnamelist SEMICOLON
    (83) decl -> . sigtypes width declnamelist SEMICOLON
    (92) integerdecl -> . INTEGER integernamelist SEMICOLON
    (93) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (98) realdecl -> . REAL realnamelist SEMICOLON
    (88) declassign -> . sigtypes declassign_element SEMICOLON
    (89) declassign -> . sigtypes width declassign_element SEMICOLON
    (102) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (103) parameterdecl -> . PARAMETER SIGNED param_substitution_list SEMICOLON
    (104) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (105) parameterdecl -> . PARAMETER SIGNED width param_substitution_list SEMICOLON
    (106) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (107) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (108) localparamdecl -> . LOCALPARAM SIGNED param_substitution_list SEMICOLON
    (109) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (110) localparamdecl -> . LOCALPARAM SIGNED width param_substitution_list SEMICOLON
    (111) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (339) genvardecl -> . GENVAR genvarlist SEMICOLON
    (115) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (116) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (205) always -> . ALWAYS senslist always_statement
    (206) always_ff -> . ALWAYS_FF senslist always_statement
    (207) always_comb -> . ALWAYS_COMB senslist always_statement
    (208) always_latch -> . ALWAYS_LATCH senslist always_statement
    (300) initial -> . INITIAL initial_statement
    (307) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (308) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (313) instance -> . ID instance_bodylist_noname SEMICOLON
    (314) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (368) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (369) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (370) function -> . FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION
    (389) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
  ! shift/reduce conflict for PARAMETER resolved as shift
  ! shift/reduce conflict for LOCALPARAM resolved as shift
  ! shift/reduce conflict for GENVAR resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for ALWAYS resolved as shift
  ! shift/reduce conflict for ALWAYS_FF resolved as shift
  ! shift/reduce conflict for ALWAYS_COMB resolved as shift
  ! shift/reduce conflict for ALWAYS_LATCH resolved as shift
  ! shift/reduce conflict for INITIAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for SENS_OR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for TASK resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for INOUT resolved as shift
  ! shift/reduce conflict for TRI resolved as shift
  ! shift/reduce conflict for REG resolved as shift
  ! shift/reduce conflict for LOGIC resolved as shift
  ! shift/reduce conflict for WIRE resolved as shift
  ! shift/reduce conflict for SIGNED resolved as shift
  ! shift/reduce conflict for SUPPLY0 resolved as shift
  ! shift/reduce conflict for SUPPLY1 resolved as shift
    ENDGENERATE     reduce using rule 413 (empty -> .)
    IF              shift and go to state 132
    FOR             shift and go to state 133
    INTEGER         shift and go to state 48
    REAL            shift and go to state 50
    PARAMETER       shift and go to state 51
    LOCALPARAM      shift and go to state 52
    GENVAR          shift and go to state 53
    ASSIGN          shift and go to state 54
    ALWAYS          shift and go to state 55
    ALWAYS_FF       shift and go to state 56
    ALWAYS_COMB     shift and go to state 57
    ALWAYS_LATCH    shift and go to state 58
    INITIAL         shift and go to state 59
    ID              shift and go to state 60
    SENS_OR         shift and go to state 61
    FUNCTION        shift and go to state 62
    TASK            shift and go to state 63
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 65
    OUTPUT          shift and go to state 66
    INOUT           shift and go to state 67
    TRI             shift and go to state 68
    REG             shift and go to state 69
    LOGIC           shift and go to state 70
    WIRE            shift and go to state 71
    SIGNED          shift and go to state 49
    SUPPLY0         shift and go to state 72
    SUPPLY1         shift and go to state 73

  ! IF              [ reduce using rule 413 (empty -> .) ]
  ! FOR             [ reduce using rule 413 (empty -> .) ]
  ! INTEGER         [ reduce using rule 413 (empty -> .) ]
  ! REAL            [ reduce using rule 413 (empty -> .) ]
  ! PARAMETER       [ reduce using rule 413 (empty -> .) ]
  ! LOCALPARAM      [ reduce using rule 413 (empty -> .) ]
  ! GENVAR          [ reduce using rule 413 (empty -> .) ]
  ! ASSIGN          [ reduce using rule 413 (empty -> .) ]
  ! ALWAYS          [ reduce using rule 413 (empty -> .) ]
  ! ALWAYS_FF       [ reduce using rule 413 (empty -> .) ]
  ! ALWAYS_COMB     [ reduce using rule 413 (empty -> .) ]
  ! ALWAYS_LATCH    [ reduce using rule 413 (empty -> .) ]
  ! INITIAL         [ reduce using rule 413 (empty -> .) ]
  ! ID              [ reduce using rule 413 (empty -> .) ]
  ! SENS_OR         [ reduce using rule 413 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 413 (empty -> .) ]
  ! TASK            [ reduce using rule 413 (empty -> .) ]
  ! LPAREN          [ reduce using rule 413 (empty -> .) ]
  ! INPUT           [ reduce using rule 413 (empty -> .) ]
  ! OUTPUT          [ reduce using rule 413 (empty -> .) ]
  ! INOUT           [ reduce using rule 413 (empty -> .) ]
  ! TRI             [ reduce using rule 413 (empty -> .) ]
  ! REG             [ reduce using rule 413 (empty -> .) ]
  ! LOGIC           [ reduce using rule 413 (empty -> .) ]
  ! WIRE            [ reduce using rule 413 (empty -> .) ]
  ! SIGNED          [ reduce using rule 413 (empty -> .) ]
  ! SUPPLY0         [ reduce using rule 413 (empty -> .) ]
  ! SUPPLY1         [ reduce using rule 413 (empty -> .) ]

    generate_items                 shift and go to state 126
    empty                          shift and go to state 127
    generate_item                  shift and go to state 128
    standard_item                  shift and go to state 129
    generate_if                    shift and go to state 130
    generate_for                   shift and go to state 131
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    always_ff                      shift and go to state 38
    always_comb                    shift and go to state 39
    always_latch                   shift and go to state 40
    initial                        shift and go to state 41
    instance                       shift and go to state 42
    function                       shift and go to state 43
    task                           shift and go to state 44
    pragma                         shift and go to state 45
    sigtypes                       shift and go to state 47
    sigtype                        shift and go to state 64

state 47

    (82) decl -> sigtypes . declnamelist SEMICOLON
    (83) decl -> sigtypes . width declnamelist SEMICOLON
    (88) declassign -> sigtypes . declassign_element SEMICOLON
    (89) declassign -> sigtypes . width declassign_element SEMICOLON
    (35) sigtypes -> sigtypes . sigtype
    (84) declnamelist -> . declnamelist COMMA declname
    (85) declnamelist -> . declname
    (56) width -> . LBRACKET expression COLON expression RBRACKET
    (90) declassign_element -> . ID EQUALS rvalue
    (91) declassign_element -> . delays ID EQUALS delays rvalue
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1
    (86) declname -> . ID
    (87) declname -> . ID dimensions
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (413) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    LBRACKET        shift and go to state 139
    ID              shift and go to state 140
    INPUT           shift and go to state 65
    OUTPUT          shift and go to state 66
    INOUT           shift and go to state 67
    TRI             shift and go to state 68
    REG             shift and go to state 69
    LOGIC           shift and go to state 70
    WIRE            shift and go to state 71
    SIGNED          shift and go to state 49
    SUPPLY0         shift and go to state 72
    SUPPLY1         shift and go to state 73
    DELAY           shift and go to state 142

  ! ID              [ reduce using rule 413 (empty -> .) ]

    declnamelist                   shift and go to state 134
    width                          shift and go to state 135
    declassign_element             shift and go to state 136
    sigtype                        shift and go to state 137
    declname                       shift and go to state 138
    delays                         shift and go to state 141
    empty                          shift and go to state 143

state 48

    (92) integerdecl -> INTEGER . integernamelist SEMICOLON
    (93) integerdecl -> INTEGER . SIGNED integernamelist SEMICOLON
    (94) integernamelist -> . integernamelist COMMA integername
    (95) integernamelist -> . integername
    (96) integername -> . ID EQUALS rvalue
    (97) integername -> . ID

    SIGNED          shift and go to state 145
    ID              shift and go to state 147

    integernamelist                shift and go to state 144
    integername                    shift and go to state 146

state 49

    (44) sigtype -> SIGNED .

    LBRACKET        reduce using rule 44 (sigtype -> SIGNED .)
    ID              reduce using rule 44 (sigtype -> SIGNED .)
    INPUT           reduce using rule 44 (sigtype -> SIGNED .)
    OUTPUT          reduce using rule 44 (sigtype -> SIGNED .)
    INOUT           reduce using rule 44 (sigtype -> SIGNED .)
    TRI             reduce using rule 44 (sigtype -> SIGNED .)
    REG             reduce using rule 44 (sigtype -> SIGNED .)
    LOGIC           reduce using rule 44 (sigtype -> SIGNED .)
    WIRE            reduce using rule 44 (sigtype -> SIGNED .)
    SIGNED          reduce using rule 44 (sigtype -> SIGNED .)
    SUPPLY0         reduce using rule 44 (sigtype -> SIGNED .)
    SUPPLY1         reduce using rule 44 (sigtype -> SIGNED .)
    DELAY           reduce using rule 44 (sigtype -> SIGNED .)


state 50

    (98) realdecl -> REAL . realnamelist SEMICOLON
    (99) realnamelist -> . realnamelist COMMA realname
    (100) realnamelist -> . realname
    (101) realname -> . ID

    ID              shift and go to state 150

    realnamelist                   shift and go to state 148
    realname                       shift and go to state 149

state 51

    (102) parameterdecl -> PARAMETER . param_substitution_list SEMICOLON
    (103) parameterdecl -> PARAMETER . SIGNED param_substitution_list SEMICOLON
    (104) parameterdecl -> PARAMETER . width param_substitution_list SEMICOLON
    (105) parameterdecl -> PARAMETER . SIGNED width param_substitution_list SEMICOLON
    (106) parameterdecl -> PARAMETER . INTEGER param_substitution_list SEMICOLON
    (112) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (113) param_substitution_list -> . param_substitution
    (56) width -> . LBRACKET expression COLON expression RBRACKET
    (114) param_substitution -> . ID EQUALS rvalue

    SIGNED          shift and go to state 152
    INTEGER         shift and go to state 154
    LBRACKET        shift and go to state 139
    ID              shift and go to state 156

    param_substitution_list        shift and go to state 151
    width                          shift and go to state 153
    param_substitution             shift and go to state 155

state 52

    (107) localparamdecl -> LOCALPARAM . param_substitution_list SEMICOLON
    (108) localparamdecl -> LOCALPARAM . SIGNED param_substitution_list SEMICOLON
    (109) localparamdecl -> LOCALPARAM . width param_substitution_list SEMICOLON
    (110) localparamdecl -> LOCALPARAM . SIGNED width param_substitution_list SEMICOLON
    (111) localparamdecl -> LOCALPARAM . INTEGER param_substitution_list SEMICOLON
    (112) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (113) param_substitution_list -> . param_substitution
    (56) width -> . LBRACKET expression COLON expression RBRACKET
    (114) param_substitution -> . ID EQUALS rvalue

    SIGNED          shift and go to state 158
    INTEGER         shift and go to state 160
    LBRACKET        shift and go to state 139
    ID              shift and go to state 156

    param_substitution_list        shift and go to state 157
    width                          shift and go to state 159
    param_substitution             shift and go to state 155

state 53

    (339) genvardecl -> GENVAR . genvarlist SEMICOLON
    (340) genvarlist -> . genvarlist COMMA genvar
    (341) genvarlist -> . genvar
    (342) genvar -> . ID

    ID              shift and go to state 163

    genvarlist                     shift and go to state 161
    genvar                         shift and go to state 162

state 54

    (115) assignment -> ASSIGN . lvalue EQUALS rvalue SEMICOLON
    (116) assignment -> ASSIGN . delays lvalue EQUALS delays rvalue SEMICOLON
    (131) lvalue -> . lpartselect
    (132) lvalue -> . lpointer
    (133) lvalue -> . lconcat
    (134) lvalue -> . identifier
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (117) lpartselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (118) lpartselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (119) lpartselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (120) lpartselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (121) lpartselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (122) lpartselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (123) lpointer -> . pointer
    (124) lconcat -> . LBRACE lconcatlist RBRACE
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (413) empty -> .
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    DELAY           shift and go to state 142
    LBRACE          shift and go to state 171
    ID              shift and go to state 88

  ! LBRACE          [ reduce using rule 413 (empty -> .) ]
  ! ID              [ reduce using rule 413 (empty -> .) ]

    lvalue                         shift and go to state 164
    delays                         shift and go to state 165
    lpartselect                    shift and go to state 166
    lpointer                       shift and go to state 167
    lconcat                        shift and go to state 168
    identifier                     shift and go to state 169
    empty                          shift and go to state 143
    pointer                        shift and go to state 170
    scope                          shift and go to state 110

state 55

    (205) always -> ALWAYS . senslist always_statement
    (209) senslist -> . AT LPAREN edgesigs RPAREN
    (217) senslist -> . empty
    (218) senslist -> . AT levelsig
    (219) senslist -> . AT LPAREN levelsigs RPAREN
    (227) senslist -> . AT TIMES
    (228) senslist -> . AT LPAREN TIMES RPAREN
    (413) empty -> .

  ! shift/reduce conflict for AT resolved as shift
    AT              shift and go to state 173
    IF              reduce using rule 413 (empty -> .)
    CASE            reduce using rule 413 (empty -> .)
    CASEX           reduce using rule 413 (empty -> .)
    CASEZ           reduce using rule 413 (empty -> .)
    UNIQUE          reduce using rule 413 (empty -> .)
    FOR             reduce using rule 413 (empty -> .)
    WHILE           reduce using rule 413 (empty -> .)
    WAIT            reduce using rule 413 (empty -> .)
    FOREVER         reduce using rule 413 (empty -> .)
    BEGIN           reduce using rule 413 (empty -> .)
    FORK            reduce using rule 413 (empty -> .)
    DELAY           reduce using rule 413 (empty -> .)
    DOLLER          reduce using rule 413 (empty -> .)
    DISABLE         reduce using rule 413 (empty -> .)
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    SEMICOLON       reduce using rule 413 (empty -> .)

  ! AT              [ reduce using rule 413 (empty -> .) ]

    senslist                       shift and go to state 172
    empty                          shift and go to state 174

state 56

    (206) always_ff -> ALWAYS_FF . senslist always_statement
    (209) senslist -> . AT LPAREN edgesigs RPAREN
    (217) senslist -> . empty
    (218) senslist -> . AT levelsig
    (219) senslist -> . AT LPAREN levelsigs RPAREN
    (227) senslist -> . AT TIMES
    (228) senslist -> . AT LPAREN TIMES RPAREN
    (413) empty -> .

  ! shift/reduce conflict for AT resolved as shift
    AT              shift and go to state 173
    IF              reduce using rule 413 (empty -> .)
    CASE            reduce using rule 413 (empty -> .)
    CASEX           reduce using rule 413 (empty -> .)
    CASEZ           reduce using rule 413 (empty -> .)
    UNIQUE          reduce using rule 413 (empty -> .)
    FOR             reduce using rule 413 (empty -> .)
    WHILE           reduce using rule 413 (empty -> .)
    WAIT            reduce using rule 413 (empty -> .)
    FOREVER         reduce using rule 413 (empty -> .)
    BEGIN           reduce using rule 413 (empty -> .)
    FORK            reduce using rule 413 (empty -> .)
    DELAY           reduce using rule 413 (empty -> .)
    DOLLER          reduce using rule 413 (empty -> .)
    DISABLE         reduce using rule 413 (empty -> .)
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    SEMICOLON       reduce using rule 413 (empty -> .)

  ! AT              [ reduce using rule 413 (empty -> .) ]

    senslist                       shift and go to state 175
    empty                          shift and go to state 174

state 57

    (207) always_comb -> ALWAYS_COMB . senslist always_statement
    (209) senslist -> . AT LPAREN edgesigs RPAREN
    (217) senslist -> . empty
    (218) senslist -> . AT levelsig
    (219) senslist -> . AT LPAREN levelsigs RPAREN
    (227) senslist -> . AT TIMES
    (228) senslist -> . AT LPAREN TIMES RPAREN
    (413) empty -> .

  ! shift/reduce conflict for AT resolved as shift
    AT              shift and go to state 173
    IF              reduce using rule 413 (empty -> .)
    CASE            reduce using rule 413 (empty -> .)
    CASEX           reduce using rule 413 (empty -> .)
    CASEZ           reduce using rule 413 (empty -> .)
    UNIQUE          reduce using rule 413 (empty -> .)
    FOR             reduce using rule 413 (empty -> .)
    WHILE           reduce using rule 413 (empty -> .)
    WAIT            reduce using rule 413 (empty -> .)
    FOREVER         reduce using rule 413 (empty -> .)
    BEGIN           reduce using rule 413 (empty -> .)
    FORK            reduce using rule 413 (empty -> .)
    DELAY           reduce using rule 413 (empty -> .)
    DOLLER          reduce using rule 413 (empty -> .)
    DISABLE         reduce using rule 413 (empty -> .)
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    SEMICOLON       reduce using rule 413 (empty -> .)

  ! AT              [ reduce using rule 413 (empty -> .) ]

    senslist                       shift and go to state 176
    empty                          shift and go to state 174

state 58

    (208) always_latch -> ALWAYS_LATCH . senslist always_statement
    (209) senslist -> . AT LPAREN edgesigs RPAREN
    (217) senslist -> . empty
    (218) senslist -> . AT levelsig
    (219) senslist -> . AT LPAREN levelsigs RPAREN
    (227) senslist -> . AT TIMES
    (228) senslist -> . AT LPAREN TIMES RPAREN
    (413) empty -> .

  ! shift/reduce conflict for AT resolved as shift
    AT              shift and go to state 173
    IF              reduce using rule 413 (empty -> .)
    CASE            reduce using rule 413 (empty -> .)
    CASEX           reduce using rule 413 (empty -> .)
    CASEZ           reduce using rule 413 (empty -> .)
    UNIQUE          reduce using rule 413 (empty -> .)
    FOR             reduce using rule 413 (empty -> .)
    WHILE           reduce using rule 413 (empty -> .)
    WAIT            reduce using rule 413 (empty -> .)
    FOREVER         reduce using rule 413 (empty -> .)
    BEGIN           reduce using rule 413 (empty -> .)
    FORK            reduce using rule 413 (empty -> .)
    DELAY           reduce using rule 413 (empty -> .)
    DOLLER          reduce using rule 413 (empty -> .)
    DISABLE         reduce using rule 413 (empty -> .)
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    SEMICOLON       reduce using rule 413 (empty -> .)

  ! AT              [ reduce using rule 413 (empty -> .) ]

    senslist                       shift and go to state 177
    empty                          shift and go to state 174

state 59

    (300) initial -> INITIAL . initial_statement
    (301) initial_statement -> . basic_statement
    (229) basic_statement -> . if_statement
    (230) basic_statement -> . case_statement
    (231) basic_statement -> . casex_statement
    (232) basic_statement -> . casez_statement
    (233) basic_statement -> . unique_case_statement
    (234) basic_statement -> . for_statement
    (235) basic_statement -> . while_statement
    (236) basic_statement -> . event_statement
    (237) basic_statement -> . wait_statement
    (238) basic_statement -> . forever_statement
    (239) basic_statement -> . block
    (240) basic_statement -> . namedblock
    (241) basic_statement -> . parallelblock
    (242) basic_statement -> . blocking_substitution
    (243) basic_statement -> . nonblocking_substitution
    (244) basic_statement -> . single_statement
    (271) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (272) if_statement -> . IF LPAREN cond RPAREN true_statement
    (273) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (274) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (289) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (290) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (291) casez_statement -> . CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (292) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (279) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (287) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (302) event_statement -> . senslist SEMICOLON
    (303) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (306) forever_statement -> . FOREVER basic_statement
    (254) block -> . BEGIN block_statements END
    (255) block -> . BEGIN END
    (259) namedblock -> . BEGIN COLON ID namedblock_statements END
    (260) namedblock -> . BEGIN COLON ID END
    (269) parallelblock -> . FORK block_statements JOIN
    (270) parallelblock -> . FORK JOIN
    (246) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (248) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (410) single_statement -> . DELAY expression SEMICOLON
    (411) single_statement -> . systemcall SEMICOLON
    (412) single_statement -> . disable SEMICOLON
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (209) senslist -> . AT LPAREN edgesigs RPAREN
    (217) senslist -> . empty
    (218) senslist -> . AT levelsig
    (219) senslist -> . AT LPAREN levelsigs RPAREN
    (227) senslist -> . AT TIMES
    (228) senslist -> . AT LPAREN TIMES RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (409) disable -> . DISABLE ID
    (413) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 196
    CASE            shift and go to state 198
    CASEX           shift and go to state 199
    CASEZ           shift and go to state 200
    UNIQUE          shift and go to state 201
    FOR             shift and go to state 202
    WHILE           shift and go to state 203
    WAIT            shift and go to state 205
    FOREVER         shift and go to state 206
    BEGIN           shift and go to state 207
    FORK            shift and go to state 208
    DELAY           shift and go to state 209
    AT              shift and go to state 173
    DOLLER          shift and go to state 109
    DISABLE         shift and go to state 213
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    SEMICOLON       reduce using rule 413 (empty -> .)

  ! IF              [ reduce using rule 413 (empty -> .) ]

    initial_statement              shift and go to state 178
    basic_statement                shift and go to state 179
    if_statement                   shift and go to state 180
    case_statement                 shift and go to state 181
    casex_statement                shift and go to state 182
    casez_statement                shift and go to state 183
    unique_case_statement          shift and go to state 184
    for_statement                  shift and go to state 185
    while_statement                shift and go to state 186
    event_statement                shift and go to state 187
    wait_statement                 shift and go to state 188
    forever_statement              shift and go to state 189
    block                          shift and go to state 190
    namedblock                     shift and go to state 191
    parallelblock                  shift and go to state 192
    blocking_substitution          shift and go to state 193
    nonblocking_substitution       shift and go to state 194
    single_statement               shift and go to state 195
    delays                         shift and go to state 197
    senslist                       shift and go to state 204
    systemcall                     shift and go to state 210
    disable                        shift and go to state 211
    empty                          shift and go to state 212

state 60

    (307) instance -> ID . parameterlist instance_bodylist SEMICOLON
    (313) instance -> ID . instance_bodylist_noname SEMICOLON
    (318) parameterlist -> . DELAY LPAREN param_args RPAREN
    (319) parameterlist -> . DELAY LPAREN param_args_noname RPAREN
    (320) parameterlist -> . empty
    (315) instance_bodylist_noname -> . instance_bodylist_noname COMMA instance_body_noname
    (316) instance_bodylist_noname -> . instance_body_noname
    (413) empty -> .
    (317) instance_body_noname -> . LPAREN instance_ports RPAREN

    DELAY           shift and go to state 216
    ID              reduce using rule 413 (empty -> .)
    LPAREN          shift and go to state 217

    parameterlist                  shift and go to state 214
    instance_bodylist_noname       shift and go to state 215
    empty                          shift and go to state 218
    instance_body_noname           shift and go to state 219

state 61

    (308) instance -> SENS_OR . parameterlist instance_bodylist SEMICOLON
    (314) instance -> SENS_OR . instance_bodylist_noname SEMICOLON
    (318) parameterlist -> . DELAY LPAREN param_args RPAREN
    (319) parameterlist -> . DELAY LPAREN param_args_noname RPAREN
    (320) parameterlist -> . empty
    (315) instance_bodylist_noname -> . instance_bodylist_noname COMMA instance_body_noname
    (316) instance_bodylist_noname -> . instance_body_noname
    (413) empty -> .
    (317) instance_body_noname -> . LPAREN instance_ports RPAREN

    DELAY           shift and go to state 216
    ID              reduce using rule 413 (empty -> .)
    LPAREN          shift and go to state 217

    parameterlist                  shift and go to state 220
    instance_bodylist_noname       shift and go to state 221
    empty                          shift and go to state 218
    instance_body_noname           shift and go to state 219

state 62

    (368) function -> FUNCTION . width ID SEMICOLON function_statement ENDFUNCTION
    (369) function -> FUNCTION . ID SEMICOLON function_statement ENDFUNCTION
    (370) function -> FUNCTION . INTEGER ID SEMICOLON function_statement ENDFUNCTION
    (56) width -> . LBRACKET expression COLON expression RBRACKET

    ID              shift and go to state 223
    INTEGER         shift and go to state 224
    LBRACKET        shift and go to state 139

    width                          shift and go to state 222

state 63

    (389) task -> TASK . ID SEMICOLON task_statement ENDTASK

    ID              shift and go to state 225


state 64

    (36) sigtypes -> sigtype .

    LBRACKET        reduce using rule 36 (sigtypes -> sigtype .)
    ID              reduce using rule 36 (sigtypes -> sigtype .)
    INPUT           reduce using rule 36 (sigtypes -> sigtype .)
    OUTPUT          reduce using rule 36 (sigtypes -> sigtype .)
    INOUT           reduce using rule 36 (sigtypes -> sigtype .)
    TRI             reduce using rule 36 (sigtypes -> sigtype .)
    REG             reduce using rule 36 (sigtypes -> sigtype .)
    LOGIC           reduce using rule 36 (sigtypes -> sigtype .)
    WIRE            reduce using rule 36 (sigtypes -> sigtype .)
    SIGNED          reduce using rule 36 (sigtypes -> sigtype .)
    SUPPLY0         reduce using rule 36 (sigtypes -> sigtype .)
    SUPPLY1         reduce using rule 36 (sigtypes -> sigtype .)
    DELAY           reduce using rule 36 (sigtypes -> sigtype .)


state 65

    (37) sigtype -> INPUT .

    LBRACKET        reduce using rule 37 (sigtype -> INPUT .)
    ID              reduce using rule 37 (sigtype -> INPUT .)
    INPUT           reduce using rule 37 (sigtype -> INPUT .)
    OUTPUT          reduce using rule 37 (sigtype -> INPUT .)
    INOUT           reduce using rule 37 (sigtype -> INPUT .)
    TRI             reduce using rule 37 (sigtype -> INPUT .)
    REG             reduce using rule 37 (sigtype -> INPUT .)
    LOGIC           reduce using rule 37 (sigtype -> INPUT .)
    WIRE            reduce using rule 37 (sigtype -> INPUT .)
    SIGNED          reduce using rule 37 (sigtype -> INPUT .)
    SUPPLY0         reduce using rule 37 (sigtype -> INPUT .)
    SUPPLY1         reduce using rule 37 (sigtype -> INPUT .)
    DELAY           reduce using rule 37 (sigtype -> INPUT .)


state 66

    (38) sigtype -> OUTPUT .

    LBRACKET        reduce using rule 38 (sigtype -> OUTPUT .)
    ID              reduce using rule 38 (sigtype -> OUTPUT .)
    INPUT           reduce using rule 38 (sigtype -> OUTPUT .)
    OUTPUT          reduce using rule 38 (sigtype -> OUTPUT .)
    INOUT           reduce using rule 38 (sigtype -> OUTPUT .)
    TRI             reduce using rule 38 (sigtype -> OUTPUT .)
    REG             reduce using rule 38 (sigtype -> OUTPUT .)
    LOGIC           reduce using rule 38 (sigtype -> OUTPUT .)
    WIRE            reduce using rule 38 (sigtype -> OUTPUT .)
    SIGNED          reduce using rule 38 (sigtype -> OUTPUT .)
    SUPPLY0         reduce using rule 38 (sigtype -> OUTPUT .)
    SUPPLY1         reduce using rule 38 (sigtype -> OUTPUT .)
    DELAY           reduce using rule 38 (sigtype -> OUTPUT .)


state 67

    (39) sigtype -> INOUT .

    LBRACKET        reduce using rule 39 (sigtype -> INOUT .)
    ID              reduce using rule 39 (sigtype -> INOUT .)
    INPUT           reduce using rule 39 (sigtype -> INOUT .)
    OUTPUT          reduce using rule 39 (sigtype -> INOUT .)
    INOUT           reduce using rule 39 (sigtype -> INOUT .)
    TRI             reduce using rule 39 (sigtype -> INOUT .)
    REG             reduce using rule 39 (sigtype -> INOUT .)
    LOGIC           reduce using rule 39 (sigtype -> INOUT .)
    WIRE            reduce using rule 39 (sigtype -> INOUT .)
    SIGNED          reduce using rule 39 (sigtype -> INOUT .)
    SUPPLY0         reduce using rule 39 (sigtype -> INOUT .)
    SUPPLY1         reduce using rule 39 (sigtype -> INOUT .)
    DELAY           reduce using rule 39 (sigtype -> INOUT .)


state 68

    (40) sigtype -> TRI .

    LBRACKET        reduce using rule 40 (sigtype -> TRI .)
    ID              reduce using rule 40 (sigtype -> TRI .)
    INPUT           reduce using rule 40 (sigtype -> TRI .)
    OUTPUT          reduce using rule 40 (sigtype -> TRI .)
    INOUT           reduce using rule 40 (sigtype -> TRI .)
    TRI             reduce using rule 40 (sigtype -> TRI .)
    REG             reduce using rule 40 (sigtype -> TRI .)
    LOGIC           reduce using rule 40 (sigtype -> TRI .)
    WIRE            reduce using rule 40 (sigtype -> TRI .)
    SIGNED          reduce using rule 40 (sigtype -> TRI .)
    SUPPLY0         reduce using rule 40 (sigtype -> TRI .)
    SUPPLY1         reduce using rule 40 (sigtype -> TRI .)
    DELAY           reduce using rule 40 (sigtype -> TRI .)


state 69

    (41) sigtype -> REG .

    LBRACKET        reduce using rule 41 (sigtype -> REG .)
    ID              reduce using rule 41 (sigtype -> REG .)
    INPUT           reduce using rule 41 (sigtype -> REG .)
    OUTPUT          reduce using rule 41 (sigtype -> REG .)
    INOUT           reduce using rule 41 (sigtype -> REG .)
    TRI             reduce using rule 41 (sigtype -> REG .)
    REG             reduce using rule 41 (sigtype -> REG .)
    LOGIC           reduce using rule 41 (sigtype -> REG .)
    WIRE            reduce using rule 41 (sigtype -> REG .)
    SIGNED          reduce using rule 41 (sigtype -> REG .)
    SUPPLY0         reduce using rule 41 (sigtype -> REG .)
    SUPPLY1         reduce using rule 41 (sigtype -> REG .)
    DELAY           reduce using rule 41 (sigtype -> REG .)


state 70

    (42) sigtype -> LOGIC .

    LBRACKET        reduce using rule 42 (sigtype -> LOGIC .)
    ID              reduce using rule 42 (sigtype -> LOGIC .)
    INPUT           reduce using rule 42 (sigtype -> LOGIC .)
    OUTPUT          reduce using rule 42 (sigtype -> LOGIC .)
    INOUT           reduce using rule 42 (sigtype -> LOGIC .)
    TRI             reduce using rule 42 (sigtype -> LOGIC .)
    REG             reduce using rule 42 (sigtype -> LOGIC .)
    LOGIC           reduce using rule 42 (sigtype -> LOGIC .)
    WIRE            reduce using rule 42 (sigtype -> LOGIC .)
    SIGNED          reduce using rule 42 (sigtype -> LOGIC .)
    SUPPLY0         reduce using rule 42 (sigtype -> LOGIC .)
    SUPPLY1         reduce using rule 42 (sigtype -> LOGIC .)
    DELAY           reduce using rule 42 (sigtype -> LOGIC .)


state 71

    (43) sigtype -> WIRE .

    LBRACKET        reduce using rule 43 (sigtype -> WIRE .)
    ID              reduce using rule 43 (sigtype -> WIRE .)
    INPUT           reduce using rule 43 (sigtype -> WIRE .)
    OUTPUT          reduce using rule 43 (sigtype -> WIRE .)
    INOUT           reduce using rule 43 (sigtype -> WIRE .)
    TRI             reduce using rule 43 (sigtype -> WIRE .)
    REG             reduce using rule 43 (sigtype -> WIRE .)
    LOGIC           reduce using rule 43 (sigtype -> WIRE .)
    WIRE            reduce using rule 43 (sigtype -> WIRE .)
    SIGNED          reduce using rule 43 (sigtype -> WIRE .)
    SUPPLY0         reduce using rule 43 (sigtype -> WIRE .)
    SUPPLY1         reduce using rule 43 (sigtype -> WIRE .)
    DELAY           reduce using rule 43 (sigtype -> WIRE .)


state 72

    (45) sigtype -> SUPPLY0 .

    LBRACKET        reduce using rule 45 (sigtype -> SUPPLY0 .)
    ID              reduce using rule 45 (sigtype -> SUPPLY0 .)
    INPUT           reduce using rule 45 (sigtype -> SUPPLY0 .)
    OUTPUT          reduce using rule 45 (sigtype -> SUPPLY0 .)
    INOUT           reduce using rule 45 (sigtype -> SUPPLY0 .)
    TRI             reduce using rule 45 (sigtype -> SUPPLY0 .)
    REG             reduce using rule 45 (sigtype -> SUPPLY0 .)
    LOGIC           reduce using rule 45 (sigtype -> SUPPLY0 .)
    WIRE            reduce using rule 45 (sigtype -> SUPPLY0 .)
    SIGNED          reduce using rule 45 (sigtype -> SUPPLY0 .)
    SUPPLY0         reduce using rule 45 (sigtype -> SUPPLY0 .)
    SUPPLY1         reduce using rule 45 (sigtype -> SUPPLY0 .)
    DELAY           reduce using rule 45 (sigtype -> SUPPLY0 .)


state 73

    (46) sigtype -> SUPPLY1 .

    LBRACKET        reduce using rule 46 (sigtype -> SUPPLY1 .)
    ID              reduce using rule 46 (sigtype -> SUPPLY1 .)
    INPUT           reduce using rule 46 (sigtype -> SUPPLY1 .)
    OUTPUT          reduce using rule 46 (sigtype -> SUPPLY1 .)
    INOUT           reduce using rule 46 (sigtype -> SUPPLY1 .)
    TRI             reduce using rule 46 (sigtype -> SUPPLY1 .)
    REG             reduce using rule 46 (sigtype -> SUPPLY1 .)
    LOGIC           reduce using rule 46 (sigtype -> SUPPLY1 .)
    WIRE            reduce using rule 46 (sigtype -> SUPPLY1 .)
    SIGNED          reduce using rule 46 (sigtype -> SUPPLY1 .)
    SUPPLY0         reduce using rule 46 (sigtype -> SUPPLY1 .)
    SUPPLY1         reduce using rule 46 (sigtype -> SUPPLY1 .)
    DELAY           reduce using rule 46 (sigtype -> SUPPLY1 .)


state 74

    (28) portlist -> LPAREN ports . RPAREN SEMICOLON
    (32) ports -> ports . COMMA portname

    RPAREN          shift and go to state 226
    COMMA           shift and go to state 227


state 75

    (30) portlist -> LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 228


state 76

    (29) portlist -> LPAREN ioports . RPAREN SEMICOLON
    (47) ioports -> ioports . COMMA ioport

    RPAREN          shift and go to state 229
    COMMA           shift and go to state 230


state 77

    (33) ports -> portname .

    RPAREN          reduce using rule 33 (ports -> portname .)
    COMMA           reduce using rule 33 (ports -> portname .)


state 78

    (48) ioports -> ioport_head .

    RPAREN          reduce using rule 48 (ioports -> ioport_head .)
    COMMA           reduce using rule 48 (ioports -> ioport_head .)


state 79

    (34) portname -> ID .

    RPAREN          reduce using rule 34 (portname -> ID .)
    COMMA           reduce using rule 34 (portname -> ID .)
    LBRACKET        reduce using rule 34 (portname -> ID .)


state 80

    (52) ioport_head -> sigtypes . portname
    (53) ioport_head -> sigtypes . width portname
    (54) ioport_head -> sigtypes . width portname dimensions
    (35) sigtypes -> sigtypes . sigtype
    (34) portname -> . ID
    (56) width -> . LBRACKET expression COLON expression RBRACKET
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

    ID              shift and go to state 79
    LBRACKET        shift and go to state 139
    INPUT           shift and go to state 65
    OUTPUT          shift and go to state 66
    INOUT           shift and go to state 67
    TRI             shift and go to state 68
    REG             shift and go to state 69
    LOGIC           shift and go to state 70
    WIRE            shift and go to state 71
    SIGNED          shift and go to state 49
    SUPPLY0         shift and go to state 72
    SUPPLY1         shift and go to state 73

    portname                       shift and go to state 231
    width                          shift and go to state 232
    sigtype                        shift and go to state 137

state 81

    (12) paramlist -> DELAY LPAREN params . RPAREN

    RPAREN          shift and go to state 233


state 82

    (14) params -> params_begin . param_end
    (15) params_begin -> params_begin . param
    (23) param_end -> . PARAMETER param_substitution_list
    (24) param_end -> . PARAMETER SIGNED param_substitution_list
    (25) param_end -> . PARAMETER width param_substitution_list
    (26) param_end -> . PARAMETER SIGNED width param_substitution_list
    (27) param_end -> . PARAMETER INTEGER param_substitution_list
    (18) param -> . PARAMETER param_substitution_list COMMA
    (19) param -> . PARAMETER SIGNED param_substitution_list COMMA
    (20) param -> . PARAMETER width param_substitution_list COMMA
    (21) param -> . PARAMETER SIGNED width param_substitution_list COMMA
    (22) param -> . PARAMETER INTEGER param_substitution_list COMMA

    PARAMETER       shift and go to state 85

    param_end                      shift and go to state 234
    param                          shift and go to state 235

state 83

    (17) params -> param_end .

    RPAREN          reduce using rule 17 (params -> param_end .)


state 84

    (16) params_begin -> param .

    PARAMETER       reduce using rule 16 (params_begin -> param .)


state 85

    (23) param_end -> PARAMETER . param_substitution_list
    (24) param_end -> PARAMETER . SIGNED param_substitution_list
    (25) param_end -> PARAMETER . width param_substitution_list
    (26) param_end -> PARAMETER . SIGNED width param_substitution_list
    (27) param_end -> PARAMETER . INTEGER param_substitution_list
    (18) param -> PARAMETER . param_substitution_list COMMA
    (19) param -> PARAMETER . SIGNED param_substitution_list COMMA
    (20) param -> PARAMETER . width param_substitution_list COMMA
    (21) param -> PARAMETER . SIGNED width param_substitution_list COMMA
    (22) param -> PARAMETER . INTEGER param_substitution_list COMMA
    (112) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (113) param_substitution_list -> . param_substitution
    (56) width -> . LBRACKET expression COLON expression RBRACKET
    (114) param_substitution -> . ID EQUALS rvalue

    SIGNED          shift and go to state 237
    INTEGER         shift and go to state 239
    LBRACKET        shift and go to state 139
    ID              shift and go to state 156

    param_substitution_list        shift and go to state 236
    width                          shift and go to state 238
    param_substitution             shift and go to state 155

state 86

    (8) pragma -> LPAREN TIMES ID TIMES RPAREN .

    MODULE          reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    LPAREN          reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    $end            reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    ENDMODULE       reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    GENERATE        reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    INTEGER         reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    REAL            reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    PARAMETER       reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    LOCALPARAM      reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    GENVAR          reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    ASSIGN          reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    ALWAYS          reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    ALWAYS_FF       reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    ALWAYS_COMB     reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    ALWAYS_LATCH    reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    INITIAL         reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    ID              reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    SENS_OR         reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    FUNCTION        reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    TASK            reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    INPUT           reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    OUTPUT          reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    INOUT           reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    TRI             reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    REG             reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    LOGIC           reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    WIRE            reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    SIGNED          reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    SUPPLY0         reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    SUPPLY1         reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    ENDGENERATE     reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    IF              reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    FOR             reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    ELSE            reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    END             reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)


state 87

    (171) expression -> LPAREN . expression RPAREN
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 240
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 88

    (405) identifier -> ID .

    LBRACKET        reduce using rule 405 (identifier -> ID .)
    LPAREN          reduce using rule 405 (identifier -> ID .)
    DOT             reduce using rule 405 (identifier -> ID .)
    TIMES           reduce using rule 405 (identifier -> ID .)
    POWER           reduce using rule 405 (identifier -> ID .)
    DIVIDE          reduce using rule 405 (identifier -> ID .)
    MOD             reduce using rule 405 (identifier -> ID .)
    PLUS            reduce using rule 405 (identifier -> ID .)
    MINUS           reduce using rule 405 (identifier -> ID .)
    LSHIFT          reduce using rule 405 (identifier -> ID .)
    RSHIFT          reduce using rule 405 (identifier -> ID .)
    LSHIFTA         reduce using rule 405 (identifier -> ID .)
    RSHIFTA         reduce using rule 405 (identifier -> ID .)
    LT              reduce using rule 405 (identifier -> ID .)
    GT              reduce using rule 405 (identifier -> ID .)
    LE              reduce using rule 405 (identifier -> ID .)
    GE              reduce using rule 405 (identifier -> ID .)
    EQ              reduce using rule 405 (identifier -> ID .)
    NE              reduce using rule 405 (identifier -> ID .)
    EQL             reduce using rule 405 (identifier -> ID .)
    NEL             reduce using rule 405 (identifier -> ID .)
    AND             reduce using rule 405 (identifier -> ID .)
    XOR             reduce using rule 405 (identifier -> ID .)
    XNOR            reduce using rule 405 (identifier -> ID .)
    OR              reduce using rule 405 (identifier -> ID .)
    LAND            reduce using rule 405 (identifier -> ID .)
    LOR             reduce using rule 405 (identifier -> ID .)
    COND            reduce using rule 405 (identifier -> ID .)
    EQUALS          reduce using rule 405 (identifier -> ID .)
    RPAREN          reduce using rule 405 (identifier -> ID .)
    LBRACE          reduce using rule 405 (identifier -> ID .)
    RBRACE          reduce using rule 405 (identifier -> ID .)
    COMMA           reduce using rule 405 (identifier -> ID .)
    COLON           reduce using rule 405 (identifier -> ID .)
    SEMICOLON       reduce using rule 405 (identifier -> ID .)
    PLUSCOLON       reduce using rule 405 (identifier -> ID .)
    MINUSCOLON      reduce using rule 405 (identifier -> ID .)
    RBRACKET        reduce using rule 405 (identifier -> ID .)
    ID              reduce using rule 405 (identifier -> ID .)
    LNOT            reduce using rule 405 (identifier -> ID .)
    NOT             reduce using rule 405 (identifier -> ID .)
    NAND            reduce using rule 405 (identifier -> ID .)
    NOR             reduce using rule 405 (identifier -> ID .)
    DOLLER          reduce using rule 405 (identifier -> ID .)
    INTNUMBER_DEC   reduce using rule 405 (identifier -> ID .)
    SIGNED_INTNUMBER_DEC reduce using rule 405 (identifier -> ID .)
    INTNUMBER_BIN   reduce using rule 405 (identifier -> ID .)
    SIGNED_INTNUMBER_BIN reduce using rule 405 (identifier -> ID .)
    INTNUMBER_OCT   reduce using rule 405 (identifier -> ID .)
    SIGNED_INTNUMBER_OCT reduce using rule 405 (identifier -> ID .)
    INTNUMBER_HEX   reduce using rule 405 (identifier -> ID .)
    SIGNED_INTNUMBER_HEX reduce using rule 405 (identifier -> ID .)
    FLOATNUMBER     reduce using rule 405 (identifier -> ID .)
    STRING_LITERAL  reduce using rule 405 (identifier -> ID .)
    IF              reduce using rule 405 (identifier -> ID .)
    CASE            reduce using rule 405 (identifier -> ID .)
    CASEX           reduce using rule 405 (identifier -> ID .)
    CASEZ           reduce using rule 405 (identifier -> ID .)
    UNIQUE          reduce using rule 405 (identifier -> ID .)
    FOR             reduce using rule 405 (identifier -> ID .)
    WHILE           reduce using rule 405 (identifier -> ID .)
    WAIT            reduce using rule 405 (identifier -> ID .)
    FOREVER         reduce using rule 405 (identifier -> ID .)
    BEGIN           reduce using rule 405 (identifier -> ID .)
    FORK            reduce using rule 405 (identifier -> ID .)
    DELAY           reduce using rule 405 (identifier -> ID .)
    AT              reduce using rule 405 (identifier -> ID .)
    DISABLE         reduce using rule 405 (identifier -> ID .)
    SENS_OR         reduce using rule 405 (identifier -> ID .)


state 89

    (7) pragma -> LPAREN TIMES ID EQUALS expression . TIMES RPAREN
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    TIMES           shift and go to state 241
    POWER           shift and go to state 242
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 90

    (136) expression -> MINUS . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 266
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 91

    (137) expression -> PLUS . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 267
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 92

    (138) expression -> LNOT . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 268
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 93

    (139) expression -> NOT . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 269
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 94

    (140) expression -> AND . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 270
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 95

    (141) expression -> NAND . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 271
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 96

    (142) expression -> NOR . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 272
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 97

    (143) expression -> OR . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 273
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 98

    (144) expression -> XOR . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 274
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 99

    (145) expression -> XNOR . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 275
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 100

    (172) expression -> concat .

    TIMES           reduce using rule 172 (expression -> concat .)
    POWER           reduce using rule 172 (expression -> concat .)
    DIVIDE          reduce using rule 172 (expression -> concat .)
    MOD             reduce using rule 172 (expression -> concat .)
    PLUS            reduce using rule 172 (expression -> concat .)
    MINUS           reduce using rule 172 (expression -> concat .)
    LSHIFT          reduce using rule 172 (expression -> concat .)
    RSHIFT          reduce using rule 172 (expression -> concat .)
    LSHIFTA         reduce using rule 172 (expression -> concat .)
    RSHIFTA         reduce using rule 172 (expression -> concat .)
    LT              reduce using rule 172 (expression -> concat .)
    GT              reduce using rule 172 (expression -> concat .)
    LE              reduce using rule 172 (expression -> concat .)
    GE              reduce using rule 172 (expression -> concat .)
    EQ              reduce using rule 172 (expression -> concat .)
    NE              reduce using rule 172 (expression -> concat .)
    EQL             reduce using rule 172 (expression -> concat .)
    NEL             reduce using rule 172 (expression -> concat .)
    AND             reduce using rule 172 (expression -> concat .)
    XOR             reduce using rule 172 (expression -> concat .)
    XNOR            reduce using rule 172 (expression -> concat .)
    OR              reduce using rule 172 (expression -> concat .)
    LAND            reduce using rule 172 (expression -> concat .)
    LOR             reduce using rule 172 (expression -> concat .)
    COND            reduce using rule 172 (expression -> concat .)
    RPAREN          reduce using rule 172 (expression -> concat .)
    LBRACE          reduce using rule 172 (expression -> concat .)
    RBRACE          reduce using rule 172 (expression -> concat .)
    COMMA           reduce using rule 172 (expression -> concat .)
    COLON           reduce using rule 172 (expression -> concat .)
    SEMICOLON       reduce using rule 172 (expression -> concat .)
    PLUSCOLON       reduce using rule 172 (expression -> concat .)
    MINUSCOLON      reduce using rule 172 (expression -> concat .)
    RBRACKET        reduce using rule 172 (expression -> concat .)


state 101

    (173) expression -> repeat .

    TIMES           reduce using rule 173 (expression -> repeat .)
    POWER           reduce using rule 173 (expression -> repeat .)
    DIVIDE          reduce using rule 173 (expression -> repeat .)
    MOD             reduce using rule 173 (expression -> repeat .)
    PLUS            reduce using rule 173 (expression -> repeat .)
    MINUS           reduce using rule 173 (expression -> repeat .)
    LSHIFT          reduce using rule 173 (expression -> repeat .)
    RSHIFT          reduce using rule 173 (expression -> repeat .)
    LSHIFTA         reduce using rule 173 (expression -> repeat .)
    RSHIFTA         reduce using rule 173 (expression -> repeat .)
    LT              reduce using rule 173 (expression -> repeat .)
    GT              reduce using rule 173 (expression -> repeat .)
    LE              reduce using rule 173 (expression -> repeat .)
    GE              reduce using rule 173 (expression -> repeat .)
    EQ              reduce using rule 173 (expression -> repeat .)
    NE              reduce using rule 173 (expression -> repeat .)
    EQL             reduce using rule 173 (expression -> repeat .)
    NEL             reduce using rule 173 (expression -> repeat .)
    AND             reduce using rule 173 (expression -> repeat .)
    XOR             reduce using rule 173 (expression -> repeat .)
    XNOR            reduce using rule 173 (expression -> repeat .)
    OR              reduce using rule 173 (expression -> repeat .)
    LAND            reduce using rule 173 (expression -> repeat .)
    LOR             reduce using rule 173 (expression -> repeat .)
    COND            reduce using rule 173 (expression -> repeat .)
    RPAREN          reduce using rule 173 (expression -> repeat .)
    LBRACE          reduce using rule 173 (expression -> repeat .)
    RBRACE          reduce using rule 173 (expression -> repeat .)
    COMMA           reduce using rule 173 (expression -> repeat .)
    COLON           reduce using rule 173 (expression -> repeat .)
    SEMICOLON       reduce using rule 173 (expression -> repeat .)
    PLUSCOLON       reduce using rule 173 (expression -> repeat .)
    MINUSCOLON      reduce using rule 173 (expression -> repeat .)
    RBRACKET        reduce using rule 173 (expression -> repeat .)


state 102

    (174) expression -> partselect .

    TIMES           reduce using rule 174 (expression -> partselect .)
    POWER           reduce using rule 174 (expression -> partselect .)
    DIVIDE          reduce using rule 174 (expression -> partselect .)
    MOD             reduce using rule 174 (expression -> partselect .)
    PLUS            reduce using rule 174 (expression -> partselect .)
    MINUS           reduce using rule 174 (expression -> partselect .)
    LSHIFT          reduce using rule 174 (expression -> partselect .)
    RSHIFT          reduce using rule 174 (expression -> partselect .)
    LSHIFTA         reduce using rule 174 (expression -> partselect .)
    RSHIFTA         reduce using rule 174 (expression -> partselect .)
    LT              reduce using rule 174 (expression -> partselect .)
    GT              reduce using rule 174 (expression -> partselect .)
    LE              reduce using rule 174 (expression -> partselect .)
    GE              reduce using rule 174 (expression -> partselect .)
    EQ              reduce using rule 174 (expression -> partselect .)
    NE              reduce using rule 174 (expression -> partselect .)
    EQL             reduce using rule 174 (expression -> partselect .)
    NEL             reduce using rule 174 (expression -> partselect .)
    AND             reduce using rule 174 (expression -> partselect .)
    XOR             reduce using rule 174 (expression -> partselect .)
    XNOR            reduce using rule 174 (expression -> partselect .)
    OR              reduce using rule 174 (expression -> partselect .)
    LAND            reduce using rule 174 (expression -> partselect .)
    LOR             reduce using rule 174 (expression -> partselect .)
    COND            reduce using rule 174 (expression -> partselect .)
    RPAREN          reduce using rule 174 (expression -> partselect .)
    LBRACE          reduce using rule 174 (expression -> partselect .)
    RBRACE          reduce using rule 174 (expression -> partselect .)
    COMMA           reduce using rule 174 (expression -> partselect .)
    COLON           reduce using rule 174 (expression -> partselect .)
    SEMICOLON       reduce using rule 174 (expression -> partselect .)
    PLUSCOLON       reduce using rule 174 (expression -> partselect .)
    MINUSCOLON      reduce using rule 174 (expression -> partselect .)
    RBRACKET        reduce using rule 174 (expression -> partselect .)


state 103

    (175) expression -> pointer .
    (187) partselect -> pointer . LBRACKET expression COLON expression RBRACKET
    (188) partselect -> pointer . LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> pointer . LBRACKET expression MINUSCOLON expression RBRACKET
    (191) pointer -> pointer . LBRACKET expression RBRACKET
    (408) scope -> pointer . DOT

    TIMES           reduce using rule 175 (expression -> pointer .)
    POWER           reduce using rule 175 (expression -> pointer .)
    DIVIDE          reduce using rule 175 (expression -> pointer .)
    MOD             reduce using rule 175 (expression -> pointer .)
    PLUS            reduce using rule 175 (expression -> pointer .)
    MINUS           reduce using rule 175 (expression -> pointer .)
    LSHIFT          reduce using rule 175 (expression -> pointer .)
    RSHIFT          reduce using rule 175 (expression -> pointer .)
    LSHIFTA         reduce using rule 175 (expression -> pointer .)
    RSHIFTA         reduce using rule 175 (expression -> pointer .)
    LT              reduce using rule 175 (expression -> pointer .)
    GT              reduce using rule 175 (expression -> pointer .)
    LE              reduce using rule 175 (expression -> pointer .)
    GE              reduce using rule 175 (expression -> pointer .)
    EQ              reduce using rule 175 (expression -> pointer .)
    NE              reduce using rule 175 (expression -> pointer .)
    EQL             reduce using rule 175 (expression -> pointer .)
    NEL             reduce using rule 175 (expression -> pointer .)
    AND             reduce using rule 175 (expression -> pointer .)
    XOR             reduce using rule 175 (expression -> pointer .)
    XNOR            reduce using rule 175 (expression -> pointer .)
    OR              reduce using rule 175 (expression -> pointer .)
    LAND            reduce using rule 175 (expression -> pointer .)
    LOR             reduce using rule 175 (expression -> pointer .)
    COND            reduce using rule 175 (expression -> pointer .)
    RPAREN          reduce using rule 175 (expression -> pointer .)
    LBRACE          reduce using rule 175 (expression -> pointer .)
    RBRACE          reduce using rule 175 (expression -> pointer .)
    COMMA           reduce using rule 175 (expression -> pointer .)
    COLON           reduce using rule 175 (expression -> pointer .)
    SEMICOLON       reduce using rule 175 (expression -> pointer .)
    PLUSCOLON       reduce using rule 175 (expression -> pointer .)
    MINUSCOLON      reduce using rule 175 (expression -> pointer .)
    RBRACKET        reduce using rule 175 (expression -> pointer .)
    LBRACKET        shift and go to state 276
    DOT             shift and go to state 277


state 104

    (176) expression -> functioncall .

    TIMES           reduce using rule 176 (expression -> functioncall .)
    POWER           reduce using rule 176 (expression -> functioncall .)
    DIVIDE          reduce using rule 176 (expression -> functioncall .)
    MOD             reduce using rule 176 (expression -> functioncall .)
    PLUS            reduce using rule 176 (expression -> functioncall .)
    MINUS           reduce using rule 176 (expression -> functioncall .)
    LSHIFT          reduce using rule 176 (expression -> functioncall .)
    RSHIFT          reduce using rule 176 (expression -> functioncall .)
    LSHIFTA         reduce using rule 176 (expression -> functioncall .)
    RSHIFTA         reduce using rule 176 (expression -> functioncall .)
    LT              reduce using rule 176 (expression -> functioncall .)
    GT              reduce using rule 176 (expression -> functioncall .)
    LE              reduce using rule 176 (expression -> functioncall .)
    GE              reduce using rule 176 (expression -> functioncall .)
    EQ              reduce using rule 176 (expression -> functioncall .)
    NE              reduce using rule 176 (expression -> functioncall .)
    EQL             reduce using rule 176 (expression -> functioncall .)
    NEL             reduce using rule 176 (expression -> functioncall .)
    AND             reduce using rule 176 (expression -> functioncall .)
    XOR             reduce using rule 176 (expression -> functioncall .)
    XNOR            reduce using rule 176 (expression -> functioncall .)
    OR              reduce using rule 176 (expression -> functioncall .)
    LAND            reduce using rule 176 (expression -> functioncall .)
    LOR             reduce using rule 176 (expression -> functioncall .)
    COND            reduce using rule 176 (expression -> functioncall .)
    RPAREN          reduce using rule 176 (expression -> functioncall .)
    LBRACE          reduce using rule 176 (expression -> functioncall .)
    RBRACE          reduce using rule 176 (expression -> functioncall .)
    COMMA           reduce using rule 176 (expression -> functioncall .)
    COLON           reduce using rule 176 (expression -> functioncall .)
    SEMICOLON       reduce using rule 176 (expression -> functioncall .)
    PLUSCOLON       reduce using rule 176 (expression -> functioncall .)
    MINUSCOLON      reduce using rule 176 (expression -> functioncall .)
    RBRACKET        reduce using rule 176 (expression -> functioncall .)


state 105

    (177) expression -> systemcall .

    TIMES           reduce using rule 177 (expression -> systemcall .)
    POWER           reduce using rule 177 (expression -> systemcall .)
    DIVIDE          reduce using rule 177 (expression -> systemcall .)
    MOD             reduce using rule 177 (expression -> systemcall .)
    PLUS            reduce using rule 177 (expression -> systemcall .)
    MINUS           reduce using rule 177 (expression -> systemcall .)
    LSHIFT          reduce using rule 177 (expression -> systemcall .)
    RSHIFT          reduce using rule 177 (expression -> systemcall .)
    LSHIFTA         reduce using rule 177 (expression -> systemcall .)
    RSHIFTA         reduce using rule 177 (expression -> systemcall .)
    LT              reduce using rule 177 (expression -> systemcall .)
    GT              reduce using rule 177 (expression -> systemcall .)
    LE              reduce using rule 177 (expression -> systemcall .)
    GE              reduce using rule 177 (expression -> systemcall .)
    EQ              reduce using rule 177 (expression -> systemcall .)
    NE              reduce using rule 177 (expression -> systemcall .)
    EQL             reduce using rule 177 (expression -> systemcall .)
    NEL             reduce using rule 177 (expression -> systemcall .)
    AND             reduce using rule 177 (expression -> systemcall .)
    XOR             reduce using rule 177 (expression -> systemcall .)
    XNOR            reduce using rule 177 (expression -> systemcall .)
    OR              reduce using rule 177 (expression -> systemcall .)
    LAND            reduce using rule 177 (expression -> systemcall .)
    LOR             reduce using rule 177 (expression -> systemcall .)
    COND            reduce using rule 177 (expression -> systemcall .)
    RPAREN          reduce using rule 177 (expression -> systemcall .)
    LBRACE          reduce using rule 177 (expression -> systemcall .)
    RBRACE          reduce using rule 177 (expression -> systemcall .)
    COMMA           reduce using rule 177 (expression -> systemcall .)
    COLON           reduce using rule 177 (expression -> systemcall .)
    SEMICOLON       reduce using rule 177 (expression -> systemcall .)
    PLUSCOLON       reduce using rule 177 (expression -> systemcall .)
    MINUSCOLON      reduce using rule 177 (expression -> systemcall .)
    RBRACKET        reduce using rule 177 (expression -> systemcall .)


state 106

    (178) expression -> identifier .
    (184) partselect -> identifier . LBRACKET expression COLON expression RBRACKET
    (185) partselect -> identifier . LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> identifier . LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> identifier . LBRACKET expression RBRACKET
    (385) functioncall -> identifier . LPAREN func_args RPAREN
    (407) scope -> identifier . DOT

    TIMES           reduce using rule 178 (expression -> identifier .)
    POWER           reduce using rule 178 (expression -> identifier .)
    DIVIDE          reduce using rule 178 (expression -> identifier .)
    MOD             reduce using rule 178 (expression -> identifier .)
    PLUS            reduce using rule 178 (expression -> identifier .)
    MINUS           reduce using rule 178 (expression -> identifier .)
    LSHIFT          reduce using rule 178 (expression -> identifier .)
    RSHIFT          reduce using rule 178 (expression -> identifier .)
    LSHIFTA         reduce using rule 178 (expression -> identifier .)
    RSHIFTA         reduce using rule 178 (expression -> identifier .)
    LT              reduce using rule 178 (expression -> identifier .)
    GT              reduce using rule 178 (expression -> identifier .)
    LE              reduce using rule 178 (expression -> identifier .)
    GE              reduce using rule 178 (expression -> identifier .)
    EQ              reduce using rule 178 (expression -> identifier .)
    NE              reduce using rule 178 (expression -> identifier .)
    EQL             reduce using rule 178 (expression -> identifier .)
    NEL             reduce using rule 178 (expression -> identifier .)
    AND             reduce using rule 178 (expression -> identifier .)
    XOR             reduce using rule 178 (expression -> identifier .)
    XNOR            reduce using rule 178 (expression -> identifier .)
    OR              reduce using rule 178 (expression -> identifier .)
    LAND            reduce using rule 178 (expression -> identifier .)
    LOR             reduce using rule 178 (expression -> identifier .)
    COND            reduce using rule 178 (expression -> identifier .)
    RPAREN          reduce using rule 178 (expression -> identifier .)
    LBRACE          reduce using rule 178 (expression -> identifier .)
    RBRACE          reduce using rule 178 (expression -> identifier .)
    COMMA           reduce using rule 178 (expression -> identifier .)
    COLON           reduce using rule 178 (expression -> identifier .)
    SEMICOLON       reduce using rule 178 (expression -> identifier .)
    PLUSCOLON       reduce using rule 178 (expression -> identifier .)
    MINUSCOLON      reduce using rule 178 (expression -> identifier .)
    RBRACKET        reduce using rule 178 (expression -> identifier .)
    LBRACKET        shift and go to state 278
    LPAREN          shift and go to state 279
    DOT             shift and go to state 280


state 107

    (179) expression -> const_expression .

    TIMES           reduce using rule 179 (expression -> const_expression .)
    POWER           reduce using rule 179 (expression -> const_expression .)
    DIVIDE          reduce using rule 179 (expression -> const_expression .)
    MOD             reduce using rule 179 (expression -> const_expression .)
    PLUS            reduce using rule 179 (expression -> const_expression .)
    MINUS           reduce using rule 179 (expression -> const_expression .)
    LSHIFT          reduce using rule 179 (expression -> const_expression .)
    RSHIFT          reduce using rule 179 (expression -> const_expression .)
    LSHIFTA         reduce using rule 179 (expression -> const_expression .)
    RSHIFTA         reduce using rule 179 (expression -> const_expression .)
    LT              reduce using rule 179 (expression -> const_expression .)
    GT              reduce using rule 179 (expression -> const_expression .)
    LE              reduce using rule 179 (expression -> const_expression .)
    GE              reduce using rule 179 (expression -> const_expression .)
    EQ              reduce using rule 179 (expression -> const_expression .)
    NE              reduce using rule 179 (expression -> const_expression .)
    EQL             reduce using rule 179 (expression -> const_expression .)
    NEL             reduce using rule 179 (expression -> const_expression .)
    AND             reduce using rule 179 (expression -> const_expression .)
    XOR             reduce using rule 179 (expression -> const_expression .)
    XNOR            reduce using rule 179 (expression -> const_expression .)
    OR              reduce using rule 179 (expression -> const_expression .)
    LAND            reduce using rule 179 (expression -> const_expression .)
    LOR             reduce using rule 179 (expression -> const_expression .)
    COND            reduce using rule 179 (expression -> const_expression .)
    RPAREN          reduce using rule 179 (expression -> const_expression .)
    LBRACE          reduce using rule 179 (expression -> const_expression .)
    RBRACE          reduce using rule 179 (expression -> const_expression .)
    COMMA           reduce using rule 179 (expression -> const_expression .)
    COLON           reduce using rule 179 (expression -> const_expression .)
    SEMICOLON       reduce using rule 179 (expression -> const_expression .)
    PLUSCOLON       reduce using rule 179 (expression -> const_expression .)
    MINUSCOLON      reduce using rule 179 (expression -> const_expression .)
    RBRACKET        reduce using rule 179 (expression -> const_expression .)


state 108

    (180) concat -> LBRACE . concatlist RBRACE
    (183) repeat -> LBRACE . expression concat RBRACE
    (181) concatlist -> . concatlist COMMA expression
    (182) concatlist -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    concatlist                     shift and go to state 281
    expression                     shift and go to state 282
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 109

    (361) systemcall -> DOLLER . ID
    (362) systemcall -> DOLLER . ID LPAREN sysargs RPAREN
    (363) systemcall -> DOLLER . SIGNED LPAREN sysargs RPAREN

    ID              shift and go to state 283
    SIGNED          shift and go to state 284


state 110

    (406) identifier -> scope . ID

    ID              shift and go to state 285


state 111

    (192) const_expression -> intnumber .

    TIMES           reduce using rule 192 (const_expression -> intnumber .)
    POWER           reduce using rule 192 (const_expression -> intnumber .)
    DIVIDE          reduce using rule 192 (const_expression -> intnumber .)
    MOD             reduce using rule 192 (const_expression -> intnumber .)
    PLUS            reduce using rule 192 (const_expression -> intnumber .)
    MINUS           reduce using rule 192 (const_expression -> intnumber .)
    LSHIFT          reduce using rule 192 (const_expression -> intnumber .)
    RSHIFT          reduce using rule 192 (const_expression -> intnumber .)
    LSHIFTA         reduce using rule 192 (const_expression -> intnumber .)
    RSHIFTA         reduce using rule 192 (const_expression -> intnumber .)
    LT              reduce using rule 192 (const_expression -> intnumber .)
    GT              reduce using rule 192 (const_expression -> intnumber .)
    LE              reduce using rule 192 (const_expression -> intnumber .)
    GE              reduce using rule 192 (const_expression -> intnumber .)
    EQ              reduce using rule 192 (const_expression -> intnumber .)
    NE              reduce using rule 192 (const_expression -> intnumber .)
    EQL             reduce using rule 192 (const_expression -> intnumber .)
    NEL             reduce using rule 192 (const_expression -> intnumber .)
    AND             reduce using rule 192 (const_expression -> intnumber .)
    XOR             reduce using rule 192 (const_expression -> intnumber .)
    XNOR            reduce using rule 192 (const_expression -> intnumber .)
    OR              reduce using rule 192 (const_expression -> intnumber .)
    LAND            reduce using rule 192 (const_expression -> intnumber .)
    LOR             reduce using rule 192 (const_expression -> intnumber .)
    COND            reduce using rule 192 (const_expression -> intnumber .)
    RPAREN          reduce using rule 192 (const_expression -> intnumber .)
    LBRACE          reduce using rule 192 (const_expression -> intnumber .)
    RBRACE          reduce using rule 192 (const_expression -> intnumber .)
    COMMA           reduce using rule 192 (const_expression -> intnumber .)
    COLON           reduce using rule 192 (const_expression -> intnumber .)
    SEMICOLON       reduce using rule 192 (const_expression -> intnumber .)
    PLUSCOLON       reduce using rule 192 (const_expression -> intnumber .)
    MINUSCOLON      reduce using rule 192 (const_expression -> intnumber .)
    RBRACKET        reduce using rule 192 (const_expression -> intnumber .)


state 112

    (193) const_expression -> floatnumber .

    TIMES           reduce using rule 193 (const_expression -> floatnumber .)
    POWER           reduce using rule 193 (const_expression -> floatnumber .)
    DIVIDE          reduce using rule 193 (const_expression -> floatnumber .)
    MOD             reduce using rule 193 (const_expression -> floatnumber .)
    PLUS            reduce using rule 193 (const_expression -> floatnumber .)
    MINUS           reduce using rule 193 (const_expression -> floatnumber .)
    LSHIFT          reduce using rule 193 (const_expression -> floatnumber .)
    RSHIFT          reduce using rule 193 (const_expression -> floatnumber .)
    LSHIFTA         reduce using rule 193 (const_expression -> floatnumber .)
    RSHIFTA         reduce using rule 193 (const_expression -> floatnumber .)
    LT              reduce using rule 193 (const_expression -> floatnumber .)
    GT              reduce using rule 193 (const_expression -> floatnumber .)
    LE              reduce using rule 193 (const_expression -> floatnumber .)
    GE              reduce using rule 193 (const_expression -> floatnumber .)
    EQ              reduce using rule 193 (const_expression -> floatnumber .)
    NE              reduce using rule 193 (const_expression -> floatnumber .)
    EQL             reduce using rule 193 (const_expression -> floatnumber .)
    NEL             reduce using rule 193 (const_expression -> floatnumber .)
    AND             reduce using rule 193 (const_expression -> floatnumber .)
    XOR             reduce using rule 193 (const_expression -> floatnumber .)
    XNOR            reduce using rule 193 (const_expression -> floatnumber .)
    OR              reduce using rule 193 (const_expression -> floatnumber .)
    LAND            reduce using rule 193 (const_expression -> floatnumber .)
    LOR             reduce using rule 193 (const_expression -> floatnumber .)
    COND            reduce using rule 193 (const_expression -> floatnumber .)
    RPAREN          reduce using rule 193 (const_expression -> floatnumber .)
    LBRACE          reduce using rule 193 (const_expression -> floatnumber .)
    RBRACE          reduce using rule 193 (const_expression -> floatnumber .)
    COMMA           reduce using rule 193 (const_expression -> floatnumber .)
    COLON           reduce using rule 193 (const_expression -> floatnumber .)
    SEMICOLON       reduce using rule 193 (const_expression -> floatnumber .)
    PLUSCOLON       reduce using rule 193 (const_expression -> floatnumber .)
    MINUSCOLON      reduce using rule 193 (const_expression -> floatnumber .)
    RBRACKET        reduce using rule 193 (const_expression -> floatnumber .)


state 113

    (194) const_expression -> stringliteral .

    TIMES           reduce using rule 194 (const_expression -> stringliteral .)
    POWER           reduce using rule 194 (const_expression -> stringliteral .)
    DIVIDE          reduce using rule 194 (const_expression -> stringliteral .)
    MOD             reduce using rule 194 (const_expression -> stringliteral .)
    PLUS            reduce using rule 194 (const_expression -> stringliteral .)
    MINUS           reduce using rule 194 (const_expression -> stringliteral .)
    LSHIFT          reduce using rule 194 (const_expression -> stringliteral .)
    RSHIFT          reduce using rule 194 (const_expression -> stringliteral .)
    LSHIFTA         reduce using rule 194 (const_expression -> stringliteral .)
    RSHIFTA         reduce using rule 194 (const_expression -> stringliteral .)
    LT              reduce using rule 194 (const_expression -> stringliteral .)
    GT              reduce using rule 194 (const_expression -> stringliteral .)
    LE              reduce using rule 194 (const_expression -> stringliteral .)
    GE              reduce using rule 194 (const_expression -> stringliteral .)
    EQ              reduce using rule 194 (const_expression -> stringliteral .)
    NE              reduce using rule 194 (const_expression -> stringliteral .)
    EQL             reduce using rule 194 (const_expression -> stringliteral .)
    NEL             reduce using rule 194 (const_expression -> stringliteral .)
    AND             reduce using rule 194 (const_expression -> stringliteral .)
    XOR             reduce using rule 194 (const_expression -> stringliteral .)
    XNOR            reduce using rule 194 (const_expression -> stringliteral .)
    OR              reduce using rule 194 (const_expression -> stringliteral .)
    LAND            reduce using rule 194 (const_expression -> stringliteral .)
    LOR             reduce using rule 194 (const_expression -> stringliteral .)
    COND            reduce using rule 194 (const_expression -> stringliteral .)
    RPAREN          reduce using rule 194 (const_expression -> stringliteral .)
    LBRACE          reduce using rule 194 (const_expression -> stringliteral .)
    RBRACE          reduce using rule 194 (const_expression -> stringliteral .)
    COMMA           reduce using rule 194 (const_expression -> stringliteral .)
    COLON           reduce using rule 194 (const_expression -> stringliteral .)
    SEMICOLON       reduce using rule 194 (const_expression -> stringliteral .)
    PLUSCOLON       reduce using rule 194 (const_expression -> stringliteral .)
    MINUSCOLON      reduce using rule 194 (const_expression -> stringliteral .)
    RBRACKET        reduce using rule 194 (const_expression -> stringliteral .)


state 114

    (196) intnumber -> INTNUMBER_DEC .

    TIMES           reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    POWER           reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    DIVIDE          reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    MOD             reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    PLUS            reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    MINUS           reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    LSHIFT          reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    RSHIFT          reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    LSHIFTA         reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    RSHIFTA         reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    LT              reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    GT              reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    LE              reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    GE              reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    EQ              reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    NE              reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    EQL             reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    NEL             reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    AND             reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    XOR             reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    XNOR            reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    OR              reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    LAND            reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    LOR             reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    COND            reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    RPAREN          reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    LBRACE          reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    RBRACE          reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    COMMA           reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    COLON           reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    SEMICOLON       reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    PLUSCOLON       reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    MINUSCOLON      reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    RBRACKET        reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    ID              reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    LNOT            reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    NOT             reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    NAND            reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    NOR             reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    LPAREN          reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    DOLLER          reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    INTNUMBER_DEC   reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    SIGNED_INTNUMBER_DEC reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    INTNUMBER_BIN   reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    SIGNED_INTNUMBER_BIN reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    INTNUMBER_OCT   reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    SIGNED_INTNUMBER_OCT reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    INTNUMBER_HEX   reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    SIGNED_INTNUMBER_HEX reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    FLOATNUMBER     reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    STRING_LITERAL  reduce using rule 196 (intnumber -> INTNUMBER_DEC .)
    IF              reduce using rule 196 (intnumber -> INTNUMBER_DEC .)


state 115

    (197) intnumber -> SIGNED_INTNUMBER_DEC .

    TIMES           reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    POWER           reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    DIVIDE          reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    MOD             reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    PLUS            reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    MINUS           reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    LSHIFT          reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    RSHIFT          reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    LSHIFTA         reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    RSHIFTA         reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    LT              reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    GT              reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    LE              reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    GE              reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    EQ              reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    NE              reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    EQL             reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    NEL             reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    AND             reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    XOR             reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    XNOR            reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    OR              reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    LAND            reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    LOR             reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    COND            reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    RPAREN          reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    LBRACE          reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    RBRACE          reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    COMMA           reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    COLON           reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    SEMICOLON       reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    PLUSCOLON       reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    MINUSCOLON      reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    RBRACKET        reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    ID              reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    LNOT            reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    NOT             reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    NAND            reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    NOR             reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    LPAREN          reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    DOLLER          reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    INTNUMBER_DEC   reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    SIGNED_INTNUMBER_DEC reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    INTNUMBER_BIN   reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    SIGNED_INTNUMBER_BIN reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    INTNUMBER_OCT   reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    SIGNED_INTNUMBER_OCT reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    INTNUMBER_HEX   reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    SIGNED_INTNUMBER_HEX reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    FLOATNUMBER     reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    STRING_LITERAL  reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)
    IF              reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_DEC .)


state 116

    (198) intnumber -> INTNUMBER_BIN .

    TIMES           reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    POWER           reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    DIVIDE          reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    MOD             reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    PLUS            reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    MINUS           reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    LSHIFT          reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    RSHIFT          reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    LSHIFTA         reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    RSHIFTA         reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    LT              reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    GT              reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    LE              reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    GE              reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    EQ              reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    NE              reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    EQL             reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    NEL             reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    AND             reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    XOR             reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    XNOR            reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    OR              reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    LAND            reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    LOR             reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    COND            reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    RPAREN          reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    LBRACE          reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    RBRACE          reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    COMMA           reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    COLON           reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    SEMICOLON       reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    PLUSCOLON       reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    MINUSCOLON      reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    RBRACKET        reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    ID              reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    LNOT            reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    NOT             reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    NAND            reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    NOR             reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    LPAREN          reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    DOLLER          reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    INTNUMBER_DEC   reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    SIGNED_INTNUMBER_DEC reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    INTNUMBER_BIN   reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    SIGNED_INTNUMBER_BIN reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    INTNUMBER_OCT   reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    SIGNED_INTNUMBER_OCT reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    INTNUMBER_HEX   reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    SIGNED_INTNUMBER_HEX reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    FLOATNUMBER     reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    STRING_LITERAL  reduce using rule 198 (intnumber -> INTNUMBER_BIN .)
    IF              reduce using rule 198 (intnumber -> INTNUMBER_BIN .)


state 117

    (199) intnumber -> SIGNED_INTNUMBER_BIN .

    TIMES           reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    POWER           reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    DIVIDE          reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    MOD             reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    PLUS            reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    MINUS           reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    LSHIFT          reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    RSHIFT          reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    LSHIFTA         reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    RSHIFTA         reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    LT              reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    GT              reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    LE              reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    GE              reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    EQ              reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    NE              reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    EQL             reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    NEL             reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    AND             reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    XOR             reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    XNOR            reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    OR              reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    LAND            reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    LOR             reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    COND            reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    RPAREN          reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    LBRACE          reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    RBRACE          reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    COMMA           reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    COLON           reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    SEMICOLON       reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    PLUSCOLON       reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    MINUSCOLON      reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    RBRACKET        reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    ID              reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    LNOT            reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    NOT             reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    NAND            reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    NOR             reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    LPAREN          reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    DOLLER          reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    INTNUMBER_DEC   reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    SIGNED_INTNUMBER_DEC reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    INTNUMBER_BIN   reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    SIGNED_INTNUMBER_BIN reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    INTNUMBER_OCT   reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    SIGNED_INTNUMBER_OCT reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    INTNUMBER_HEX   reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    SIGNED_INTNUMBER_HEX reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    FLOATNUMBER     reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    STRING_LITERAL  reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)
    IF              reduce using rule 199 (intnumber -> SIGNED_INTNUMBER_BIN .)


state 118

    (200) intnumber -> INTNUMBER_OCT .

    TIMES           reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    POWER           reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    DIVIDE          reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    MOD             reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    PLUS            reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    MINUS           reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    LSHIFT          reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    RSHIFT          reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    LSHIFTA         reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    RSHIFTA         reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    LT              reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    GT              reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    LE              reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    GE              reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    EQ              reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    NE              reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    EQL             reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    NEL             reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    AND             reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    XOR             reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    XNOR            reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    OR              reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    LAND            reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    LOR             reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    COND            reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    RPAREN          reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    LBRACE          reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    RBRACE          reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    COMMA           reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    COLON           reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    SEMICOLON       reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    PLUSCOLON       reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    MINUSCOLON      reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    RBRACKET        reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    ID              reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    LNOT            reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    NOT             reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    NAND            reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    NOR             reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    LPAREN          reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    DOLLER          reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    INTNUMBER_DEC   reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    SIGNED_INTNUMBER_DEC reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    INTNUMBER_BIN   reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    SIGNED_INTNUMBER_BIN reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    INTNUMBER_OCT   reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    SIGNED_INTNUMBER_OCT reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    INTNUMBER_HEX   reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    SIGNED_INTNUMBER_HEX reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    FLOATNUMBER     reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    STRING_LITERAL  reduce using rule 200 (intnumber -> INTNUMBER_OCT .)
    IF              reduce using rule 200 (intnumber -> INTNUMBER_OCT .)


state 119

    (201) intnumber -> SIGNED_INTNUMBER_OCT .

    TIMES           reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    POWER           reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    DIVIDE          reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    MOD             reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    PLUS            reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    MINUS           reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    LSHIFT          reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    RSHIFT          reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    LSHIFTA         reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    RSHIFTA         reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    LT              reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    GT              reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    LE              reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    GE              reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    EQ              reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    NE              reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    EQL             reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    NEL             reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    AND             reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    XOR             reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    XNOR            reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    OR              reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    LAND            reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    LOR             reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    COND            reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    RPAREN          reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    LBRACE          reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    RBRACE          reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    COMMA           reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    COLON           reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    SEMICOLON       reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    PLUSCOLON       reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    MINUSCOLON      reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    RBRACKET        reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    ID              reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    LNOT            reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    NOT             reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    NAND            reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    NOR             reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    LPAREN          reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    DOLLER          reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    INTNUMBER_DEC   reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    SIGNED_INTNUMBER_DEC reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    INTNUMBER_BIN   reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    SIGNED_INTNUMBER_BIN reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    INTNUMBER_OCT   reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    SIGNED_INTNUMBER_OCT reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    INTNUMBER_HEX   reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    SIGNED_INTNUMBER_HEX reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    FLOATNUMBER     reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    STRING_LITERAL  reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)
    IF              reduce using rule 201 (intnumber -> SIGNED_INTNUMBER_OCT .)


state 120

    (202) intnumber -> INTNUMBER_HEX .

    TIMES           reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    POWER           reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    DIVIDE          reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    MOD             reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    PLUS            reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    MINUS           reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    LSHIFT          reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    RSHIFT          reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    LSHIFTA         reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    RSHIFTA         reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    LT              reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    GT              reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    LE              reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    GE              reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    EQ              reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    NE              reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    EQL             reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    NEL             reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    AND             reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    XOR             reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    XNOR            reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    OR              reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    LAND            reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    LOR             reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    COND            reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    RPAREN          reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    LBRACE          reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    RBRACE          reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    COMMA           reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    COLON           reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    SEMICOLON       reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    PLUSCOLON       reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    MINUSCOLON      reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    RBRACKET        reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    ID              reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    LNOT            reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    NOT             reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    NAND            reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    NOR             reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    LPAREN          reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    DOLLER          reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    INTNUMBER_DEC   reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    SIGNED_INTNUMBER_DEC reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    INTNUMBER_BIN   reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    SIGNED_INTNUMBER_BIN reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    INTNUMBER_OCT   reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    SIGNED_INTNUMBER_OCT reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    INTNUMBER_HEX   reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    SIGNED_INTNUMBER_HEX reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    FLOATNUMBER     reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    STRING_LITERAL  reduce using rule 202 (intnumber -> INTNUMBER_HEX .)
    IF              reduce using rule 202 (intnumber -> INTNUMBER_HEX .)


state 121

    (203) intnumber -> SIGNED_INTNUMBER_HEX .

    TIMES           reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    POWER           reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    DIVIDE          reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    MOD             reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    PLUS            reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    MINUS           reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    LSHIFT          reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    RSHIFT          reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    LSHIFTA         reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    RSHIFTA         reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    LT              reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    GT              reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    LE              reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    GE              reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    EQ              reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    NE              reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    EQL             reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    NEL             reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    AND             reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    XOR             reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    XNOR            reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    OR              reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    LAND            reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    LOR             reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    COND            reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    RPAREN          reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    LBRACE          reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    RBRACE          reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    COMMA           reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    COLON           reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    SEMICOLON       reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    PLUSCOLON       reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    MINUSCOLON      reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    RBRACKET        reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    ID              reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    LNOT            reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    NOT             reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    NAND            reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    NOR             reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    LPAREN          reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    DOLLER          reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    INTNUMBER_DEC   reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    SIGNED_INTNUMBER_DEC reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    INTNUMBER_BIN   reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    SIGNED_INTNUMBER_BIN reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    INTNUMBER_OCT   reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    SIGNED_INTNUMBER_OCT reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    INTNUMBER_HEX   reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    SIGNED_INTNUMBER_HEX reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    FLOATNUMBER     reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    STRING_LITERAL  reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)
    IF              reduce using rule 203 (intnumber -> SIGNED_INTNUMBER_HEX .)


state 122

    (195) floatnumber -> FLOATNUMBER .

    TIMES           reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    POWER           reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    DIVIDE          reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    MOD             reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    PLUS            reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    MINUS           reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    LSHIFT          reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    RSHIFT          reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    LSHIFTA         reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    RSHIFTA         reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    LT              reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    GT              reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    LE              reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    GE              reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    EQ              reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    NE              reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    EQL             reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    NEL             reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    AND             reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    XOR             reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    XNOR            reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    OR              reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    LAND            reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    LOR             reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    COND            reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    RPAREN          reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    LBRACE          reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    RBRACE          reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    COMMA           reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    COLON           reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    SEMICOLON       reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    PLUSCOLON       reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    MINUSCOLON      reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    RBRACKET        reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    ID              reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    LNOT            reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    NOT             reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    NAND            reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    NOR             reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    LPAREN          reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    DOLLER          reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    INTNUMBER_DEC   reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    SIGNED_INTNUMBER_DEC reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    INTNUMBER_BIN   reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    SIGNED_INTNUMBER_BIN reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    INTNUMBER_OCT   reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    SIGNED_INTNUMBER_OCT reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    INTNUMBER_HEX   reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    SIGNED_INTNUMBER_HEX reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    FLOATNUMBER     reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    STRING_LITERAL  reduce using rule 195 (floatnumber -> FLOATNUMBER .)
    IF              reduce using rule 195 (floatnumber -> FLOATNUMBER .)


state 123

    (204) stringliteral -> STRING_LITERAL .

    TIMES           reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    POWER           reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    DIVIDE          reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    MOD             reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    PLUS            reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    MINUS           reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    LSHIFT          reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    RSHIFT          reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    LSHIFTA         reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    RSHIFTA         reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    LT              reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    GT              reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    LE              reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    GE              reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    EQ              reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    NE              reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    EQL             reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    NEL             reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    AND             reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    XOR             reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    XNOR            reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    OR              reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    LAND            reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    LOR             reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    COND            reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    RPAREN          reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    LBRACE          reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    RBRACE          reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    COMMA           reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    COLON           reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    PLUSCOLON       reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    MINUSCOLON      reduce using rule 204 (stringliteral -> STRING_LITERAL .)
    RBRACKET        reduce using rule 204 (stringliteral -> STRING_LITERAL .)


state 124

    (9) moduledef -> MODULE modulename paramlist portlist items ENDMODULE .

    MODULE          reduce using rule 9 (moduledef -> MODULE modulename paramlist portlist items ENDMODULE .)
    LPAREN          reduce using rule 9 (moduledef -> MODULE modulename paramlist portlist items ENDMODULE .)
    $end            reduce using rule 9 (moduledef -> MODULE modulename paramlist portlist items ENDMODULE .)


state 125

    (60) items -> items item .

    ENDMODULE       reduce using rule 60 (items -> items item .)
    GENERATE        reduce using rule 60 (items -> items item .)
    INTEGER         reduce using rule 60 (items -> items item .)
    REAL            reduce using rule 60 (items -> items item .)
    PARAMETER       reduce using rule 60 (items -> items item .)
    LOCALPARAM      reduce using rule 60 (items -> items item .)
    GENVAR          reduce using rule 60 (items -> items item .)
    ASSIGN          reduce using rule 60 (items -> items item .)
    ALWAYS          reduce using rule 60 (items -> items item .)
    ALWAYS_FF       reduce using rule 60 (items -> items item .)
    ALWAYS_COMB     reduce using rule 60 (items -> items item .)
    ALWAYS_LATCH    reduce using rule 60 (items -> items item .)
    INITIAL         reduce using rule 60 (items -> items item .)
    ID              reduce using rule 60 (items -> items item .)
    SENS_OR         reduce using rule 60 (items -> items item .)
    FUNCTION        reduce using rule 60 (items -> items item .)
    TASK            reduce using rule 60 (items -> items item .)
    LPAREN          reduce using rule 60 (items -> items item .)
    INPUT           reduce using rule 60 (items -> items item .)
    OUTPUT          reduce using rule 60 (items -> items item .)
    INOUT           reduce using rule 60 (items -> items item .)
    TRI             reduce using rule 60 (items -> items item .)
    REG             reduce using rule 60 (items -> items item .)
    LOGIC           reduce using rule 60 (items -> items item .)
    WIRE            reduce using rule 60 (items -> items item .)
    SIGNED          reduce using rule 60 (items -> items item .)
    SUPPLY0         reduce using rule 60 (items -> items item .)
    SUPPLY1         reduce using rule 60 (items -> items item .)


state 126

    (343) generate -> GENERATE generate_items . ENDGENERATE
    (345) generate_items -> generate_items . generate_item
    (347) generate_item -> . standard_item
    (348) generate_item -> . generate_if
    (349) generate_item -> . generate_for
    (65) standard_item -> . decl
    (66) standard_item -> . integerdecl
    (67) standard_item -> . realdecl
    (68) standard_item -> . declassign
    (69) standard_item -> . parameterdecl
    (70) standard_item -> . localparamdecl
    (71) standard_item -> . genvardecl
    (72) standard_item -> . assignment
    (73) standard_item -> . always
    (74) standard_item -> . always_ff
    (75) standard_item -> . always_comb
    (76) standard_item -> . always_latch
    (77) standard_item -> . initial
    (78) standard_item -> . instance
    (79) standard_item -> . function
    (80) standard_item -> . task
    (81) standard_item -> . pragma
    (352) generate_if -> . IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (353) generate_if -> . IF LPAREN cond RPAREN gif_true_item
    (358) generate_for -> . FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
    (82) decl -> . sigtypes declnamelist SEMICOLON
    (83) decl -> . sigtypes width declnamelist SEMICOLON
    (92) integerdecl -> . INTEGER integernamelist SEMICOLON
    (93) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (98) realdecl -> . REAL realnamelist SEMICOLON
    (88) declassign -> . sigtypes declassign_element SEMICOLON
    (89) declassign -> . sigtypes width declassign_element SEMICOLON
    (102) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (103) parameterdecl -> . PARAMETER SIGNED param_substitution_list SEMICOLON
    (104) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (105) parameterdecl -> . PARAMETER SIGNED width param_substitution_list SEMICOLON
    (106) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (107) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (108) localparamdecl -> . LOCALPARAM SIGNED param_substitution_list SEMICOLON
    (109) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (110) localparamdecl -> . LOCALPARAM SIGNED width param_substitution_list SEMICOLON
    (111) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (339) genvardecl -> . GENVAR genvarlist SEMICOLON
    (115) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (116) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (205) always -> . ALWAYS senslist always_statement
    (206) always_ff -> . ALWAYS_FF senslist always_statement
    (207) always_comb -> . ALWAYS_COMB senslist always_statement
    (208) always_latch -> . ALWAYS_LATCH senslist always_statement
    (300) initial -> . INITIAL initial_statement
    (307) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (308) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (313) instance -> . ID instance_bodylist_noname SEMICOLON
    (314) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (368) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (369) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (370) function -> . FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION
    (389) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

    ENDGENERATE     shift and go to state 286
    IF              shift and go to state 132
    FOR             shift and go to state 133
    INTEGER         shift and go to state 48
    REAL            shift and go to state 50
    PARAMETER       shift and go to state 51
    LOCALPARAM      shift and go to state 52
    GENVAR          shift and go to state 53
    ASSIGN          shift and go to state 54
    ALWAYS          shift and go to state 55
    ALWAYS_FF       shift and go to state 56
    ALWAYS_COMB     shift and go to state 57
    ALWAYS_LATCH    shift and go to state 58
    INITIAL         shift and go to state 59
    ID              shift and go to state 60
    SENS_OR         shift and go to state 61
    FUNCTION        shift and go to state 62
    TASK            shift and go to state 63
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 65
    OUTPUT          shift and go to state 66
    INOUT           shift and go to state 67
    TRI             shift and go to state 68
    REG             shift and go to state 69
    LOGIC           shift and go to state 70
    WIRE            shift and go to state 71
    SIGNED          shift and go to state 49
    SUPPLY0         shift and go to state 72
    SUPPLY1         shift and go to state 73

    generate_item                  shift and go to state 287
    standard_item                  shift and go to state 129
    generate_if                    shift and go to state 130
    generate_for                   shift and go to state 131
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    always_ff                      shift and go to state 38
    always_comb                    shift and go to state 39
    always_latch                   shift and go to state 40
    initial                        shift and go to state 41
    instance                       shift and go to state 42
    function                       shift and go to state 43
    task                           shift and go to state 44
    pragma                         shift and go to state 45
    sigtypes                       shift and go to state 47
    sigtype                        shift and go to state 64

state 127

    (344) generate_items -> empty .

    ENDGENERATE     reduce using rule 344 (generate_items -> empty .)
    IF              reduce using rule 344 (generate_items -> empty .)
    FOR             reduce using rule 344 (generate_items -> empty .)
    INTEGER         reduce using rule 344 (generate_items -> empty .)
    REAL            reduce using rule 344 (generate_items -> empty .)
    PARAMETER       reduce using rule 344 (generate_items -> empty .)
    LOCALPARAM      reduce using rule 344 (generate_items -> empty .)
    GENVAR          reduce using rule 344 (generate_items -> empty .)
    ASSIGN          reduce using rule 344 (generate_items -> empty .)
    ALWAYS          reduce using rule 344 (generate_items -> empty .)
    ALWAYS_FF       reduce using rule 344 (generate_items -> empty .)
    ALWAYS_COMB     reduce using rule 344 (generate_items -> empty .)
    ALWAYS_LATCH    reduce using rule 344 (generate_items -> empty .)
    INITIAL         reduce using rule 344 (generate_items -> empty .)
    ID              reduce using rule 344 (generate_items -> empty .)
    SENS_OR         reduce using rule 344 (generate_items -> empty .)
    FUNCTION        reduce using rule 344 (generate_items -> empty .)
    TASK            reduce using rule 344 (generate_items -> empty .)
    LPAREN          reduce using rule 344 (generate_items -> empty .)
    INPUT           reduce using rule 344 (generate_items -> empty .)
    OUTPUT          reduce using rule 344 (generate_items -> empty .)
    INOUT           reduce using rule 344 (generate_items -> empty .)
    TRI             reduce using rule 344 (generate_items -> empty .)
    REG             reduce using rule 344 (generate_items -> empty .)
    LOGIC           reduce using rule 344 (generate_items -> empty .)
    WIRE            reduce using rule 344 (generate_items -> empty .)
    SIGNED          reduce using rule 344 (generate_items -> empty .)
    SUPPLY0         reduce using rule 344 (generate_items -> empty .)
    SUPPLY1         reduce using rule 344 (generate_items -> empty .)
    END             reduce using rule 344 (generate_items -> empty .)


state 128

    (346) generate_items -> generate_item .

    ENDGENERATE     reduce using rule 346 (generate_items -> generate_item .)
    IF              reduce using rule 346 (generate_items -> generate_item .)
    FOR             reduce using rule 346 (generate_items -> generate_item .)
    INTEGER         reduce using rule 346 (generate_items -> generate_item .)
    REAL            reduce using rule 346 (generate_items -> generate_item .)
    PARAMETER       reduce using rule 346 (generate_items -> generate_item .)
    LOCALPARAM      reduce using rule 346 (generate_items -> generate_item .)
    GENVAR          reduce using rule 346 (generate_items -> generate_item .)
    ASSIGN          reduce using rule 346 (generate_items -> generate_item .)
    ALWAYS          reduce using rule 346 (generate_items -> generate_item .)
    ALWAYS_FF       reduce using rule 346 (generate_items -> generate_item .)
    ALWAYS_COMB     reduce using rule 346 (generate_items -> generate_item .)
    ALWAYS_LATCH    reduce using rule 346 (generate_items -> generate_item .)
    INITIAL         reduce using rule 346 (generate_items -> generate_item .)
    ID              reduce using rule 346 (generate_items -> generate_item .)
    SENS_OR         reduce using rule 346 (generate_items -> generate_item .)
    FUNCTION        reduce using rule 346 (generate_items -> generate_item .)
    TASK            reduce using rule 346 (generate_items -> generate_item .)
    LPAREN          reduce using rule 346 (generate_items -> generate_item .)
    INPUT           reduce using rule 346 (generate_items -> generate_item .)
    OUTPUT          reduce using rule 346 (generate_items -> generate_item .)
    INOUT           reduce using rule 346 (generate_items -> generate_item .)
    TRI             reduce using rule 346 (generate_items -> generate_item .)
    REG             reduce using rule 346 (generate_items -> generate_item .)
    LOGIC           reduce using rule 346 (generate_items -> generate_item .)
    WIRE            reduce using rule 346 (generate_items -> generate_item .)
    SIGNED          reduce using rule 346 (generate_items -> generate_item .)
    SUPPLY0         reduce using rule 346 (generate_items -> generate_item .)
    SUPPLY1         reduce using rule 346 (generate_items -> generate_item .)
    END             reduce using rule 346 (generate_items -> generate_item .)


state 129

    (347) generate_item -> standard_item .

    ENDGENERATE     reduce using rule 347 (generate_item -> standard_item .)
    IF              reduce using rule 347 (generate_item -> standard_item .)
    FOR             reduce using rule 347 (generate_item -> standard_item .)
    INTEGER         reduce using rule 347 (generate_item -> standard_item .)
    REAL            reduce using rule 347 (generate_item -> standard_item .)
    PARAMETER       reduce using rule 347 (generate_item -> standard_item .)
    LOCALPARAM      reduce using rule 347 (generate_item -> standard_item .)
    GENVAR          reduce using rule 347 (generate_item -> standard_item .)
    ASSIGN          reduce using rule 347 (generate_item -> standard_item .)
    ALWAYS          reduce using rule 347 (generate_item -> standard_item .)
    ALWAYS_FF       reduce using rule 347 (generate_item -> standard_item .)
    ALWAYS_COMB     reduce using rule 347 (generate_item -> standard_item .)
    ALWAYS_LATCH    reduce using rule 347 (generate_item -> standard_item .)
    INITIAL         reduce using rule 347 (generate_item -> standard_item .)
    ID              reduce using rule 347 (generate_item -> standard_item .)
    SENS_OR         reduce using rule 347 (generate_item -> standard_item .)
    FUNCTION        reduce using rule 347 (generate_item -> standard_item .)
    TASK            reduce using rule 347 (generate_item -> standard_item .)
    LPAREN          reduce using rule 347 (generate_item -> standard_item .)
    INPUT           reduce using rule 347 (generate_item -> standard_item .)
    OUTPUT          reduce using rule 347 (generate_item -> standard_item .)
    INOUT           reduce using rule 347 (generate_item -> standard_item .)
    TRI             reduce using rule 347 (generate_item -> standard_item .)
    REG             reduce using rule 347 (generate_item -> standard_item .)
    LOGIC           reduce using rule 347 (generate_item -> standard_item .)
    WIRE            reduce using rule 347 (generate_item -> standard_item .)
    SIGNED          reduce using rule 347 (generate_item -> standard_item .)
    SUPPLY0         reduce using rule 347 (generate_item -> standard_item .)
    SUPPLY1         reduce using rule 347 (generate_item -> standard_item .)
    ELSE            reduce using rule 347 (generate_item -> standard_item .)
    END             reduce using rule 347 (generate_item -> standard_item .)


state 130

    (348) generate_item -> generate_if .

    ENDGENERATE     reduce using rule 348 (generate_item -> generate_if .)
    IF              reduce using rule 348 (generate_item -> generate_if .)
    FOR             reduce using rule 348 (generate_item -> generate_if .)
    INTEGER         reduce using rule 348 (generate_item -> generate_if .)
    REAL            reduce using rule 348 (generate_item -> generate_if .)
    PARAMETER       reduce using rule 348 (generate_item -> generate_if .)
    LOCALPARAM      reduce using rule 348 (generate_item -> generate_if .)
    GENVAR          reduce using rule 348 (generate_item -> generate_if .)
    ASSIGN          reduce using rule 348 (generate_item -> generate_if .)
    ALWAYS          reduce using rule 348 (generate_item -> generate_if .)
    ALWAYS_FF       reduce using rule 348 (generate_item -> generate_if .)
    ALWAYS_COMB     reduce using rule 348 (generate_item -> generate_if .)
    ALWAYS_LATCH    reduce using rule 348 (generate_item -> generate_if .)
    INITIAL         reduce using rule 348 (generate_item -> generate_if .)
    ID              reduce using rule 348 (generate_item -> generate_if .)
    SENS_OR         reduce using rule 348 (generate_item -> generate_if .)
    FUNCTION        reduce using rule 348 (generate_item -> generate_if .)
    TASK            reduce using rule 348 (generate_item -> generate_if .)
    LPAREN          reduce using rule 348 (generate_item -> generate_if .)
    INPUT           reduce using rule 348 (generate_item -> generate_if .)
    OUTPUT          reduce using rule 348 (generate_item -> generate_if .)
    INOUT           reduce using rule 348 (generate_item -> generate_if .)
    TRI             reduce using rule 348 (generate_item -> generate_if .)
    REG             reduce using rule 348 (generate_item -> generate_if .)
    LOGIC           reduce using rule 348 (generate_item -> generate_if .)
    WIRE            reduce using rule 348 (generate_item -> generate_if .)
    SIGNED          reduce using rule 348 (generate_item -> generate_if .)
    SUPPLY0         reduce using rule 348 (generate_item -> generate_if .)
    SUPPLY1         reduce using rule 348 (generate_item -> generate_if .)
    ELSE            reduce using rule 348 (generate_item -> generate_if .)
    END             reduce using rule 348 (generate_item -> generate_if .)


state 131

    (349) generate_item -> generate_for .

    ENDGENERATE     reduce using rule 349 (generate_item -> generate_for .)
    IF              reduce using rule 349 (generate_item -> generate_for .)
    FOR             reduce using rule 349 (generate_item -> generate_for .)
    INTEGER         reduce using rule 349 (generate_item -> generate_for .)
    REAL            reduce using rule 349 (generate_item -> generate_for .)
    PARAMETER       reduce using rule 349 (generate_item -> generate_for .)
    LOCALPARAM      reduce using rule 349 (generate_item -> generate_for .)
    GENVAR          reduce using rule 349 (generate_item -> generate_for .)
    ASSIGN          reduce using rule 349 (generate_item -> generate_for .)
    ALWAYS          reduce using rule 349 (generate_item -> generate_for .)
    ALWAYS_FF       reduce using rule 349 (generate_item -> generate_for .)
    ALWAYS_COMB     reduce using rule 349 (generate_item -> generate_for .)
    ALWAYS_LATCH    reduce using rule 349 (generate_item -> generate_for .)
    INITIAL         reduce using rule 349 (generate_item -> generate_for .)
    ID              reduce using rule 349 (generate_item -> generate_for .)
    SENS_OR         reduce using rule 349 (generate_item -> generate_for .)
    FUNCTION        reduce using rule 349 (generate_item -> generate_for .)
    TASK            reduce using rule 349 (generate_item -> generate_for .)
    LPAREN          reduce using rule 349 (generate_item -> generate_for .)
    INPUT           reduce using rule 349 (generate_item -> generate_for .)
    OUTPUT          reduce using rule 349 (generate_item -> generate_for .)
    INOUT           reduce using rule 349 (generate_item -> generate_for .)
    TRI             reduce using rule 349 (generate_item -> generate_for .)
    REG             reduce using rule 349 (generate_item -> generate_for .)
    LOGIC           reduce using rule 349 (generate_item -> generate_for .)
    WIRE            reduce using rule 349 (generate_item -> generate_for .)
    SIGNED          reduce using rule 349 (generate_item -> generate_for .)
    SUPPLY0         reduce using rule 349 (generate_item -> generate_for .)
    SUPPLY1         reduce using rule 349 (generate_item -> generate_for .)
    ELSE            reduce using rule 349 (generate_item -> generate_for .)
    END             reduce using rule 349 (generate_item -> generate_for .)


state 132

    (352) generate_if -> IF . LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (353) generate_if -> IF . LPAREN cond RPAREN gif_true_item

    LPAREN          shift and go to state 288


state 133

    (358) generate_for -> FOR . LPAREN forpre forcond forpost RPAREN generate_forcontent

    LPAREN          shift and go to state 289


state 134

    (82) decl -> sigtypes declnamelist . SEMICOLON
    (84) declnamelist -> declnamelist . COMMA declname

    SEMICOLON       shift and go to state 290
    COMMA           shift and go to state 291


state 135

    (83) decl -> sigtypes width . declnamelist SEMICOLON
    (89) declassign -> sigtypes width . declassign_element SEMICOLON
    (84) declnamelist -> . declnamelist COMMA declname
    (85) declnamelist -> . declname
    (90) declassign_element -> . ID EQUALS rvalue
    (91) declassign_element -> . delays ID EQUALS delays rvalue
    (86) declname -> . ID
    (87) declname -> . ID dimensions
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (413) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 140
    DELAY           shift and go to state 142

  ! ID              [ reduce using rule 413 (empty -> .) ]

    declnamelist                   shift and go to state 292
    declassign_element             shift and go to state 293
    declname                       shift and go to state 138
    delays                         shift and go to state 141
    empty                          shift and go to state 143

state 136

    (88) declassign -> sigtypes declassign_element . SEMICOLON

    SEMICOLON       shift and go to state 294


state 137

    (35) sigtypes -> sigtypes sigtype .

    LBRACKET        reduce using rule 35 (sigtypes -> sigtypes sigtype .)
    ID              reduce using rule 35 (sigtypes -> sigtypes sigtype .)
    INPUT           reduce using rule 35 (sigtypes -> sigtypes sigtype .)
    OUTPUT          reduce using rule 35 (sigtypes -> sigtypes sigtype .)
    INOUT           reduce using rule 35 (sigtypes -> sigtypes sigtype .)
    TRI             reduce using rule 35 (sigtypes -> sigtypes sigtype .)
    REG             reduce using rule 35 (sigtypes -> sigtypes sigtype .)
    LOGIC           reduce using rule 35 (sigtypes -> sigtypes sigtype .)
    WIRE            reduce using rule 35 (sigtypes -> sigtypes sigtype .)
    SIGNED          reduce using rule 35 (sigtypes -> sigtypes sigtype .)
    SUPPLY0         reduce using rule 35 (sigtypes -> sigtypes sigtype .)
    SUPPLY1         reduce using rule 35 (sigtypes -> sigtypes sigtype .)
    DELAY           reduce using rule 35 (sigtypes -> sigtypes sigtype .)


state 138

    (85) declnamelist -> declname .

    SEMICOLON       reduce using rule 85 (declnamelist -> declname .)
    COMMA           reduce using rule 85 (declnamelist -> declname .)


state 139

    (56) width -> LBRACKET . expression COLON expression RBRACKET
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 295
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 140

    (90) declassign_element -> ID . EQUALS rvalue
    (86) declname -> ID .
    (87) declname -> ID . dimensions
    (58) dimensions -> . dimensions length
    (59) dimensions -> . length
    (57) length -> . LBRACKET expression COLON expression RBRACKET

    EQUALS          shift and go to state 296
    SEMICOLON       reduce using rule 86 (declname -> ID .)
    COMMA           reduce using rule 86 (declname -> ID .)
    LBRACKET        shift and go to state 299

    dimensions                     shift and go to state 297
    length                         shift and go to state 298

state 141

    (91) declassign_element -> delays . ID EQUALS delays rvalue

    ID              shift and go to state 300


state 142

    (249) delays -> DELAY . LPAREN expression RPAREN
    (250) delays -> DELAY . identifier
    (251) delays -> DELAY . intnumber
    (252) delays -> DELAY . floatnumber
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET

    LPAREN          shift and go to state 301
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122

    identifier                     shift and go to state 302
    intnumber                      shift and go to state 303
    floatnumber                    shift and go to state 304
    scope                          shift and go to state 110
    pointer                        shift and go to state 305

state 143

    (253) delays -> empty .

    ID              reduce using rule 253 (delays -> empty .)
    LBRACE          reduce using rule 253 (delays -> empty .)
    MINUS           reduce using rule 253 (delays -> empty .)
    PLUS            reduce using rule 253 (delays -> empty .)
    LNOT            reduce using rule 253 (delays -> empty .)
    NOT             reduce using rule 253 (delays -> empty .)
    AND             reduce using rule 253 (delays -> empty .)
    NAND            reduce using rule 253 (delays -> empty .)
    NOR             reduce using rule 253 (delays -> empty .)
    OR              reduce using rule 253 (delays -> empty .)
    XOR             reduce using rule 253 (delays -> empty .)
    XNOR            reduce using rule 253 (delays -> empty .)
    LPAREN          reduce using rule 253 (delays -> empty .)
    DOLLER          reduce using rule 253 (delays -> empty .)
    INTNUMBER_DEC   reduce using rule 253 (delays -> empty .)
    SIGNED_INTNUMBER_DEC reduce using rule 253 (delays -> empty .)
    INTNUMBER_BIN   reduce using rule 253 (delays -> empty .)
    SIGNED_INTNUMBER_BIN reduce using rule 253 (delays -> empty .)
    INTNUMBER_OCT   reduce using rule 253 (delays -> empty .)
    SIGNED_INTNUMBER_OCT reduce using rule 253 (delays -> empty .)
    INTNUMBER_HEX   reduce using rule 253 (delays -> empty .)
    SIGNED_INTNUMBER_HEX reduce using rule 253 (delays -> empty .)
    FLOATNUMBER     reduce using rule 253 (delays -> empty .)
    STRING_LITERAL  reduce using rule 253 (delays -> empty .)
    IF              reduce using rule 253 (delays -> empty .)


state 144

    (92) integerdecl -> INTEGER integernamelist . SEMICOLON
    (94) integernamelist -> integernamelist . COMMA integername

    SEMICOLON       shift and go to state 306
    COMMA           shift and go to state 307


state 145

    (93) integerdecl -> INTEGER SIGNED . integernamelist SEMICOLON
    (94) integernamelist -> . integernamelist COMMA integername
    (95) integernamelist -> . integername
    (96) integername -> . ID EQUALS rvalue
    (97) integername -> . ID

    ID              shift and go to state 147

    integernamelist                shift and go to state 308
    integername                    shift and go to state 146

state 146

    (95) integernamelist -> integername .

    SEMICOLON       reduce using rule 95 (integernamelist -> integername .)
    COMMA           reduce using rule 95 (integernamelist -> integername .)


state 147

    (96) integername -> ID . EQUALS rvalue
    (97) integername -> ID .

    EQUALS          shift and go to state 309
    SEMICOLON       reduce using rule 97 (integername -> ID .)
    COMMA           reduce using rule 97 (integername -> ID .)


state 148

    (98) realdecl -> REAL realnamelist . SEMICOLON
    (99) realnamelist -> realnamelist . COMMA realname

    SEMICOLON       shift and go to state 310
    COMMA           shift and go to state 311


state 149

    (100) realnamelist -> realname .

    SEMICOLON       reduce using rule 100 (realnamelist -> realname .)
    COMMA           reduce using rule 100 (realnamelist -> realname .)


state 150

    (101) realname -> ID .

    SEMICOLON       reduce using rule 101 (realname -> ID .)
    COMMA           reduce using rule 101 (realname -> ID .)


state 151

    (102) parameterdecl -> PARAMETER param_substitution_list . SEMICOLON
    (112) param_substitution_list -> param_substitution_list . COMMA param_substitution

    SEMICOLON       shift and go to state 312
    COMMA           shift and go to state 313


state 152

    (103) parameterdecl -> PARAMETER SIGNED . param_substitution_list SEMICOLON
    (105) parameterdecl -> PARAMETER SIGNED . width param_substitution_list SEMICOLON
    (112) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (113) param_substitution_list -> . param_substitution
    (56) width -> . LBRACKET expression COLON expression RBRACKET
    (114) param_substitution -> . ID EQUALS rvalue

    LBRACKET        shift and go to state 139
    ID              shift and go to state 156

    param_substitution_list        shift and go to state 314
    width                          shift and go to state 315
    param_substitution             shift and go to state 155

state 153

    (104) parameterdecl -> PARAMETER width . param_substitution_list SEMICOLON
    (112) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (113) param_substitution_list -> . param_substitution
    (114) param_substitution -> . ID EQUALS rvalue

    ID              shift and go to state 156

    param_substitution_list        shift and go to state 316
    param_substitution             shift and go to state 155

state 154

    (106) parameterdecl -> PARAMETER INTEGER . param_substitution_list SEMICOLON
    (112) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (113) param_substitution_list -> . param_substitution
    (114) param_substitution -> . ID EQUALS rvalue

    ID              shift and go to state 156

    param_substitution_list        shift and go to state 317
    param_substitution             shift and go to state 155

state 155

    (113) param_substitution_list -> param_substitution .

    SEMICOLON       reduce using rule 113 (param_substitution_list -> param_substitution .)
    COMMA           reduce using rule 113 (param_substitution_list -> param_substitution .)
    RPAREN          reduce using rule 113 (param_substitution_list -> param_substitution .)


state 156

    (114) param_substitution -> ID . EQUALS rvalue

    EQUALS          shift and go to state 318


state 157

    (107) localparamdecl -> LOCALPARAM param_substitution_list . SEMICOLON
    (112) param_substitution_list -> param_substitution_list . COMMA param_substitution

    SEMICOLON       shift and go to state 319
    COMMA           shift and go to state 313


state 158

    (108) localparamdecl -> LOCALPARAM SIGNED . param_substitution_list SEMICOLON
    (110) localparamdecl -> LOCALPARAM SIGNED . width param_substitution_list SEMICOLON
    (112) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (113) param_substitution_list -> . param_substitution
    (56) width -> . LBRACKET expression COLON expression RBRACKET
    (114) param_substitution -> . ID EQUALS rvalue

    LBRACKET        shift and go to state 139
    ID              shift and go to state 156

    param_substitution_list        shift and go to state 320
    width                          shift and go to state 321
    param_substitution             shift and go to state 155

state 159

    (109) localparamdecl -> LOCALPARAM width . param_substitution_list SEMICOLON
    (112) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (113) param_substitution_list -> . param_substitution
    (114) param_substitution -> . ID EQUALS rvalue

    ID              shift and go to state 156

    param_substitution_list        shift and go to state 322
    param_substitution             shift and go to state 155

state 160

    (111) localparamdecl -> LOCALPARAM INTEGER . param_substitution_list SEMICOLON
    (112) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (113) param_substitution_list -> . param_substitution
    (114) param_substitution -> . ID EQUALS rvalue

    ID              shift and go to state 156

    param_substitution_list        shift and go to state 323
    param_substitution             shift and go to state 155

state 161

    (339) genvardecl -> GENVAR genvarlist . SEMICOLON
    (340) genvarlist -> genvarlist . COMMA genvar

    SEMICOLON       shift and go to state 324
    COMMA           shift and go to state 325


state 162

    (341) genvarlist -> genvar .

    SEMICOLON       reduce using rule 341 (genvarlist -> genvar .)
    COMMA           reduce using rule 341 (genvarlist -> genvar .)


state 163

    (342) genvar -> ID .

    SEMICOLON       reduce using rule 342 (genvar -> ID .)
    COMMA           reduce using rule 342 (genvar -> ID .)


state 164

    (115) assignment -> ASSIGN lvalue . EQUALS rvalue SEMICOLON

    EQUALS          shift and go to state 326


state 165

    (116) assignment -> ASSIGN delays . lvalue EQUALS delays rvalue SEMICOLON
    (131) lvalue -> . lpartselect
    (132) lvalue -> . lpointer
    (133) lvalue -> . lconcat
    (134) lvalue -> . identifier
    (117) lpartselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (118) lpartselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (119) lpartselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (120) lpartselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (121) lpartselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (122) lpartselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (123) lpointer -> . pointer
    (124) lconcat -> . LBRACE lconcatlist RBRACE
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT

    LBRACE          shift and go to state 171
    ID              shift and go to state 88

    lvalue                         shift and go to state 327
    lpartselect                    shift and go to state 166
    lpointer                       shift and go to state 167
    lconcat                        shift and go to state 168
    identifier                     shift and go to state 169
    pointer                        shift and go to state 170
    scope                          shift and go to state 110

state 166

    (131) lvalue -> lpartselect .

    EQUALS          reduce using rule 131 (lvalue -> lpartselect .)
    LE              reduce using rule 131 (lvalue -> lpartselect .)


state 167

    (132) lvalue -> lpointer .

    EQUALS          reduce using rule 132 (lvalue -> lpointer .)
    LE              reduce using rule 132 (lvalue -> lpointer .)


state 168

    (133) lvalue -> lconcat .

    EQUALS          reduce using rule 133 (lvalue -> lconcat .)
    LE              reduce using rule 133 (lvalue -> lconcat .)


state 169

    (134) lvalue -> identifier .
    (120) lpartselect -> identifier . LBRACKET expression COLON expression RBRACKET
    (121) lpartselect -> identifier . LBRACKET expression PLUSCOLON expression RBRACKET
    (122) lpartselect -> identifier . LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> identifier . LBRACKET expression RBRACKET
    (407) scope -> identifier . DOT

    EQUALS          reduce using rule 134 (lvalue -> identifier .)
    LE              reduce using rule 134 (lvalue -> identifier .)
    LBRACKET        shift and go to state 328
    DOT             shift and go to state 280


state 170

    (117) lpartselect -> pointer . LBRACKET expression COLON expression RBRACKET
    (118) lpartselect -> pointer . LBRACKET expression PLUSCOLON expression RBRACKET
    (119) lpartselect -> pointer . LBRACKET expression MINUSCOLON expression RBRACKET
    (123) lpointer -> pointer .
    (191) pointer -> pointer . LBRACKET expression RBRACKET
    (408) scope -> pointer . DOT

    LBRACKET        shift and go to state 329
    EQUALS          reduce using rule 123 (lpointer -> pointer .)
    LE              reduce using rule 123 (lpointer -> pointer .)
    DOT             shift and go to state 277


state 171

    (124) lconcat -> LBRACE . lconcatlist RBRACE
    (125) lconcatlist -> . lconcatlist COMMA lconcat_one
    (126) lconcatlist -> . lconcat_one
    (127) lconcat_one -> . identifier
    (128) lconcat_one -> . lpartselect
    (129) lconcat_one -> . lpointer
    (130) lconcat_one -> . lconcat
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (117) lpartselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (118) lpartselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (119) lpartselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (120) lpartselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (121) lpartselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (122) lpartselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (123) lpointer -> . pointer
    (124) lconcat -> . LBRACE lconcatlist RBRACE
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET

    ID              shift and go to state 88
    LBRACE          shift and go to state 171

    lconcatlist                    shift and go to state 330
    lconcat_one                    shift and go to state 331
    identifier                     shift and go to state 332
    lpartselect                    shift and go to state 333
    lpointer                       shift and go to state 334
    lconcat                        shift and go to state 335
    scope                          shift and go to state 110
    pointer                        shift and go to state 336

state 172

    (205) always -> ALWAYS senslist . always_statement
    (245) always_statement -> . basic_statement
    (229) basic_statement -> . if_statement
    (230) basic_statement -> . case_statement
    (231) basic_statement -> . casex_statement
    (232) basic_statement -> . casez_statement
    (233) basic_statement -> . unique_case_statement
    (234) basic_statement -> . for_statement
    (235) basic_statement -> . while_statement
    (236) basic_statement -> . event_statement
    (237) basic_statement -> . wait_statement
    (238) basic_statement -> . forever_statement
    (239) basic_statement -> . block
    (240) basic_statement -> . namedblock
    (241) basic_statement -> . parallelblock
    (242) basic_statement -> . blocking_substitution
    (243) basic_statement -> . nonblocking_substitution
    (244) basic_statement -> . single_statement
    (271) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (272) if_statement -> . IF LPAREN cond RPAREN true_statement
    (273) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (274) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (289) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (290) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (291) casez_statement -> . CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (292) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (279) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (287) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (302) event_statement -> . senslist SEMICOLON
    (303) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (306) forever_statement -> . FOREVER basic_statement
    (254) block -> . BEGIN block_statements END
    (255) block -> . BEGIN END
    (259) namedblock -> . BEGIN COLON ID namedblock_statements END
    (260) namedblock -> . BEGIN COLON ID END
    (269) parallelblock -> . FORK block_statements JOIN
    (270) parallelblock -> . FORK JOIN
    (246) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (248) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (410) single_statement -> . DELAY expression SEMICOLON
    (411) single_statement -> . systemcall SEMICOLON
    (412) single_statement -> . disable SEMICOLON
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (209) senslist -> . AT LPAREN edgesigs RPAREN
    (217) senslist -> . empty
    (218) senslist -> . AT levelsig
    (219) senslist -> . AT LPAREN levelsigs RPAREN
    (227) senslist -> . AT TIMES
    (228) senslist -> . AT LPAREN TIMES RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (409) disable -> . DISABLE ID
    (413) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 196
    CASE            shift and go to state 198
    CASEX           shift and go to state 199
    CASEZ           shift and go to state 200
    UNIQUE          shift and go to state 201
    FOR             shift and go to state 202
    WHILE           shift and go to state 203
    WAIT            shift and go to state 205
    FOREVER         shift and go to state 206
    BEGIN           shift and go to state 207
    FORK            shift and go to state 208
    DELAY           shift and go to state 209
    AT              shift and go to state 173
    DOLLER          shift and go to state 109
    DISABLE         shift and go to state 213
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    SEMICOLON       reduce using rule 413 (empty -> .)

  ! IF              [ reduce using rule 413 (empty -> .) ]

    senslist                       shift and go to state 204
    always_statement               shift and go to state 337
    basic_statement                shift and go to state 338
    if_statement                   shift and go to state 180
    case_statement                 shift and go to state 181
    casex_statement                shift and go to state 182
    casez_statement                shift and go to state 183
    unique_case_statement          shift and go to state 184
    for_statement                  shift and go to state 185
    while_statement                shift and go to state 186
    event_statement                shift and go to state 187
    wait_statement                 shift and go to state 188
    forever_statement              shift and go to state 189
    block                          shift and go to state 190
    namedblock                     shift and go to state 191
    parallelblock                  shift and go to state 192
    blocking_substitution          shift and go to state 193
    nonblocking_substitution       shift and go to state 194
    single_statement               shift and go to state 195
    delays                         shift and go to state 197
    systemcall                     shift and go to state 210
    disable                        shift and go to state 211
    empty                          shift and go to state 212

state 173

    (209) senslist -> AT . LPAREN edgesigs RPAREN
    (218) senslist -> AT . levelsig
    (219) senslist -> AT . LPAREN levelsigs RPAREN
    (227) senslist -> AT . TIMES
    (228) senslist -> AT . LPAREN TIMES RPAREN
    (220) levelsig -> . levelsig_base
    (221) levelsig_base -> . identifier
    (222) levelsig_base -> . pointer
    (223) levelsig_base -> . partselect
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT

    LPAREN          shift and go to state 339
    TIMES           shift and go to state 341
    ID              shift and go to state 88

    levelsig                       shift and go to state 340
    levelsig_base                  shift and go to state 342
    identifier                     shift and go to state 343
    pointer                        shift and go to state 344
    partselect                     shift and go to state 345
    scope                          shift and go to state 110

state 174

    (217) senslist -> empty .

    IF              reduce using rule 217 (senslist -> empty .)
    CASE            reduce using rule 217 (senslist -> empty .)
    CASEX           reduce using rule 217 (senslist -> empty .)
    CASEZ           reduce using rule 217 (senslist -> empty .)
    UNIQUE          reduce using rule 217 (senslist -> empty .)
    FOR             reduce using rule 217 (senslist -> empty .)
    WHILE           reduce using rule 217 (senslist -> empty .)
    WAIT            reduce using rule 217 (senslist -> empty .)
    FOREVER         reduce using rule 217 (senslist -> empty .)
    BEGIN           reduce using rule 217 (senslist -> empty .)
    FORK            reduce using rule 217 (senslist -> empty .)
    DELAY           reduce using rule 217 (senslist -> empty .)
    AT              reduce using rule 217 (senslist -> empty .)
    DOLLER          reduce using rule 217 (senslist -> empty .)
    DISABLE         reduce using rule 217 (senslist -> empty .)
    LBRACE          reduce using rule 217 (senslist -> empty .)
    ID              reduce using rule 217 (senslist -> empty .)
    SEMICOLON       reduce using rule 217 (senslist -> empty .)


state 175

    (206) always_ff -> ALWAYS_FF senslist . always_statement
    (245) always_statement -> . basic_statement
    (229) basic_statement -> . if_statement
    (230) basic_statement -> . case_statement
    (231) basic_statement -> . casex_statement
    (232) basic_statement -> . casez_statement
    (233) basic_statement -> . unique_case_statement
    (234) basic_statement -> . for_statement
    (235) basic_statement -> . while_statement
    (236) basic_statement -> . event_statement
    (237) basic_statement -> . wait_statement
    (238) basic_statement -> . forever_statement
    (239) basic_statement -> . block
    (240) basic_statement -> . namedblock
    (241) basic_statement -> . parallelblock
    (242) basic_statement -> . blocking_substitution
    (243) basic_statement -> . nonblocking_substitution
    (244) basic_statement -> . single_statement
    (271) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (272) if_statement -> . IF LPAREN cond RPAREN true_statement
    (273) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (274) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (289) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (290) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (291) casez_statement -> . CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (292) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (279) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (287) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (302) event_statement -> . senslist SEMICOLON
    (303) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (306) forever_statement -> . FOREVER basic_statement
    (254) block -> . BEGIN block_statements END
    (255) block -> . BEGIN END
    (259) namedblock -> . BEGIN COLON ID namedblock_statements END
    (260) namedblock -> . BEGIN COLON ID END
    (269) parallelblock -> . FORK block_statements JOIN
    (270) parallelblock -> . FORK JOIN
    (246) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (248) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (410) single_statement -> . DELAY expression SEMICOLON
    (411) single_statement -> . systemcall SEMICOLON
    (412) single_statement -> . disable SEMICOLON
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (209) senslist -> . AT LPAREN edgesigs RPAREN
    (217) senslist -> . empty
    (218) senslist -> . AT levelsig
    (219) senslist -> . AT LPAREN levelsigs RPAREN
    (227) senslist -> . AT TIMES
    (228) senslist -> . AT LPAREN TIMES RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (409) disable -> . DISABLE ID
    (413) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 196
    CASE            shift and go to state 198
    CASEX           shift and go to state 199
    CASEZ           shift and go to state 200
    UNIQUE          shift and go to state 201
    FOR             shift and go to state 202
    WHILE           shift and go to state 203
    WAIT            shift and go to state 205
    FOREVER         shift and go to state 206
    BEGIN           shift and go to state 207
    FORK            shift and go to state 208
    DELAY           shift and go to state 209
    AT              shift and go to state 173
    DOLLER          shift and go to state 109
    DISABLE         shift and go to state 213
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    SEMICOLON       reduce using rule 413 (empty -> .)

  ! IF              [ reduce using rule 413 (empty -> .) ]

    senslist                       shift and go to state 204
    always_statement               shift and go to state 346
    basic_statement                shift and go to state 338
    if_statement                   shift and go to state 180
    case_statement                 shift and go to state 181
    casex_statement                shift and go to state 182
    casez_statement                shift and go to state 183
    unique_case_statement          shift and go to state 184
    for_statement                  shift and go to state 185
    while_statement                shift and go to state 186
    event_statement                shift and go to state 187
    wait_statement                 shift and go to state 188
    forever_statement              shift and go to state 189
    block                          shift and go to state 190
    namedblock                     shift and go to state 191
    parallelblock                  shift and go to state 192
    blocking_substitution          shift and go to state 193
    nonblocking_substitution       shift and go to state 194
    single_statement               shift and go to state 195
    delays                         shift and go to state 197
    systemcall                     shift and go to state 210
    disable                        shift and go to state 211
    empty                          shift and go to state 212

state 176

    (207) always_comb -> ALWAYS_COMB senslist . always_statement
    (245) always_statement -> . basic_statement
    (229) basic_statement -> . if_statement
    (230) basic_statement -> . case_statement
    (231) basic_statement -> . casex_statement
    (232) basic_statement -> . casez_statement
    (233) basic_statement -> . unique_case_statement
    (234) basic_statement -> . for_statement
    (235) basic_statement -> . while_statement
    (236) basic_statement -> . event_statement
    (237) basic_statement -> . wait_statement
    (238) basic_statement -> . forever_statement
    (239) basic_statement -> . block
    (240) basic_statement -> . namedblock
    (241) basic_statement -> . parallelblock
    (242) basic_statement -> . blocking_substitution
    (243) basic_statement -> . nonblocking_substitution
    (244) basic_statement -> . single_statement
    (271) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (272) if_statement -> . IF LPAREN cond RPAREN true_statement
    (273) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (274) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (289) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (290) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (291) casez_statement -> . CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (292) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (279) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (287) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (302) event_statement -> . senslist SEMICOLON
    (303) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (306) forever_statement -> . FOREVER basic_statement
    (254) block -> . BEGIN block_statements END
    (255) block -> . BEGIN END
    (259) namedblock -> . BEGIN COLON ID namedblock_statements END
    (260) namedblock -> . BEGIN COLON ID END
    (269) parallelblock -> . FORK block_statements JOIN
    (270) parallelblock -> . FORK JOIN
    (246) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (248) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (410) single_statement -> . DELAY expression SEMICOLON
    (411) single_statement -> . systemcall SEMICOLON
    (412) single_statement -> . disable SEMICOLON
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (209) senslist -> . AT LPAREN edgesigs RPAREN
    (217) senslist -> . empty
    (218) senslist -> . AT levelsig
    (219) senslist -> . AT LPAREN levelsigs RPAREN
    (227) senslist -> . AT TIMES
    (228) senslist -> . AT LPAREN TIMES RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (409) disable -> . DISABLE ID
    (413) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 196
    CASE            shift and go to state 198
    CASEX           shift and go to state 199
    CASEZ           shift and go to state 200
    UNIQUE          shift and go to state 201
    FOR             shift and go to state 202
    WHILE           shift and go to state 203
    WAIT            shift and go to state 205
    FOREVER         shift and go to state 206
    BEGIN           shift and go to state 207
    FORK            shift and go to state 208
    DELAY           shift and go to state 209
    AT              shift and go to state 173
    DOLLER          shift and go to state 109
    DISABLE         shift and go to state 213
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    SEMICOLON       reduce using rule 413 (empty -> .)

  ! IF              [ reduce using rule 413 (empty -> .) ]

    senslist                       shift and go to state 204
    always_statement               shift and go to state 347
    basic_statement                shift and go to state 338
    if_statement                   shift and go to state 180
    case_statement                 shift and go to state 181
    casex_statement                shift and go to state 182
    casez_statement                shift and go to state 183
    unique_case_statement          shift and go to state 184
    for_statement                  shift and go to state 185
    while_statement                shift and go to state 186
    event_statement                shift and go to state 187
    wait_statement                 shift and go to state 188
    forever_statement              shift and go to state 189
    block                          shift and go to state 190
    namedblock                     shift and go to state 191
    parallelblock                  shift and go to state 192
    blocking_substitution          shift and go to state 193
    nonblocking_substitution       shift and go to state 194
    single_statement               shift and go to state 195
    delays                         shift and go to state 197
    systemcall                     shift and go to state 210
    disable                        shift and go to state 211
    empty                          shift and go to state 212

state 177

    (208) always_latch -> ALWAYS_LATCH senslist . always_statement
    (245) always_statement -> . basic_statement
    (229) basic_statement -> . if_statement
    (230) basic_statement -> . case_statement
    (231) basic_statement -> . casex_statement
    (232) basic_statement -> . casez_statement
    (233) basic_statement -> . unique_case_statement
    (234) basic_statement -> . for_statement
    (235) basic_statement -> . while_statement
    (236) basic_statement -> . event_statement
    (237) basic_statement -> . wait_statement
    (238) basic_statement -> . forever_statement
    (239) basic_statement -> . block
    (240) basic_statement -> . namedblock
    (241) basic_statement -> . parallelblock
    (242) basic_statement -> . blocking_substitution
    (243) basic_statement -> . nonblocking_substitution
    (244) basic_statement -> . single_statement
    (271) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (272) if_statement -> . IF LPAREN cond RPAREN true_statement
    (273) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (274) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (289) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (290) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (291) casez_statement -> . CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (292) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (279) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (287) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (302) event_statement -> . senslist SEMICOLON
    (303) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (306) forever_statement -> . FOREVER basic_statement
    (254) block -> . BEGIN block_statements END
    (255) block -> . BEGIN END
    (259) namedblock -> . BEGIN COLON ID namedblock_statements END
    (260) namedblock -> . BEGIN COLON ID END
    (269) parallelblock -> . FORK block_statements JOIN
    (270) parallelblock -> . FORK JOIN
    (246) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (248) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (410) single_statement -> . DELAY expression SEMICOLON
    (411) single_statement -> . systemcall SEMICOLON
    (412) single_statement -> . disable SEMICOLON
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (209) senslist -> . AT LPAREN edgesigs RPAREN
    (217) senslist -> . empty
    (218) senslist -> . AT levelsig
    (219) senslist -> . AT LPAREN levelsigs RPAREN
    (227) senslist -> . AT TIMES
    (228) senslist -> . AT LPAREN TIMES RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (409) disable -> . DISABLE ID
    (413) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 196
    CASE            shift and go to state 198
    CASEX           shift and go to state 199
    CASEZ           shift and go to state 200
    UNIQUE          shift and go to state 201
    FOR             shift and go to state 202
    WHILE           shift and go to state 203
    WAIT            shift and go to state 205
    FOREVER         shift and go to state 206
    BEGIN           shift and go to state 207
    FORK            shift and go to state 208
    DELAY           shift and go to state 209
    AT              shift and go to state 173
    DOLLER          shift and go to state 109
    DISABLE         shift and go to state 213
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    SEMICOLON       reduce using rule 413 (empty -> .)

  ! IF              [ reduce using rule 413 (empty -> .) ]

    senslist                       shift and go to state 204
    always_statement               shift and go to state 348
    basic_statement                shift and go to state 338
    if_statement                   shift and go to state 180
    case_statement                 shift and go to state 181
    casex_statement                shift and go to state 182
    casez_statement                shift and go to state 183
    unique_case_statement          shift and go to state 184
    for_statement                  shift and go to state 185
    while_statement                shift and go to state 186
    event_statement                shift and go to state 187
    wait_statement                 shift and go to state 188
    forever_statement              shift and go to state 189
    block                          shift and go to state 190
    namedblock                     shift and go to state 191
    parallelblock                  shift and go to state 192
    blocking_substitution          shift and go to state 193
    nonblocking_substitution       shift and go to state 194
    single_statement               shift and go to state 195
    delays                         shift and go to state 197
    systemcall                     shift and go to state 210
    disable                        shift and go to state 211
    empty                          shift and go to state 212

state 178

    (300) initial -> INITIAL initial_statement .

    ENDMODULE       reduce using rule 300 (initial -> INITIAL initial_statement .)
    GENERATE        reduce using rule 300 (initial -> INITIAL initial_statement .)
    INTEGER         reduce using rule 300 (initial -> INITIAL initial_statement .)
    REAL            reduce using rule 300 (initial -> INITIAL initial_statement .)
    PARAMETER       reduce using rule 300 (initial -> INITIAL initial_statement .)
    LOCALPARAM      reduce using rule 300 (initial -> INITIAL initial_statement .)
    GENVAR          reduce using rule 300 (initial -> INITIAL initial_statement .)
    ASSIGN          reduce using rule 300 (initial -> INITIAL initial_statement .)
    ALWAYS          reduce using rule 300 (initial -> INITIAL initial_statement .)
    ALWAYS_FF       reduce using rule 300 (initial -> INITIAL initial_statement .)
    ALWAYS_COMB     reduce using rule 300 (initial -> INITIAL initial_statement .)
    ALWAYS_LATCH    reduce using rule 300 (initial -> INITIAL initial_statement .)
    INITIAL         reduce using rule 300 (initial -> INITIAL initial_statement .)
    ID              reduce using rule 300 (initial -> INITIAL initial_statement .)
    SENS_OR         reduce using rule 300 (initial -> INITIAL initial_statement .)
    FUNCTION        reduce using rule 300 (initial -> INITIAL initial_statement .)
    TASK            reduce using rule 300 (initial -> INITIAL initial_statement .)
    LPAREN          reduce using rule 300 (initial -> INITIAL initial_statement .)
    INPUT           reduce using rule 300 (initial -> INITIAL initial_statement .)
    OUTPUT          reduce using rule 300 (initial -> INITIAL initial_statement .)
    INOUT           reduce using rule 300 (initial -> INITIAL initial_statement .)
    TRI             reduce using rule 300 (initial -> INITIAL initial_statement .)
    REG             reduce using rule 300 (initial -> INITIAL initial_statement .)
    LOGIC           reduce using rule 300 (initial -> INITIAL initial_statement .)
    WIRE            reduce using rule 300 (initial -> INITIAL initial_statement .)
    SIGNED          reduce using rule 300 (initial -> INITIAL initial_statement .)
    SUPPLY0         reduce using rule 300 (initial -> INITIAL initial_statement .)
    SUPPLY1         reduce using rule 300 (initial -> INITIAL initial_statement .)
    ENDGENERATE     reduce using rule 300 (initial -> INITIAL initial_statement .)
    IF              reduce using rule 300 (initial -> INITIAL initial_statement .)
    FOR             reduce using rule 300 (initial -> INITIAL initial_statement .)
    ELSE            reduce using rule 300 (initial -> INITIAL initial_statement .)
    END             reduce using rule 300 (initial -> INITIAL initial_statement .)


state 179

    (301) initial_statement -> basic_statement .

    ENDMODULE       reduce using rule 301 (initial_statement -> basic_statement .)
    GENERATE        reduce using rule 301 (initial_statement -> basic_statement .)
    INTEGER         reduce using rule 301 (initial_statement -> basic_statement .)
    REAL            reduce using rule 301 (initial_statement -> basic_statement .)
    PARAMETER       reduce using rule 301 (initial_statement -> basic_statement .)
    LOCALPARAM      reduce using rule 301 (initial_statement -> basic_statement .)
    GENVAR          reduce using rule 301 (initial_statement -> basic_statement .)
    ASSIGN          reduce using rule 301 (initial_statement -> basic_statement .)
    ALWAYS          reduce using rule 301 (initial_statement -> basic_statement .)
    ALWAYS_FF       reduce using rule 301 (initial_statement -> basic_statement .)
    ALWAYS_COMB     reduce using rule 301 (initial_statement -> basic_statement .)
    ALWAYS_LATCH    reduce using rule 301 (initial_statement -> basic_statement .)
    INITIAL         reduce using rule 301 (initial_statement -> basic_statement .)
    ID              reduce using rule 301 (initial_statement -> basic_statement .)
    SENS_OR         reduce using rule 301 (initial_statement -> basic_statement .)
    FUNCTION        reduce using rule 301 (initial_statement -> basic_statement .)
    TASK            reduce using rule 301 (initial_statement -> basic_statement .)
    LPAREN          reduce using rule 301 (initial_statement -> basic_statement .)
    INPUT           reduce using rule 301 (initial_statement -> basic_statement .)
    OUTPUT          reduce using rule 301 (initial_statement -> basic_statement .)
    INOUT           reduce using rule 301 (initial_statement -> basic_statement .)
    TRI             reduce using rule 301 (initial_statement -> basic_statement .)
    REG             reduce using rule 301 (initial_statement -> basic_statement .)
    LOGIC           reduce using rule 301 (initial_statement -> basic_statement .)
    WIRE            reduce using rule 301 (initial_statement -> basic_statement .)
    SIGNED          reduce using rule 301 (initial_statement -> basic_statement .)
    SUPPLY0         reduce using rule 301 (initial_statement -> basic_statement .)
    SUPPLY1         reduce using rule 301 (initial_statement -> basic_statement .)
    ENDGENERATE     reduce using rule 301 (initial_statement -> basic_statement .)
    IF              reduce using rule 301 (initial_statement -> basic_statement .)
    FOR             reduce using rule 301 (initial_statement -> basic_statement .)
    ELSE            reduce using rule 301 (initial_statement -> basic_statement .)
    END             reduce using rule 301 (initial_statement -> basic_statement .)


state 180

    (229) basic_statement -> if_statement .

    ENDMODULE       reduce using rule 229 (basic_statement -> if_statement .)
    GENERATE        reduce using rule 229 (basic_statement -> if_statement .)
    INTEGER         reduce using rule 229 (basic_statement -> if_statement .)
    REAL            reduce using rule 229 (basic_statement -> if_statement .)
    PARAMETER       reduce using rule 229 (basic_statement -> if_statement .)
    LOCALPARAM      reduce using rule 229 (basic_statement -> if_statement .)
    GENVAR          reduce using rule 229 (basic_statement -> if_statement .)
    ASSIGN          reduce using rule 229 (basic_statement -> if_statement .)
    ALWAYS          reduce using rule 229 (basic_statement -> if_statement .)
    ALWAYS_FF       reduce using rule 229 (basic_statement -> if_statement .)
    ALWAYS_COMB     reduce using rule 229 (basic_statement -> if_statement .)
    ALWAYS_LATCH    reduce using rule 229 (basic_statement -> if_statement .)
    INITIAL         reduce using rule 229 (basic_statement -> if_statement .)
    ID              reduce using rule 229 (basic_statement -> if_statement .)
    SENS_OR         reduce using rule 229 (basic_statement -> if_statement .)
    FUNCTION        reduce using rule 229 (basic_statement -> if_statement .)
    TASK            reduce using rule 229 (basic_statement -> if_statement .)
    LPAREN          reduce using rule 229 (basic_statement -> if_statement .)
    INPUT           reduce using rule 229 (basic_statement -> if_statement .)
    OUTPUT          reduce using rule 229 (basic_statement -> if_statement .)
    INOUT           reduce using rule 229 (basic_statement -> if_statement .)
    TRI             reduce using rule 229 (basic_statement -> if_statement .)
    REG             reduce using rule 229 (basic_statement -> if_statement .)
    LOGIC           reduce using rule 229 (basic_statement -> if_statement .)
    WIRE            reduce using rule 229 (basic_statement -> if_statement .)
    SIGNED          reduce using rule 229 (basic_statement -> if_statement .)
    SUPPLY0         reduce using rule 229 (basic_statement -> if_statement .)
    SUPPLY1         reduce using rule 229 (basic_statement -> if_statement .)
    ENDGENERATE     reduce using rule 229 (basic_statement -> if_statement .)
    IF              reduce using rule 229 (basic_statement -> if_statement .)
    FOR             reduce using rule 229 (basic_statement -> if_statement .)
    ELSE            reduce using rule 229 (basic_statement -> if_statement .)
    END             reduce using rule 229 (basic_statement -> if_statement .)
    CASE            reduce using rule 229 (basic_statement -> if_statement .)
    CASEX           reduce using rule 229 (basic_statement -> if_statement .)
    CASEZ           reduce using rule 229 (basic_statement -> if_statement .)
    UNIQUE          reduce using rule 229 (basic_statement -> if_statement .)
    WHILE           reduce using rule 229 (basic_statement -> if_statement .)
    WAIT            reduce using rule 229 (basic_statement -> if_statement .)
    FOREVER         reduce using rule 229 (basic_statement -> if_statement .)
    BEGIN           reduce using rule 229 (basic_statement -> if_statement .)
    FORK            reduce using rule 229 (basic_statement -> if_statement .)
    DELAY           reduce using rule 229 (basic_statement -> if_statement .)
    AT              reduce using rule 229 (basic_statement -> if_statement .)
    DOLLER          reduce using rule 229 (basic_statement -> if_statement .)
    DISABLE         reduce using rule 229 (basic_statement -> if_statement .)
    LBRACE          reduce using rule 229 (basic_statement -> if_statement .)
    SEMICOLON       reduce using rule 229 (basic_statement -> if_statement .)
    JOIN            reduce using rule 229 (basic_statement -> if_statement .)
    ENDFUNCTION     reduce using rule 229 (basic_statement -> if_statement .)
    ENDTASK         reduce using rule 229 (basic_statement -> if_statement .)
    ENDCASE         reduce using rule 229 (basic_statement -> if_statement .)
    DEFAULT         reduce using rule 229 (basic_statement -> if_statement .)
    MINUS           reduce using rule 229 (basic_statement -> if_statement .)
    PLUS            reduce using rule 229 (basic_statement -> if_statement .)
    LNOT            reduce using rule 229 (basic_statement -> if_statement .)
    NOT             reduce using rule 229 (basic_statement -> if_statement .)
    AND             reduce using rule 229 (basic_statement -> if_statement .)
    NAND            reduce using rule 229 (basic_statement -> if_statement .)
    NOR             reduce using rule 229 (basic_statement -> if_statement .)
    OR              reduce using rule 229 (basic_statement -> if_statement .)
    XOR             reduce using rule 229 (basic_statement -> if_statement .)
    XNOR            reduce using rule 229 (basic_statement -> if_statement .)
    INTNUMBER_DEC   reduce using rule 229 (basic_statement -> if_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 229 (basic_statement -> if_statement .)
    INTNUMBER_BIN   reduce using rule 229 (basic_statement -> if_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 229 (basic_statement -> if_statement .)
    INTNUMBER_OCT   reduce using rule 229 (basic_statement -> if_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 229 (basic_statement -> if_statement .)
    INTNUMBER_HEX   reduce using rule 229 (basic_statement -> if_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 229 (basic_statement -> if_statement .)
    FLOATNUMBER     reduce using rule 229 (basic_statement -> if_statement .)
    STRING_LITERAL  reduce using rule 229 (basic_statement -> if_statement .)


state 181

    (230) basic_statement -> case_statement .

    ENDMODULE       reduce using rule 230 (basic_statement -> case_statement .)
    GENERATE        reduce using rule 230 (basic_statement -> case_statement .)
    INTEGER         reduce using rule 230 (basic_statement -> case_statement .)
    REAL            reduce using rule 230 (basic_statement -> case_statement .)
    PARAMETER       reduce using rule 230 (basic_statement -> case_statement .)
    LOCALPARAM      reduce using rule 230 (basic_statement -> case_statement .)
    GENVAR          reduce using rule 230 (basic_statement -> case_statement .)
    ASSIGN          reduce using rule 230 (basic_statement -> case_statement .)
    ALWAYS          reduce using rule 230 (basic_statement -> case_statement .)
    ALWAYS_FF       reduce using rule 230 (basic_statement -> case_statement .)
    ALWAYS_COMB     reduce using rule 230 (basic_statement -> case_statement .)
    ALWAYS_LATCH    reduce using rule 230 (basic_statement -> case_statement .)
    INITIAL         reduce using rule 230 (basic_statement -> case_statement .)
    ID              reduce using rule 230 (basic_statement -> case_statement .)
    SENS_OR         reduce using rule 230 (basic_statement -> case_statement .)
    FUNCTION        reduce using rule 230 (basic_statement -> case_statement .)
    TASK            reduce using rule 230 (basic_statement -> case_statement .)
    LPAREN          reduce using rule 230 (basic_statement -> case_statement .)
    INPUT           reduce using rule 230 (basic_statement -> case_statement .)
    OUTPUT          reduce using rule 230 (basic_statement -> case_statement .)
    INOUT           reduce using rule 230 (basic_statement -> case_statement .)
    TRI             reduce using rule 230 (basic_statement -> case_statement .)
    REG             reduce using rule 230 (basic_statement -> case_statement .)
    LOGIC           reduce using rule 230 (basic_statement -> case_statement .)
    WIRE            reduce using rule 230 (basic_statement -> case_statement .)
    SIGNED          reduce using rule 230 (basic_statement -> case_statement .)
    SUPPLY0         reduce using rule 230 (basic_statement -> case_statement .)
    SUPPLY1         reduce using rule 230 (basic_statement -> case_statement .)
    ENDGENERATE     reduce using rule 230 (basic_statement -> case_statement .)
    IF              reduce using rule 230 (basic_statement -> case_statement .)
    FOR             reduce using rule 230 (basic_statement -> case_statement .)
    ELSE            reduce using rule 230 (basic_statement -> case_statement .)
    END             reduce using rule 230 (basic_statement -> case_statement .)
    CASE            reduce using rule 230 (basic_statement -> case_statement .)
    CASEX           reduce using rule 230 (basic_statement -> case_statement .)
    CASEZ           reduce using rule 230 (basic_statement -> case_statement .)
    UNIQUE          reduce using rule 230 (basic_statement -> case_statement .)
    WHILE           reduce using rule 230 (basic_statement -> case_statement .)
    WAIT            reduce using rule 230 (basic_statement -> case_statement .)
    FOREVER         reduce using rule 230 (basic_statement -> case_statement .)
    BEGIN           reduce using rule 230 (basic_statement -> case_statement .)
    FORK            reduce using rule 230 (basic_statement -> case_statement .)
    DELAY           reduce using rule 230 (basic_statement -> case_statement .)
    AT              reduce using rule 230 (basic_statement -> case_statement .)
    DOLLER          reduce using rule 230 (basic_statement -> case_statement .)
    DISABLE         reduce using rule 230 (basic_statement -> case_statement .)
    LBRACE          reduce using rule 230 (basic_statement -> case_statement .)
    SEMICOLON       reduce using rule 230 (basic_statement -> case_statement .)
    JOIN            reduce using rule 230 (basic_statement -> case_statement .)
    ENDFUNCTION     reduce using rule 230 (basic_statement -> case_statement .)
    ENDTASK         reduce using rule 230 (basic_statement -> case_statement .)
    ENDCASE         reduce using rule 230 (basic_statement -> case_statement .)
    DEFAULT         reduce using rule 230 (basic_statement -> case_statement .)
    MINUS           reduce using rule 230 (basic_statement -> case_statement .)
    PLUS            reduce using rule 230 (basic_statement -> case_statement .)
    LNOT            reduce using rule 230 (basic_statement -> case_statement .)
    NOT             reduce using rule 230 (basic_statement -> case_statement .)
    AND             reduce using rule 230 (basic_statement -> case_statement .)
    NAND            reduce using rule 230 (basic_statement -> case_statement .)
    NOR             reduce using rule 230 (basic_statement -> case_statement .)
    OR              reduce using rule 230 (basic_statement -> case_statement .)
    XOR             reduce using rule 230 (basic_statement -> case_statement .)
    XNOR            reduce using rule 230 (basic_statement -> case_statement .)
    INTNUMBER_DEC   reduce using rule 230 (basic_statement -> case_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 230 (basic_statement -> case_statement .)
    INTNUMBER_BIN   reduce using rule 230 (basic_statement -> case_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 230 (basic_statement -> case_statement .)
    INTNUMBER_OCT   reduce using rule 230 (basic_statement -> case_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 230 (basic_statement -> case_statement .)
    INTNUMBER_HEX   reduce using rule 230 (basic_statement -> case_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 230 (basic_statement -> case_statement .)
    FLOATNUMBER     reduce using rule 230 (basic_statement -> case_statement .)
    STRING_LITERAL  reduce using rule 230 (basic_statement -> case_statement .)


state 182

    (231) basic_statement -> casex_statement .

    ENDMODULE       reduce using rule 231 (basic_statement -> casex_statement .)
    GENERATE        reduce using rule 231 (basic_statement -> casex_statement .)
    INTEGER         reduce using rule 231 (basic_statement -> casex_statement .)
    REAL            reduce using rule 231 (basic_statement -> casex_statement .)
    PARAMETER       reduce using rule 231 (basic_statement -> casex_statement .)
    LOCALPARAM      reduce using rule 231 (basic_statement -> casex_statement .)
    GENVAR          reduce using rule 231 (basic_statement -> casex_statement .)
    ASSIGN          reduce using rule 231 (basic_statement -> casex_statement .)
    ALWAYS          reduce using rule 231 (basic_statement -> casex_statement .)
    ALWAYS_FF       reduce using rule 231 (basic_statement -> casex_statement .)
    ALWAYS_COMB     reduce using rule 231 (basic_statement -> casex_statement .)
    ALWAYS_LATCH    reduce using rule 231 (basic_statement -> casex_statement .)
    INITIAL         reduce using rule 231 (basic_statement -> casex_statement .)
    ID              reduce using rule 231 (basic_statement -> casex_statement .)
    SENS_OR         reduce using rule 231 (basic_statement -> casex_statement .)
    FUNCTION        reduce using rule 231 (basic_statement -> casex_statement .)
    TASK            reduce using rule 231 (basic_statement -> casex_statement .)
    LPAREN          reduce using rule 231 (basic_statement -> casex_statement .)
    INPUT           reduce using rule 231 (basic_statement -> casex_statement .)
    OUTPUT          reduce using rule 231 (basic_statement -> casex_statement .)
    INOUT           reduce using rule 231 (basic_statement -> casex_statement .)
    TRI             reduce using rule 231 (basic_statement -> casex_statement .)
    REG             reduce using rule 231 (basic_statement -> casex_statement .)
    LOGIC           reduce using rule 231 (basic_statement -> casex_statement .)
    WIRE            reduce using rule 231 (basic_statement -> casex_statement .)
    SIGNED          reduce using rule 231 (basic_statement -> casex_statement .)
    SUPPLY0         reduce using rule 231 (basic_statement -> casex_statement .)
    SUPPLY1         reduce using rule 231 (basic_statement -> casex_statement .)
    ENDGENERATE     reduce using rule 231 (basic_statement -> casex_statement .)
    IF              reduce using rule 231 (basic_statement -> casex_statement .)
    FOR             reduce using rule 231 (basic_statement -> casex_statement .)
    ELSE            reduce using rule 231 (basic_statement -> casex_statement .)
    END             reduce using rule 231 (basic_statement -> casex_statement .)
    CASE            reduce using rule 231 (basic_statement -> casex_statement .)
    CASEX           reduce using rule 231 (basic_statement -> casex_statement .)
    CASEZ           reduce using rule 231 (basic_statement -> casex_statement .)
    UNIQUE          reduce using rule 231 (basic_statement -> casex_statement .)
    WHILE           reduce using rule 231 (basic_statement -> casex_statement .)
    WAIT            reduce using rule 231 (basic_statement -> casex_statement .)
    FOREVER         reduce using rule 231 (basic_statement -> casex_statement .)
    BEGIN           reduce using rule 231 (basic_statement -> casex_statement .)
    FORK            reduce using rule 231 (basic_statement -> casex_statement .)
    DELAY           reduce using rule 231 (basic_statement -> casex_statement .)
    AT              reduce using rule 231 (basic_statement -> casex_statement .)
    DOLLER          reduce using rule 231 (basic_statement -> casex_statement .)
    DISABLE         reduce using rule 231 (basic_statement -> casex_statement .)
    LBRACE          reduce using rule 231 (basic_statement -> casex_statement .)
    SEMICOLON       reduce using rule 231 (basic_statement -> casex_statement .)
    JOIN            reduce using rule 231 (basic_statement -> casex_statement .)
    ENDFUNCTION     reduce using rule 231 (basic_statement -> casex_statement .)
    ENDTASK         reduce using rule 231 (basic_statement -> casex_statement .)
    ENDCASE         reduce using rule 231 (basic_statement -> casex_statement .)
    DEFAULT         reduce using rule 231 (basic_statement -> casex_statement .)
    MINUS           reduce using rule 231 (basic_statement -> casex_statement .)
    PLUS            reduce using rule 231 (basic_statement -> casex_statement .)
    LNOT            reduce using rule 231 (basic_statement -> casex_statement .)
    NOT             reduce using rule 231 (basic_statement -> casex_statement .)
    AND             reduce using rule 231 (basic_statement -> casex_statement .)
    NAND            reduce using rule 231 (basic_statement -> casex_statement .)
    NOR             reduce using rule 231 (basic_statement -> casex_statement .)
    OR              reduce using rule 231 (basic_statement -> casex_statement .)
    XOR             reduce using rule 231 (basic_statement -> casex_statement .)
    XNOR            reduce using rule 231 (basic_statement -> casex_statement .)
    INTNUMBER_DEC   reduce using rule 231 (basic_statement -> casex_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 231 (basic_statement -> casex_statement .)
    INTNUMBER_BIN   reduce using rule 231 (basic_statement -> casex_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 231 (basic_statement -> casex_statement .)
    INTNUMBER_OCT   reduce using rule 231 (basic_statement -> casex_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 231 (basic_statement -> casex_statement .)
    INTNUMBER_HEX   reduce using rule 231 (basic_statement -> casex_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 231 (basic_statement -> casex_statement .)
    FLOATNUMBER     reduce using rule 231 (basic_statement -> casex_statement .)
    STRING_LITERAL  reduce using rule 231 (basic_statement -> casex_statement .)


state 183

    (232) basic_statement -> casez_statement .

    ENDMODULE       reduce using rule 232 (basic_statement -> casez_statement .)
    GENERATE        reduce using rule 232 (basic_statement -> casez_statement .)
    INTEGER         reduce using rule 232 (basic_statement -> casez_statement .)
    REAL            reduce using rule 232 (basic_statement -> casez_statement .)
    PARAMETER       reduce using rule 232 (basic_statement -> casez_statement .)
    LOCALPARAM      reduce using rule 232 (basic_statement -> casez_statement .)
    GENVAR          reduce using rule 232 (basic_statement -> casez_statement .)
    ASSIGN          reduce using rule 232 (basic_statement -> casez_statement .)
    ALWAYS          reduce using rule 232 (basic_statement -> casez_statement .)
    ALWAYS_FF       reduce using rule 232 (basic_statement -> casez_statement .)
    ALWAYS_COMB     reduce using rule 232 (basic_statement -> casez_statement .)
    ALWAYS_LATCH    reduce using rule 232 (basic_statement -> casez_statement .)
    INITIAL         reduce using rule 232 (basic_statement -> casez_statement .)
    ID              reduce using rule 232 (basic_statement -> casez_statement .)
    SENS_OR         reduce using rule 232 (basic_statement -> casez_statement .)
    FUNCTION        reduce using rule 232 (basic_statement -> casez_statement .)
    TASK            reduce using rule 232 (basic_statement -> casez_statement .)
    LPAREN          reduce using rule 232 (basic_statement -> casez_statement .)
    INPUT           reduce using rule 232 (basic_statement -> casez_statement .)
    OUTPUT          reduce using rule 232 (basic_statement -> casez_statement .)
    INOUT           reduce using rule 232 (basic_statement -> casez_statement .)
    TRI             reduce using rule 232 (basic_statement -> casez_statement .)
    REG             reduce using rule 232 (basic_statement -> casez_statement .)
    LOGIC           reduce using rule 232 (basic_statement -> casez_statement .)
    WIRE            reduce using rule 232 (basic_statement -> casez_statement .)
    SIGNED          reduce using rule 232 (basic_statement -> casez_statement .)
    SUPPLY0         reduce using rule 232 (basic_statement -> casez_statement .)
    SUPPLY1         reduce using rule 232 (basic_statement -> casez_statement .)
    ENDGENERATE     reduce using rule 232 (basic_statement -> casez_statement .)
    IF              reduce using rule 232 (basic_statement -> casez_statement .)
    FOR             reduce using rule 232 (basic_statement -> casez_statement .)
    ELSE            reduce using rule 232 (basic_statement -> casez_statement .)
    END             reduce using rule 232 (basic_statement -> casez_statement .)
    CASE            reduce using rule 232 (basic_statement -> casez_statement .)
    CASEX           reduce using rule 232 (basic_statement -> casez_statement .)
    CASEZ           reduce using rule 232 (basic_statement -> casez_statement .)
    UNIQUE          reduce using rule 232 (basic_statement -> casez_statement .)
    WHILE           reduce using rule 232 (basic_statement -> casez_statement .)
    WAIT            reduce using rule 232 (basic_statement -> casez_statement .)
    FOREVER         reduce using rule 232 (basic_statement -> casez_statement .)
    BEGIN           reduce using rule 232 (basic_statement -> casez_statement .)
    FORK            reduce using rule 232 (basic_statement -> casez_statement .)
    DELAY           reduce using rule 232 (basic_statement -> casez_statement .)
    AT              reduce using rule 232 (basic_statement -> casez_statement .)
    DOLLER          reduce using rule 232 (basic_statement -> casez_statement .)
    DISABLE         reduce using rule 232 (basic_statement -> casez_statement .)
    LBRACE          reduce using rule 232 (basic_statement -> casez_statement .)
    SEMICOLON       reduce using rule 232 (basic_statement -> casez_statement .)
    JOIN            reduce using rule 232 (basic_statement -> casez_statement .)
    ENDFUNCTION     reduce using rule 232 (basic_statement -> casez_statement .)
    ENDTASK         reduce using rule 232 (basic_statement -> casez_statement .)
    ENDCASE         reduce using rule 232 (basic_statement -> casez_statement .)
    DEFAULT         reduce using rule 232 (basic_statement -> casez_statement .)
    MINUS           reduce using rule 232 (basic_statement -> casez_statement .)
    PLUS            reduce using rule 232 (basic_statement -> casez_statement .)
    LNOT            reduce using rule 232 (basic_statement -> casez_statement .)
    NOT             reduce using rule 232 (basic_statement -> casez_statement .)
    AND             reduce using rule 232 (basic_statement -> casez_statement .)
    NAND            reduce using rule 232 (basic_statement -> casez_statement .)
    NOR             reduce using rule 232 (basic_statement -> casez_statement .)
    OR              reduce using rule 232 (basic_statement -> casez_statement .)
    XOR             reduce using rule 232 (basic_statement -> casez_statement .)
    XNOR            reduce using rule 232 (basic_statement -> casez_statement .)
    INTNUMBER_DEC   reduce using rule 232 (basic_statement -> casez_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 232 (basic_statement -> casez_statement .)
    INTNUMBER_BIN   reduce using rule 232 (basic_statement -> casez_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 232 (basic_statement -> casez_statement .)
    INTNUMBER_OCT   reduce using rule 232 (basic_statement -> casez_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 232 (basic_statement -> casez_statement .)
    INTNUMBER_HEX   reduce using rule 232 (basic_statement -> casez_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 232 (basic_statement -> casez_statement .)
    FLOATNUMBER     reduce using rule 232 (basic_statement -> casez_statement .)
    STRING_LITERAL  reduce using rule 232 (basic_statement -> casez_statement .)


state 184

    (233) basic_statement -> unique_case_statement .

    ENDMODULE       reduce using rule 233 (basic_statement -> unique_case_statement .)
    GENERATE        reduce using rule 233 (basic_statement -> unique_case_statement .)
    INTEGER         reduce using rule 233 (basic_statement -> unique_case_statement .)
    REAL            reduce using rule 233 (basic_statement -> unique_case_statement .)
    PARAMETER       reduce using rule 233 (basic_statement -> unique_case_statement .)
    LOCALPARAM      reduce using rule 233 (basic_statement -> unique_case_statement .)
    GENVAR          reduce using rule 233 (basic_statement -> unique_case_statement .)
    ASSIGN          reduce using rule 233 (basic_statement -> unique_case_statement .)
    ALWAYS          reduce using rule 233 (basic_statement -> unique_case_statement .)
    ALWAYS_FF       reduce using rule 233 (basic_statement -> unique_case_statement .)
    ALWAYS_COMB     reduce using rule 233 (basic_statement -> unique_case_statement .)
    ALWAYS_LATCH    reduce using rule 233 (basic_statement -> unique_case_statement .)
    INITIAL         reduce using rule 233 (basic_statement -> unique_case_statement .)
    ID              reduce using rule 233 (basic_statement -> unique_case_statement .)
    SENS_OR         reduce using rule 233 (basic_statement -> unique_case_statement .)
    FUNCTION        reduce using rule 233 (basic_statement -> unique_case_statement .)
    TASK            reduce using rule 233 (basic_statement -> unique_case_statement .)
    LPAREN          reduce using rule 233 (basic_statement -> unique_case_statement .)
    INPUT           reduce using rule 233 (basic_statement -> unique_case_statement .)
    OUTPUT          reduce using rule 233 (basic_statement -> unique_case_statement .)
    INOUT           reduce using rule 233 (basic_statement -> unique_case_statement .)
    TRI             reduce using rule 233 (basic_statement -> unique_case_statement .)
    REG             reduce using rule 233 (basic_statement -> unique_case_statement .)
    LOGIC           reduce using rule 233 (basic_statement -> unique_case_statement .)
    WIRE            reduce using rule 233 (basic_statement -> unique_case_statement .)
    SIGNED          reduce using rule 233 (basic_statement -> unique_case_statement .)
    SUPPLY0         reduce using rule 233 (basic_statement -> unique_case_statement .)
    SUPPLY1         reduce using rule 233 (basic_statement -> unique_case_statement .)
    ENDGENERATE     reduce using rule 233 (basic_statement -> unique_case_statement .)
    IF              reduce using rule 233 (basic_statement -> unique_case_statement .)
    FOR             reduce using rule 233 (basic_statement -> unique_case_statement .)
    ELSE            reduce using rule 233 (basic_statement -> unique_case_statement .)
    END             reduce using rule 233 (basic_statement -> unique_case_statement .)
    CASE            reduce using rule 233 (basic_statement -> unique_case_statement .)
    CASEX           reduce using rule 233 (basic_statement -> unique_case_statement .)
    CASEZ           reduce using rule 233 (basic_statement -> unique_case_statement .)
    UNIQUE          reduce using rule 233 (basic_statement -> unique_case_statement .)
    WHILE           reduce using rule 233 (basic_statement -> unique_case_statement .)
    WAIT            reduce using rule 233 (basic_statement -> unique_case_statement .)
    FOREVER         reduce using rule 233 (basic_statement -> unique_case_statement .)
    BEGIN           reduce using rule 233 (basic_statement -> unique_case_statement .)
    FORK            reduce using rule 233 (basic_statement -> unique_case_statement .)
    DELAY           reduce using rule 233 (basic_statement -> unique_case_statement .)
    AT              reduce using rule 233 (basic_statement -> unique_case_statement .)
    DOLLER          reduce using rule 233 (basic_statement -> unique_case_statement .)
    DISABLE         reduce using rule 233 (basic_statement -> unique_case_statement .)
    LBRACE          reduce using rule 233 (basic_statement -> unique_case_statement .)
    SEMICOLON       reduce using rule 233 (basic_statement -> unique_case_statement .)
    JOIN            reduce using rule 233 (basic_statement -> unique_case_statement .)
    ENDFUNCTION     reduce using rule 233 (basic_statement -> unique_case_statement .)
    ENDTASK         reduce using rule 233 (basic_statement -> unique_case_statement .)
    ENDCASE         reduce using rule 233 (basic_statement -> unique_case_statement .)
    DEFAULT         reduce using rule 233 (basic_statement -> unique_case_statement .)
    MINUS           reduce using rule 233 (basic_statement -> unique_case_statement .)
    PLUS            reduce using rule 233 (basic_statement -> unique_case_statement .)
    LNOT            reduce using rule 233 (basic_statement -> unique_case_statement .)
    NOT             reduce using rule 233 (basic_statement -> unique_case_statement .)
    AND             reduce using rule 233 (basic_statement -> unique_case_statement .)
    NAND            reduce using rule 233 (basic_statement -> unique_case_statement .)
    NOR             reduce using rule 233 (basic_statement -> unique_case_statement .)
    OR              reduce using rule 233 (basic_statement -> unique_case_statement .)
    XOR             reduce using rule 233 (basic_statement -> unique_case_statement .)
    XNOR            reduce using rule 233 (basic_statement -> unique_case_statement .)
    INTNUMBER_DEC   reduce using rule 233 (basic_statement -> unique_case_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 233 (basic_statement -> unique_case_statement .)
    INTNUMBER_BIN   reduce using rule 233 (basic_statement -> unique_case_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 233 (basic_statement -> unique_case_statement .)
    INTNUMBER_OCT   reduce using rule 233 (basic_statement -> unique_case_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 233 (basic_statement -> unique_case_statement .)
    INTNUMBER_HEX   reduce using rule 233 (basic_statement -> unique_case_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 233 (basic_statement -> unique_case_statement .)
    FLOATNUMBER     reduce using rule 233 (basic_statement -> unique_case_statement .)
    STRING_LITERAL  reduce using rule 233 (basic_statement -> unique_case_statement .)


state 185

    (234) basic_statement -> for_statement .

    ENDMODULE       reduce using rule 234 (basic_statement -> for_statement .)
    GENERATE        reduce using rule 234 (basic_statement -> for_statement .)
    INTEGER         reduce using rule 234 (basic_statement -> for_statement .)
    REAL            reduce using rule 234 (basic_statement -> for_statement .)
    PARAMETER       reduce using rule 234 (basic_statement -> for_statement .)
    LOCALPARAM      reduce using rule 234 (basic_statement -> for_statement .)
    GENVAR          reduce using rule 234 (basic_statement -> for_statement .)
    ASSIGN          reduce using rule 234 (basic_statement -> for_statement .)
    ALWAYS          reduce using rule 234 (basic_statement -> for_statement .)
    ALWAYS_FF       reduce using rule 234 (basic_statement -> for_statement .)
    ALWAYS_COMB     reduce using rule 234 (basic_statement -> for_statement .)
    ALWAYS_LATCH    reduce using rule 234 (basic_statement -> for_statement .)
    INITIAL         reduce using rule 234 (basic_statement -> for_statement .)
    ID              reduce using rule 234 (basic_statement -> for_statement .)
    SENS_OR         reduce using rule 234 (basic_statement -> for_statement .)
    FUNCTION        reduce using rule 234 (basic_statement -> for_statement .)
    TASK            reduce using rule 234 (basic_statement -> for_statement .)
    LPAREN          reduce using rule 234 (basic_statement -> for_statement .)
    INPUT           reduce using rule 234 (basic_statement -> for_statement .)
    OUTPUT          reduce using rule 234 (basic_statement -> for_statement .)
    INOUT           reduce using rule 234 (basic_statement -> for_statement .)
    TRI             reduce using rule 234 (basic_statement -> for_statement .)
    REG             reduce using rule 234 (basic_statement -> for_statement .)
    LOGIC           reduce using rule 234 (basic_statement -> for_statement .)
    WIRE            reduce using rule 234 (basic_statement -> for_statement .)
    SIGNED          reduce using rule 234 (basic_statement -> for_statement .)
    SUPPLY0         reduce using rule 234 (basic_statement -> for_statement .)
    SUPPLY1         reduce using rule 234 (basic_statement -> for_statement .)
    ENDGENERATE     reduce using rule 234 (basic_statement -> for_statement .)
    IF              reduce using rule 234 (basic_statement -> for_statement .)
    FOR             reduce using rule 234 (basic_statement -> for_statement .)
    ELSE            reduce using rule 234 (basic_statement -> for_statement .)
    END             reduce using rule 234 (basic_statement -> for_statement .)
    CASE            reduce using rule 234 (basic_statement -> for_statement .)
    CASEX           reduce using rule 234 (basic_statement -> for_statement .)
    CASEZ           reduce using rule 234 (basic_statement -> for_statement .)
    UNIQUE          reduce using rule 234 (basic_statement -> for_statement .)
    WHILE           reduce using rule 234 (basic_statement -> for_statement .)
    WAIT            reduce using rule 234 (basic_statement -> for_statement .)
    FOREVER         reduce using rule 234 (basic_statement -> for_statement .)
    BEGIN           reduce using rule 234 (basic_statement -> for_statement .)
    FORK            reduce using rule 234 (basic_statement -> for_statement .)
    DELAY           reduce using rule 234 (basic_statement -> for_statement .)
    AT              reduce using rule 234 (basic_statement -> for_statement .)
    DOLLER          reduce using rule 234 (basic_statement -> for_statement .)
    DISABLE         reduce using rule 234 (basic_statement -> for_statement .)
    LBRACE          reduce using rule 234 (basic_statement -> for_statement .)
    SEMICOLON       reduce using rule 234 (basic_statement -> for_statement .)
    JOIN            reduce using rule 234 (basic_statement -> for_statement .)
    ENDFUNCTION     reduce using rule 234 (basic_statement -> for_statement .)
    ENDTASK         reduce using rule 234 (basic_statement -> for_statement .)
    ENDCASE         reduce using rule 234 (basic_statement -> for_statement .)
    DEFAULT         reduce using rule 234 (basic_statement -> for_statement .)
    MINUS           reduce using rule 234 (basic_statement -> for_statement .)
    PLUS            reduce using rule 234 (basic_statement -> for_statement .)
    LNOT            reduce using rule 234 (basic_statement -> for_statement .)
    NOT             reduce using rule 234 (basic_statement -> for_statement .)
    AND             reduce using rule 234 (basic_statement -> for_statement .)
    NAND            reduce using rule 234 (basic_statement -> for_statement .)
    NOR             reduce using rule 234 (basic_statement -> for_statement .)
    OR              reduce using rule 234 (basic_statement -> for_statement .)
    XOR             reduce using rule 234 (basic_statement -> for_statement .)
    XNOR            reduce using rule 234 (basic_statement -> for_statement .)
    INTNUMBER_DEC   reduce using rule 234 (basic_statement -> for_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 234 (basic_statement -> for_statement .)
    INTNUMBER_BIN   reduce using rule 234 (basic_statement -> for_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 234 (basic_statement -> for_statement .)
    INTNUMBER_OCT   reduce using rule 234 (basic_statement -> for_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 234 (basic_statement -> for_statement .)
    INTNUMBER_HEX   reduce using rule 234 (basic_statement -> for_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 234 (basic_statement -> for_statement .)
    FLOATNUMBER     reduce using rule 234 (basic_statement -> for_statement .)
    STRING_LITERAL  reduce using rule 234 (basic_statement -> for_statement .)


state 186

    (235) basic_statement -> while_statement .

    ENDMODULE       reduce using rule 235 (basic_statement -> while_statement .)
    GENERATE        reduce using rule 235 (basic_statement -> while_statement .)
    INTEGER         reduce using rule 235 (basic_statement -> while_statement .)
    REAL            reduce using rule 235 (basic_statement -> while_statement .)
    PARAMETER       reduce using rule 235 (basic_statement -> while_statement .)
    LOCALPARAM      reduce using rule 235 (basic_statement -> while_statement .)
    GENVAR          reduce using rule 235 (basic_statement -> while_statement .)
    ASSIGN          reduce using rule 235 (basic_statement -> while_statement .)
    ALWAYS          reduce using rule 235 (basic_statement -> while_statement .)
    ALWAYS_FF       reduce using rule 235 (basic_statement -> while_statement .)
    ALWAYS_COMB     reduce using rule 235 (basic_statement -> while_statement .)
    ALWAYS_LATCH    reduce using rule 235 (basic_statement -> while_statement .)
    INITIAL         reduce using rule 235 (basic_statement -> while_statement .)
    ID              reduce using rule 235 (basic_statement -> while_statement .)
    SENS_OR         reduce using rule 235 (basic_statement -> while_statement .)
    FUNCTION        reduce using rule 235 (basic_statement -> while_statement .)
    TASK            reduce using rule 235 (basic_statement -> while_statement .)
    LPAREN          reduce using rule 235 (basic_statement -> while_statement .)
    INPUT           reduce using rule 235 (basic_statement -> while_statement .)
    OUTPUT          reduce using rule 235 (basic_statement -> while_statement .)
    INOUT           reduce using rule 235 (basic_statement -> while_statement .)
    TRI             reduce using rule 235 (basic_statement -> while_statement .)
    REG             reduce using rule 235 (basic_statement -> while_statement .)
    LOGIC           reduce using rule 235 (basic_statement -> while_statement .)
    WIRE            reduce using rule 235 (basic_statement -> while_statement .)
    SIGNED          reduce using rule 235 (basic_statement -> while_statement .)
    SUPPLY0         reduce using rule 235 (basic_statement -> while_statement .)
    SUPPLY1         reduce using rule 235 (basic_statement -> while_statement .)
    ENDGENERATE     reduce using rule 235 (basic_statement -> while_statement .)
    IF              reduce using rule 235 (basic_statement -> while_statement .)
    FOR             reduce using rule 235 (basic_statement -> while_statement .)
    ELSE            reduce using rule 235 (basic_statement -> while_statement .)
    END             reduce using rule 235 (basic_statement -> while_statement .)
    CASE            reduce using rule 235 (basic_statement -> while_statement .)
    CASEX           reduce using rule 235 (basic_statement -> while_statement .)
    CASEZ           reduce using rule 235 (basic_statement -> while_statement .)
    UNIQUE          reduce using rule 235 (basic_statement -> while_statement .)
    WHILE           reduce using rule 235 (basic_statement -> while_statement .)
    WAIT            reduce using rule 235 (basic_statement -> while_statement .)
    FOREVER         reduce using rule 235 (basic_statement -> while_statement .)
    BEGIN           reduce using rule 235 (basic_statement -> while_statement .)
    FORK            reduce using rule 235 (basic_statement -> while_statement .)
    DELAY           reduce using rule 235 (basic_statement -> while_statement .)
    AT              reduce using rule 235 (basic_statement -> while_statement .)
    DOLLER          reduce using rule 235 (basic_statement -> while_statement .)
    DISABLE         reduce using rule 235 (basic_statement -> while_statement .)
    LBRACE          reduce using rule 235 (basic_statement -> while_statement .)
    SEMICOLON       reduce using rule 235 (basic_statement -> while_statement .)
    JOIN            reduce using rule 235 (basic_statement -> while_statement .)
    ENDFUNCTION     reduce using rule 235 (basic_statement -> while_statement .)
    ENDTASK         reduce using rule 235 (basic_statement -> while_statement .)
    ENDCASE         reduce using rule 235 (basic_statement -> while_statement .)
    DEFAULT         reduce using rule 235 (basic_statement -> while_statement .)
    MINUS           reduce using rule 235 (basic_statement -> while_statement .)
    PLUS            reduce using rule 235 (basic_statement -> while_statement .)
    LNOT            reduce using rule 235 (basic_statement -> while_statement .)
    NOT             reduce using rule 235 (basic_statement -> while_statement .)
    AND             reduce using rule 235 (basic_statement -> while_statement .)
    NAND            reduce using rule 235 (basic_statement -> while_statement .)
    NOR             reduce using rule 235 (basic_statement -> while_statement .)
    OR              reduce using rule 235 (basic_statement -> while_statement .)
    XOR             reduce using rule 235 (basic_statement -> while_statement .)
    XNOR            reduce using rule 235 (basic_statement -> while_statement .)
    INTNUMBER_DEC   reduce using rule 235 (basic_statement -> while_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 235 (basic_statement -> while_statement .)
    INTNUMBER_BIN   reduce using rule 235 (basic_statement -> while_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 235 (basic_statement -> while_statement .)
    INTNUMBER_OCT   reduce using rule 235 (basic_statement -> while_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 235 (basic_statement -> while_statement .)
    INTNUMBER_HEX   reduce using rule 235 (basic_statement -> while_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 235 (basic_statement -> while_statement .)
    FLOATNUMBER     reduce using rule 235 (basic_statement -> while_statement .)
    STRING_LITERAL  reduce using rule 235 (basic_statement -> while_statement .)


state 187

    (236) basic_statement -> event_statement .

    ENDMODULE       reduce using rule 236 (basic_statement -> event_statement .)
    GENERATE        reduce using rule 236 (basic_statement -> event_statement .)
    INTEGER         reduce using rule 236 (basic_statement -> event_statement .)
    REAL            reduce using rule 236 (basic_statement -> event_statement .)
    PARAMETER       reduce using rule 236 (basic_statement -> event_statement .)
    LOCALPARAM      reduce using rule 236 (basic_statement -> event_statement .)
    GENVAR          reduce using rule 236 (basic_statement -> event_statement .)
    ASSIGN          reduce using rule 236 (basic_statement -> event_statement .)
    ALWAYS          reduce using rule 236 (basic_statement -> event_statement .)
    ALWAYS_FF       reduce using rule 236 (basic_statement -> event_statement .)
    ALWAYS_COMB     reduce using rule 236 (basic_statement -> event_statement .)
    ALWAYS_LATCH    reduce using rule 236 (basic_statement -> event_statement .)
    INITIAL         reduce using rule 236 (basic_statement -> event_statement .)
    ID              reduce using rule 236 (basic_statement -> event_statement .)
    SENS_OR         reduce using rule 236 (basic_statement -> event_statement .)
    FUNCTION        reduce using rule 236 (basic_statement -> event_statement .)
    TASK            reduce using rule 236 (basic_statement -> event_statement .)
    LPAREN          reduce using rule 236 (basic_statement -> event_statement .)
    INPUT           reduce using rule 236 (basic_statement -> event_statement .)
    OUTPUT          reduce using rule 236 (basic_statement -> event_statement .)
    INOUT           reduce using rule 236 (basic_statement -> event_statement .)
    TRI             reduce using rule 236 (basic_statement -> event_statement .)
    REG             reduce using rule 236 (basic_statement -> event_statement .)
    LOGIC           reduce using rule 236 (basic_statement -> event_statement .)
    WIRE            reduce using rule 236 (basic_statement -> event_statement .)
    SIGNED          reduce using rule 236 (basic_statement -> event_statement .)
    SUPPLY0         reduce using rule 236 (basic_statement -> event_statement .)
    SUPPLY1         reduce using rule 236 (basic_statement -> event_statement .)
    ENDGENERATE     reduce using rule 236 (basic_statement -> event_statement .)
    IF              reduce using rule 236 (basic_statement -> event_statement .)
    FOR             reduce using rule 236 (basic_statement -> event_statement .)
    ELSE            reduce using rule 236 (basic_statement -> event_statement .)
    END             reduce using rule 236 (basic_statement -> event_statement .)
    CASE            reduce using rule 236 (basic_statement -> event_statement .)
    CASEX           reduce using rule 236 (basic_statement -> event_statement .)
    CASEZ           reduce using rule 236 (basic_statement -> event_statement .)
    UNIQUE          reduce using rule 236 (basic_statement -> event_statement .)
    WHILE           reduce using rule 236 (basic_statement -> event_statement .)
    WAIT            reduce using rule 236 (basic_statement -> event_statement .)
    FOREVER         reduce using rule 236 (basic_statement -> event_statement .)
    BEGIN           reduce using rule 236 (basic_statement -> event_statement .)
    FORK            reduce using rule 236 (basic_statement -> event_statement .)
    DELAY           reduce using rule 236 (basic_statement -> event_statement .)
    AT              reduce using rule 236 (basic_statement -> event_statement .)
    DOLLER          reduce using rule 236 (basic_statement -> event_statement .)
    DISABLE         reduce using rule 236 (basic_statement -> event_statement .)
    LBRACE          reduce using rule 236 (basic_statement -> event_statement .)
    SEMICOLON       reduce using rule 236 (basic_statement -> event_statement .)
    JOIN            reduce using rule 236 (basic_statement -> event_statement .)
    ENDFUNCTION     reduce using rule 236 (basic_statement -> event_statement .)
    ENDTASK         reduce using rule 236 (basic_statement -> event_statement .)
    ENDCASE         reduce using rule 236 (basic_statement -> event_statement .)
    DEFAULT         reduce using rule 236 (basic_statement -> event_statement .)
    MINUS           reduce using rule 236 (basic_statement -> event_statement .)
    PLUS            reduce using rule 236 (basic_statement -> event_statement .)
    LNOT            reduce using rule 236 (basic_statement -> event_statement .)
    NOT             reduce using rule 236 (basic_statement -> event_statement .)
    AND             reduce using rule 236 (basic_statement -> event_statement .)
    NAND            reduce using rule 236 (basic_statement -> event_statement .)
    NOR             reduce using rule 236 (basic_statement -> event_statement .)
    OR              reduce using rule 236 (basic_statement -> event_statement .)
    XOR             reduce using rule 236 (basic_statement -> event_statement .)
    XNOR            reduce using rule 236 (basic_statement -> event_statement .)
    INTNUMBER_DEC   reduce using rule 236 (basic_statement -> event_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 236 (basic_statement -> event_statement .)
    INTNUMBER_BIN   reduce using rule 236 (basic_statement -> event_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 236 (basic_statement -> event_statement .)
    INTNUMBER_OCT   reduce using rule 236 (basic_statement -> event_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 236 (basic_statement -> event_statement .)
    INTNUMBER_HEX   reduce using rule 236 (basic_statement -> event_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 236 (basic_statement -> event_statement .)
    FLOATNUMBER     reduce using rule 236 (basic_statement -> event_statement .)
    STRING_LITERAL  reduce using rule 236 (basic_statement -> event_statement .)


state 188

    (237) basic_statement -> wait_statement .

    ENDMODULE       reduce using rule 237 (basic_statement -> wait_statement .)
    GENERATE        reduce using rule 237 (basic_statement -> wait_statement .)
    INTEGER         reduce using rule 237 (basic_statement -> wait_statement .)
    REAL            reduce using rule 237 (basic_statement -> wait_statement .)
    PARAMETER       reduce using rule 237 (basic_statement -> wait_statement .)
    LOCALPARAM      reduce using rule 237 (basic_statement -> wait_statement .)
    GENVAR          reduce using rule 237 (basic_statement -> wait_statement .)
    ASSIGN          reduce using rule 237 (basic_statement -> wait_statement .)
    ALWAYS          reduce using rule 237 (basic_statement -> wait_statement .)
    ALWAYS_FF       reduce using rule 237 (basic_statement -> wait_statement .)
    ALWAYS_COMB     reduce using rule 237 (basic_statement -> wait_statement .)
    ALWAYS_LATCH    reduce using rule 237 (basic_statement -> wait_statement .)
    INITIAL         reduce using rule 237 (basic_statement -> wait_statement .)
    ID              reduce using rule 237 (basic_statement -> wait_statement .)
    SENS_OR         reduce using rule 237 (basic_statement -> wait_statement .)
    FUNCTION        reduce using rule 237 (basic_statement -> wait_statement .)
    TASK            reduce using rule 237 (basic_statement -> wait_statement .)
    LPAREN          reduce using rule 237 (basic_statement -> wait_statement .)
    INPUT           reduce using rule 237 (basic_statement -> wait_statement .)
    OUTPUT          reduce using rule 237 (basic_statement -> wait_statement .)
    INOUT           reduce using rule 237 (basic_statement -> wait_statement .)
    TRI             reduce using rule 237 (basic_statement -> wait_statement .)
    REG             reduce using rule 237 (basic_statement -> wait_statement .)
    LOGIC           reduce using rule 237 (basic_statement -> wait_statement .)
    WIRE            reduce using rule 237 (basic_statement -> wait_statement .)
    SIGNED          reduce using rule 237 (basic_statement -> wait_statement .)
    SUPPLY0         reduce using rule 237 (basic_statement -> wait_statement .)
    SUPPLY1         reduce using rule 237 (basic_statement -> wait_statement .)
    ENDGENERATE     reduce using rule 237 (basic_statement -> wait_statement .)
    IF              reduce using rule 237 (basic_statement -> wait_statement .)
    FOR             reduce using rule 237 (basic_statement -> wait_statement .)
    ELSE            reduce using rule 237 (basic_statement -> wait_statement .)
    END             reduce using rule 237 (basic_statement -> wait_statement .)
    CASE            reduce using rule 237 (basic_statement -> wait_statement .)
    CASEX           reduce using rule 237 (basic_statement -> wait_statement .)
    CASEZ           reduce using rule 237 (basic_statement -> wait_statement .)
    UNIQUE          reduce using rule 237 (basic_statement -> wait_statement .)
    WHILE           reduce using rule 237 (basic_statement -> wait_statement .)
    WAIT            reduce using rule 237 (basic_statement -> wait_statement .)
    FOREVER         reduce using rule 237 (basic_statement -> wait_statement .)
    BEGIN           reduce using rule 237 (basic_statement -> wait_statement .)
    FORK            reduce using rule 237 (basic_statement -> wait_statement .)
    DELAY           reduce using rule 237 (basic_statement -> wait_statement .)
    AT              reduce using rule 237 (basic_statement -> wait_statement .)
    DOLLER          reduce using rule 237 (basic_statement -> wait_statement .)
    DISABLE         reduce using rule 237 (basic_statement -> wait_statement .)
    LBRACE          reduce using rule 237 (basic_statement -> wait_statement .)
    SEMICOLON       reduce using rule 237 (basic_statement -> wait_statement .)
    JOIN            reduce using rule 237 (basic_statement -> wait_statement .)
    ENDFUNCTION     reduce using rule 237 (basic_statement -> wait_statement .)
    ENDTASK         reduce using rule 237 (basic_statement -> wait_statement .)
    ENDCASE         reduce using rule 237 (basic_statement -> wait_statement .)
    DEFAULT         reduce using rule 237 (basic_statement -> wait_statement .)
    MINUS           reduce using rule 237 (basic_statement -> wait_statement .)
    PLUS            reduce using rule 237 (basic_statement -> wait_statement .)
    LNOT            reduce using rule 237 (basic_statement -> wait_statement .)
    NOT             reduce using rule 237 (basic_statement -> wait_statement .)
    AND             reduce using rule 237 (basic_statement -> wait_statement .)
    NAND            reduce using rule 237 (basic_statement -> wait_statement .)
    NOR             reduce using rule 237 (basic_statement -> wait_statement .)
    OR              reduce using rule 237 (basic_statement -> wait_statement .)
    XOR             reduce using rule 237 (basic_statement -> wait_statement .)
    XNOR            reduce using rule 237 (basic_statement -> wait_statement .)
    INTNUMBER_DEC   reduce using rule 237 (basic_statement -> wait_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 237 (basic_statement -> wait_statement .)
    INTNUMBER_BIN   reduce using rule 237 (basic_statement -> wait_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 237 (basic_statement -> wait_statement .)
    INTNUMBER_OCT   reduce using rule 237 (basic_statement -> wait_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 237 (basic_statement -> wait_statement .)
    INTNUMBER_HEX   reduce using rule 237 (basic_statement -> wait_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 237 (basic_statement -> wait_statement .)
    FLOATNUMBER     reduce using rule 237 (basic_statement -> wait_statement .)
    STRING_LITERAL  reduce using rule 237 (basic_statement -> wait_statement .)


state 189

    (238) basic_statement -> forever_statement .

    ENDMODULE       reduce using rule 238 (basic_statement -> forever_statement .)
    GENERATE        reduce using rule 238 (basic_statement -> forever_statement .)
    INTEGER         reduce using rule 238 (basic_statement -> forever_statement .)
    REAL            reduce using rule 238 (basic_statement -> forever_statement .)
    PARAMETER       reduce using rule 238 (basic_statement -> forever_statement .)
    LOCALPARAM      reduce using rule 238 (basic_statement -> forever_statement .)
    GENVAR          reduce using rule 238 (basic_statement -> forever_statement .)
    ASSIGN          reduce using rule 238 (basic_statement -> forever_statement .)
    ALWAYS          reduce using rule 238 (basic_statement -> forever_statement .)
    ALWAYS_FF       reduce using rule 238 (basic_statement -> forever_statement .)
    ALWAYS_COMB     reduce using rule 238 (basic_statement -> forever_statement .)
    ALWAYS_LATCH    reduce using rule 238 (basic_statement -> forever_statement .)
    INITIAL         reduce using rule 238 (basic_statement -> forever_statement .)
    ID              reduce using rule 238 (basic_statement -> forever_statement .)
    SENS_OR         reduce using rule 238 (basic_statement -> forever_statement .)
    FUNCTION        reduce using rule 238 (basic_statement -> forever_statement .)
    TASK            reduce using rule 238 (basic_statement -> forever_statement .)
    LPAREN          reduce using rule 238 (basic_statement -> forever_statement .)
    INPUT           reduce using rule 238 (basic_statement -> forever_statement .)
    OUTPUT          reduce using rule 238 (basic_statement -> forever_statement .)
    INOUT           reduce using rule 238 (basic_statement -> forever_statement .)
    TRI             reduce using rule 238 (basic_statement -> forever_statement .)
    REG             reduce using rule 238 (basic_statement -> forever_statement .)
    LOGIC           reduce using rule 238 (basic_statement -> forever_statement .)
    WIRE            reduce using rule 238 (basic_statement -> forever_statement .)
    SIGNED          reduce using rule 238 (basic_statement -> forever_statement .)
    SUPPLY0         reduce using rule 238 (basic_statement -> forever_statement .)
    SUPPLY1         reduce using rule 238 (basic_statement -> forever_statement .)
    ENDGENERATE     reduce using rule 238 (basic_statement -> forever_statement .)
    IF              reduce using rule 238 (basic_statement -> forever_statement .)
    FOR             reduce using rule 238 (basic_statement -> forever_statement .)
    ELSE            reduce using rule 238 (basic_statement -> forever_statement .)
    END             reduce using rule 238 (basic_statement -> forever_statement .)
    CASE            reduce using rule 238 (basic_statement -> forever_statement .)
    CASEX           reduce using rule 238 (basic_statement -> forever_statement .)
    CASEZ           reduce using rule 238 (basic_statement -> forever_statement .)
    UNIQUE          reduce using rule 238 (basic_statement -> forever_statement .)
    WHILE           reduce using rule 238 (basic_statement -> forever_statement .)
    WAIT            reduce using rule 238 (basic_statement -> forever_statement .)
    FOREVER         reduce using rule 238 (basic_statement -> forever_statement .)
    BEGIN           reduce using rule 238 (basic_statement -> forever_statement .)
    FORK            reduce using rule 238 (basic_statement -> forever_statement .)
    DELAY           reduce using rule 238 (basic_statement -> forever_statement .)
    AT              reduce using rule 238 (basic_statement -> forever_statement .)
    DOLLER          reduce using rule 238 (basic_statement -> forever_statement .)
    DISABLE         reduce using rule 238 (basic_statement -> forever_statement .)
    LBRACE          reduce using rule 238 (basic_statement -> forever_statement .)
    SEMICOLON       reduce using rule 238 (basic_statement -> forever_statement .)
    JOIN            reduce using rule 238 (basic_statement -> forever_statement .)
    ENDFUNCTION     reduce using rule 238 (basic_statement -> forever_statement .)
    ENDTASK         reduce using rule 238 (basic_statement -> forever_statement .)
    ENDCASE         reduce using rule 238 (basic_statement -> forever_statement .)
    DEFAULT         reduce using rule 238 (basic_statement -> forever_statement .)
    MINUS           reduce using rule 238 (basic_statement -> forever_statement .)
    PLUS            reduce using rule 238 (basic_statement -> forever_statement .)
    LNOT            reduce using rule 238 (basic_statement -> forever_statement .)
    NOT             reduce using rule 238 (basic_statement -> forever_statement .)
    AND             reduce using rule 238 (basic_statement -> forever_statement .)
    NAND            reduce using rule 238 (basic_statement -> forever_statement .)
    NOR             reduce using rule 238 (basic_statement -> forever_statement .)
    OR              reduce using rule 238 (basic_statement -> forever_statement .)
    XOR             reduce using rule 238 (basic_statement -> forever_statement .)
    XNOR            reduce using rule 238 (basic_statement -> forever_statement .)
    INTNUMBER_DEC   reduce using rule 238 (basic_statement -> forever_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 238 (basic_statement -> forever_statement .)
    INTNUMBER_BIN   reduce using rule 238 (basic_statement -> forever_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 238 (basic_statement -> forever_statement .)
    INTNUMBER_OCT   reduce using rule 238 (basic_statement -> forever_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 238 (basic_statement -> forever_statement .)
    INTNUMBER_HEX   reduce using rule 238 (basic_statement -> forever_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 238 (basic_statement -> forever_statement .)
    FLOATNUMBER     reduce using rule 238 (basic_statement -> forever_statement .)
    STRING_LITERAL  reduce using rule 238 (basic_statement -> forever_statement .)


state 190

    (239) basic_statement -> block .

    ENDMODULE       reduce using rule 239 (basic_statement -> block .)
    GENERATE        reduce using rule 239 (basic_statement -> block .)
    INTEGER         reduce using rule 239 (basic_statement -> block .)
    REAL            reduce using rule 239 (basic_statement -> block .)
    PARAMETER       reduce using rule 239 (basic_statement -> block .)
    LOCALPARAM      reduce using rule 239 (basic_statement -> block .)
    GENVAR          reduce using rule 239 (basic_statement -> block .)
    ASSIGN          reduce using rule 239 (basic_statement -> block .)
    ALWAYS          reduce using rule 239 (basic_statement -> block .)
    ALWAYS_FF       reduce using rule 239 (basic_statement -> block .)
    ALWAYS_COMB     reduce using rule 239 (basic_statement -> block .)
    ALWAYS_LATCH    reduce using rule 239 (basic_statement -> block .)
    INITIAL         reduce using rule 239 (basic_statement -> block .)
    ID              reduce using rule 239 (basic_statement -> block .)
    SENS_OR         reduce using rule 239 (basic_statement -> block .)
    FUNCTION        reduce using rule 239 (basic_statement -> block .)
    TASK            reduce using rule 239 (basic_statement -> block .)
    LPAREN          reduce using rule 239 (basic_statement -> block .)
    INPUT           reduce using rule 239 (basic_statement -> block .)
    OUTPUT          reduce using rule 239 (basic_statement -> block .)
    INOUT           reduce using rule 239 (basic_statement -> block .)
    TRI             reduce using rule 239 (basic_statement -> block .)
    REG             reduce using rule 239 (basic_statement -> block .)
    LOGIC           reduce using rule 239 (basic_statement -> block .)
    WIRE            reduce using rule 239 (basic_statement -> block .)
    SIGNED          reduce using rule 239 (basic_statement -> block .)
    SUPPLY0         reduce using rule 239 (basic_statement -> block .)
    SUPPLY1         reduce using rule 239 (basic_statement -> block .)
    ENDGENERATE     reduce using rule 239 (basic_statement -> block .)
    IF              reduce using rule 239 (basic_statement -> block .)
    FOR             reduce using rule 239 (basic_statement -> block .)
    ELSE            reduce using rule 239 (basic_statement -> block .)
    END             reduce using rule 239 (basic_statement -> block .)
    CASE            reduce using rule 239 (basic_statement -> block .)
    CASEX           reduce using rule 239 (basic_statement -> block .)
    CASEZ           reduce using rule 239 (basic_statement -> block .)
    UNIQUE          reduce using rule 239 (basic_statement -> block .)
    WHILE           reduce using rule 239 (basic_statement -> block .)
    WAIT            reduce using rule 239 (basic_statement -> block .)
    FOREVER         reduce using rule 239 (basic_statement -> block .)
    BEGIN           reduce using rule 239 (basic_statement -> block .)
    FORK            reduce using rule 239 (basic_statement -> block .)
    DELAY           reduce using rule 239 (basic_statement -> block .)
    AT              reduce using rule 239 (basic_statement -> block .)
    DOLLER          reduce using rule 239 (basic_statement -> block .)
    DISABLE         reduce using rule 239 (basic_statement -> block .)
    LBRACE          reduce using rule 239 (basic_statement -> block .)
    SEMICOLON       reduce using rule 239 (basic_statement -> block .)
    JOIN            reduce using rule 239 (basic_statement -> block .)
    ENDFUNCTION     reduce using rule 239 (basic_statement -> block .)
    ENDTASK         reduce using rule 239 (basic_statement -> block .)
    ENDCASE         reduce using rule 239 (basic_statement -> block .)
    DEFAULT         reduce using rule 239 (basic_statement -> block .)
    MINUS           reduce using rule 239 (basic_statement -> block .)
    PLUS            reduce using rule 239 (basic_statement -> block .)
    LNOT            reduce using rule 239 (basic_statement -> block .)
    NOT             reduce using rule 239 (basic_statement -> block .)
    AND             reduce using rule 239 (basic_statement -> block .)
    NAND            reduce using rule 239 (basic_statement -> block .)
    NOR             reduce using rule 239 (basic_statement -> block .)
    OR              reduce using rule 239 (basic_statement -> block .)
    XOR             reduce using rule 239 (basic_statement -> block .)
    XNOR            reduce using rule 239 (basic_statement -> block .)
    INTNUMBER_DEC   reduce using rule 239 (basic_statement -> block .)
    SIGNED_INTNUMBER_DEC reduce using rule 239 (basic_statement -> block .)
    INTNUMBER_BIN   reduce using rule 239 (basic_statement -> block .)
    SIGNED_INTNUMBER_BIN reduce using rule 239 (basic_statement -> block .)
    INTNUMBER_OCT   reduce using rule 239 (basic_statement -> block .)
    SIGNED_INTNUMBER_OCT reduce using rule 239 (basic_statement -> block .)
    INTNUMBER_HEX   reduce using rule 239 (basic_statement -> block .)
    SIGNED_INTNUMBER_HEX reduce using rule 239 (basic_statement -> block .)
    FLOATNUMBER     reduce using rule 239 (basic_statement -> block .)
    STRING_LITERAL  reduce using rule 239 (basic_statement -> block .)


state 191

    (240) basic_statement -> namedblock .

    ENDMODULE       reduce using rule 240 (basic_statement -> namedblock .)
    GENERATE        reduce using rule 240 (basic_statement -> namedblock .)
    INTEGER         reduce using rule 240 (basic_statement -> namedblock .)
    REAL            reduce using rule 240 (basic_statement -> namedblock .)
    PARAMETER       reduce using rule 240 (basic_statement -> namedblock .)
    LOCALPARAM      reduce using rule 240 (basic_statement -> namedblock .)
    GENVAR          reduce using rule 240 (basic_statement -> namedblock .)
    ASSIGN          reduce using rule 240 (basic_statement -> namedblock .)
    ALWAYS          reduce using rule 240 (basic_statement -> namedblock .)
    ALWAYS_FF       reduce using rule 240 (basic_statement -> namedblock .)
    ALWAYS_COMB     reduce using rule 240 (basic_statement -> namedblock .)
    ALWAYS_LATCH    reduce using rule 240 (basic_statement -> namedblock .)
    INITIAL         reduce using rule 240 (basic_statement -> namedblock .)
    ID              reduce using rule 240 (basic_statement -> namedblock .)
    SENS_OR         reduce using rule 240 (basic_statement -> namedblock .)
    FUNCTION        reduce using rule 240 (basic_statement -> namedblock .)
    TASK            reduce using rule 240 (basic_statement -> namedblock .)
    LPAREN          reduce using rule 240 (basic_statement -> namedblock .)
    INPUT           reduce using rule 240 (basic_statement -> namedblock .)
    OUTPUT          reduce using rule 240 (basic_statement -> namedblock .)
    INOUT           reduce using rule 240 (basic_statement -> namedblock .)
    TRI             reduce using rule 240 (basic_statement -> namedblock .)
    REG             reduce using rule 240 (basic_statement -> namedblock .)
    LOGIC           reduce using rule 240 (basic_statement -> namedblock .)
    WIRE            reduce using rule 240 (basic_statement -> namedblock .)
    SIGNED          reduce using rule 240 (basic_statement -> namedblock .)
    SUPPLY0         reduce using rule 240 (basic_statement -> namedblock .)
    SUPPLY1         reduce using rule 240 (basic_statement -> namedblock .)
    ENDGENERATE     reduce using rule 240 (basic_statement -> namedblock .)
    IF              reduce using rule 240 (basic_statement -> namedblock .)
    FOR             reduce using rule 240 (basic_statement -> namedblock .)
    ELSE            reduce using rule 240 (basic_statement -> namedblock .)
    END             reduce using rule 240 (basic_statement -> namedblock .)
    CASE            reduce using rule 240 (basic_statement -> namedblock .)
    CASEX           reduce using rule 240 (basic_statement -> namedblock .)
    CASEZ           reduce using rule 240 (basic_statement -> namedblock .)
    UNIQUE          reduce using rule 240 (basic_statement -> namedblock .)
    WHILE           reduce using rule 240 (basic_statement -> namedblock .)
    WAIT            reduce using rule 240 (basic_statement -> namedblock .)
    FOREVER         reduce using rule 240 (basic_statement -> namedblock .)
    BEGIN           reduce using rule 240 (basic_statement -> namedblock .)
    FORK            reduce using rule 240 (basic_statement -> namedblock .)
    DELAY           reduce using rule 240 (basic_statement -> namedblock .)
    AT              reduce using rule 240 (basic_statement -> namedblock .)
    DOLLER          reduce using rule 240 (basic_statement -> namedblock .)
    DISABLE         reduce using rule 240 (basic_statement -> namedblock .)
    LBRACE          reduce using rule 240 (basic_statement -> namedblock .)
    SEMICOLON       reduce using rule 240 (basic_statement -> namedblock .)
    JOIN            reduce using rule 240 (basic_statement -> namedblock .)
    ENDFUNCTION     reduce using rule 240 (basic_statement -> namedblock .)
    ENDTASK         reduce using rule 240 (basic_statement -> namedblock .)
    ENDCASE         reduce using rule 240 (basic_statement -> namedblock .)
    DEFAULT         reduce using rule 240 (basic_statement -> namedblock .)
    MINUS           reduce using rule 240 (basic_statement -> namedblock .)
    PLUS            reduce using rule 240 (basic_statement -> namedblock .)
    LNOT            reduce using rule 240 (basic_statement -> namedblock .)
    NOT             reduce using rule 240 (basic_statement -> namedblock .)
    AND             reduce using rule 240 (basic_statement -> namedblock .)
    NAND            reduce using rule 240 (basic_statement -> namedblock .)
    NOR             reduce using rule 240 (basic_statement -> namedblock .)
    OR              reduce using rule 240 (basic_statement -> namedblock .)
    XOR             reduce using rule 240 (basic_statement -> namedblock .)
    XNOR            reduce using rule 240 (basic_statement -> namedblock .)
    INTNUMBER_DEC   reduce using rule 240 (basic_statement -> namedblock .)
    SIGNED_INTNUMBER_DEC reduce using rule 240 (basic_statement -> namedblock .)
    INTNUMBER_BIN   reduce using rule 240 (basic_statement -> namedblock .)
    SIGNED_INTNUMBER_BIN reduce using rule 240 (basic_statement -> namedblock .)
    INTNUMBER_OCT   reduce using rule 240 (basic_statement -> namedblock .)
    SIGNED_INTNUMBER_OCT reduce using rule 240 (basic_statement -> namedblock .)
    INTNUMBER_HEX   reduce using rule 240 (basic_statement -> namedblock .)
    SIGNED_INTNUMBER_HEX reduce using rule 240 (basic_statement -> namedblock .)
    FLOATNUMBER     reduce using rule 240 (basic_statement -> namedblock .)
    STRING_LITERAL  reduce using rule 240 (basic_statement -> namedblock .)


state 192

    (241) basic_statement -> parallelblock .

    ENDMODULE       reduce using rule 241 (basic_statement -> parallelblock .)
    GENERATE        reduce using rule 241 (basic_statement -> parallelblock .)
    INTEGER         reduce using rule 241 (basic_statement -> parallelblock .)
    REAL            reduce using rule 241 (basic_statement -> parallelblock .)
    PARAMETER       reduce using rule 241 (basic_statement -> parallelblock .)
    LOCALPARAM      reduce using rule 241 (basic_statement -> parallelblock .)
    GENVAR          reduce using rule 241 (basic_statement -> parallelblock .)
    ASSIGN          reduce using rule 241 (basic_statement -> parallelblock .)
    ALWAYS          reduce using rule 241 (basic_statement -> parallelblock .)
    ALWAYS_FF       reduce using rule 241 (basic_statement -> parallelblock .)
    ALWAYS_COMB     reduce using rule 241 (basic_statement -> parallelblock .)
    ALWAYS_LATCH    reduce using rule 241 (basic_statement -> parallelblock .)
    INITIAL         reduce using rule 241 (basic_statement -> parallelblock .)
    ID              reduce using rule 241 (basic_statement -> parallelblock .)
    SENS_OR         reduce using rule 241 (basic_statement -> parallelblock .)
    FUNCTION        reduce using rule 241 (basic_statement -> parallelblock .)
    TASK            reduce using rule 241 (basic_statement -> parallelblock .)
    LPAREN          reduce using rule 241 (basic_statement -> parallelblock .)
    INPUT           reduce using rule 241 (basic_statement -> parallelblock .)
    OUTPUT          reduce using rule 241 (basic_statement -> parallelblock .)
    INOUT           reduce using rule 241 (basic_statement -> parallelblock .)
    TRI             reduce using rule 241 (basic_statement -> parallelblock .)
    REG             reduce using rule 241 (basic_statement -> parallelblock .)
    LOGIC           reduce using rule 241 (basic_statement -> parallelblock .)
    WIRE            reduce using rule 241 (basic_statement -> parallelblock .)
    SIGNED          reduce using rule 241 (basic_statement -> parallelblock .)
    SUPPLY0         reduce using rule 241 (basic_statement -> parallelblock .)
    SUPPLY1         reduce using rule 241 (basic_statement -> parallelblock .)
    ENDGENERATE     reduce using rule 241 (basic_statement -> parallelblock .)
    IF              reduce using rule 241 (basic_statement -> parallelblock .)
    FOR             reduce using rule 241 (basic_statement -> parallelblock .)
    ELSE            reduce using rule 241 (basic_statement -> parallelblock .)
    END             reduce using rule 241 (basic_statement -> parallelblock .)
    CASE            reduce using rule 241 (basic_statement -> parallelblock .)
    CASEX           reduce using rule 241 (basic_statement -> parallelblock .)
    CASEZ           reduce using rule 241 (basic_statement -> parallelblock .)
    UNIQUE          reduce using rule 241 (basic_statement -> parallelblock .)
    WHILE           reduce using rule 241 (basic_statement -> parallelblock .)
    WAIT            reduce using rule 241 (basic_statement -> parallelblock .)
    FOREVER         reduce using rule 241 (basic_statement -> parallelblock .)
    BEGIN           reduce using rule 241 (basic_statement -> parallelblock .)
    FORK            reduce using rule 241 (basic_statement -> parallelblock .)
    DELAY           reduce using rule 241 (basic_statement -> parallelblock .)
    AT              reduce using rule 241 (basic_statement -> parallelblock .)
    DOLLER          reduce using rule 241 (basic_statement -> parallelblock .)
    DISABLE         reduce using rule 241 (basic_statement -> parallelblock .)
    LBRACE          reduce using rule 241 (basic_statement -> parallelblock .)
    SEMICOLON       reduce using rule 241 (basic_statement -> parallelblock .)
    JOIN            reduce using rule 241 (basic_statement -> parallelblock .)
    ENDFUNCTION     reduce using rule 241 (basic_statement -> parallelblock .)
    ENDTASK         reduce using rule 241 (basic_statement -> parallelblock .)
    ENDCASE         reduce using rule 241 (basic_statement -> parallelblock .)
    DEFAULT         reduce using rule 241 (basic_statement -> parallelblock .)
    MINUS           reduce using rule 241 (basic_statement -> parallelblock .)
    PLUS            reduce using rule 241 (basic_statement -> parallelblock .)
    LNOT            reduce using rule 241 (basic_statement -> parallelblock .)
    NOT             reduce using rule 241 (basic_statement -> parallelblock .)
    AND             reduce using rule 241 (basic_statement -> parallelblock .)
    NAND            reduce using rule 241 (basic_statement -> parallelblock .)
    NOR             reduce using rule 241 (basic_statement -> parallelblock .)
    OR              reduce using rule 241 (basic_statement -> parallelblock .)
    XOR             reduce using rule 241 (basic_statement -> parallelblock .)
    XNOR            reduce using rule 241 (basic_statement -> parallelblock .)
    INTNUMBER_DEC   reduce using rule 241 (basic_statement -> parallelblock .)
    SIGNED_INTNUMBER_DEC reduce using rule 241 (basic_statement -> parallelblock .)
    INTNUMBER_BIN   reduce using rule 241 (basic_statement -> parallelblock .)
    SIGNED_INTNUMBER_BIN reduce using rule 241 (basic_statement -> parallelblock .)
    INTNUMBER_OCT   reduce using rule 241 (basic_statement -> parallelblock .)
    SIGNED_INTNUMBER_OCT reduce using rule 241 (basic_statement -> parallelblock .)
    INTNUMBER_HEX   reduce using rule 241 (basic_statement -> parallelblock .)
    SIGNED_INTNUMBER_HEX reduce using rule 241 (basic_statement -> parallelblock .)
    FLOATNUMBER     reduce using rule 241 (basic_statement -> parallelblock .)
    STRING_LITERAL  reduce using rule 241 (basic_statement -> parallelblock .)


state 193

    (242) basic_statement -> blocking_substitution .

    ENDMODULE       reduce using rule 242 (basic_statement -> blocking_substitution .)
    GENERATE        reduce using rule 242 (basic_statement -> blocking_substitution .)
    INTEGER         reduce using rule 242 (basic_statement -> blocking_substitution .)
    REAL            reduce using rule 242 (basic_statement -> blocking_substitution .)
    PARAMETER       reduce using rule 242 (basic_statement -> blocking_substitution .)
    LOCALPARAM      reduce using rule 242 (basic_statement -> blocking_substitution .)
    GENVAR          reduce using rule 242 (basic_statement -> blocking_substitution .)
    ASSIGN          reduce using rule 242 (basic_statement -> blocking_substitution .)
    ALWAYS          reduce using rule 242 (basic_statement -> blocking_substitution .)
    ALWAYS_FF       reduce using rule 242 (basic_statement -> blocking_substitution .)
    ALWAYS_COMB     reduce using rule 242 (basic_statement -> blocking_substitution .)
    ALWAYS_LATCH    reduce using rule 242 (basic_statement -> blocking_substitution .)
    INITIAL         reduce using rule 242 (basic_statement -> blocking_substitution .)
    ID              reduce using rule 242 (basic_statement -> blocking_substitution .)
    SENS_OR         reduce using rule 242 (basic_statement -> blocking_substitution .)
    FUNCTION        reduce using rule 242 (basic_statement -> blocking_substitution .)
    TASK            reduce using rule 242 (basic_statement -> blocking_substitution .)
    LPAREN          reduce using rule 242 (basic_statement -> blocking_substitution .)
    INPUT           reduce using rule 242 (basic_statement -> blocking_substitution .)
    OUTPUT          reduce using rule 242 (basic_statement -> blocking_substitution .)
    INOUT           reduce using rule 242 (basic_statement -> blocking_substitution .)
    TRI             reduce using rule 242 (basic_statement -> blocking_substitution .)
    REG             reduce using rule 242 (basic_statement -> blocking_substitution .)
    LOGIC           reduce using rule 242 (basic_statement -> blocking_substitution .)
    WIRE            reduce using rule 242 (basic_statement -> blocking_substitution .)
    SIGNED          reduce using rule 242 (basic_statement -> blocking_substitution .)
    SUPPLY0         reduce using rule 242 (basic_statement -> blocking_substitution .)
    SUPPLY1         reduce using rule 242 (basic_statement -> blocking_substitution .)
    ENDGENERATE     reduce using rule 242 (basic_statement -> blocking_substitution .)
    IF              reduce using rule 242 (basic_statement -> blocking_substitution .)
    FOR             reduce using rule 242 (basic_statement -> blocking_substitution .)
    ELSE            reduce using rule 242 (basic_statement -> blocking_substitution .)
    END             reduce using rule 242 (basic_statement -> blocking_substitution .)
    CASE            reduce using rule 242 (basic_statement -> blocking_substitution .)
    CASEX           reduce using rule 242 (basic_statement -> blocking_substitution .)
    CASEZ           reduce using rule 242 (basic_statement -> blocking_substitution .)
    UNIQUE          reduce using rule 242 (basic_statement -> blocking_substitution .)
    WHILE           reduce using rule 242 (basic_statement -> blocking_substitution .)
    WAIT            reduce using rule 242 (basic_statement -> blocking_substitution .)
    FOREVER         reduce using rule 242 (basic_statement -> blocking_substitution .)
    BEGIN           reduce using rule 242 (basic_statement -> blocking_substitution .)
    FORK            reduce using rule 242 (basic_statement -> blocking_substitution .)
    DELAY           reduce using rule 242 (basic_statement -> blocking_substitution .)
    AT              reduce using rule 242 (basic_statement -> blocking_substitution .)
    DOLLER          reduce using rule 242 (basic_statement -> blocking_substitution .)
    DISABLE         reduce using rule 242 (basic_statement -> blocking_substitution .)
    LBRACE          reduce using rule 242 (basic_statement -> blocking_substitution .)
    SEMICOLON       reduce using rule 242 (basic_statement -> blocking_substitution .)
    JOIN            reduce using rule 242 (basic_statement -> blocking_substitution .)
    ENDFUNCTION     reduce using rule 242 (basic_statement -> blocking_substitution .)
    ENDTASK         reduce using rule 242 (basic_statement -> blocking_substitution .)
    ENDCASE         reduce using rule 242 (basic_statement -> blocking_substitution .)
    DEFAULT         reduce using rule 242 (basic_statement -> blocking_substitution .)
    MINUS           reduce using rule 242 (basic_statement -> blocking_substitution .)
    PLUS            reduce using rule 242 (basic_statement -> blocking_substitution .)
    LNOT            reduce using rule 242 (basic_statement -> blocking_substitution .)
    NOT             reduce using rule 242 (basic_statement -> blocking_substitution .)
    AND             reduce using rule 242 (basic_statement -> blocking_substitution .)
    NAND            reduce using rule 242 (basic_statement -> blocking_substitution .)
    NOR             reduce using rule 242 (basic_statement -> blocking_substitution .)
    OR              reduce using rule 242 (basic_statement -> blocking_substitution .)
    XOR             reduce using rule 242 (basic_statement -> blocking_substitution .)
    XNOR            reduce using rule 242 (basic_statement -> blocking_substitution .)
    INTNUMBER_DEC   reduce using rule 242 (basic_statement -> blocking_substitution .)
    SIGNED_INTNUMBER_DEC reduce using rule 242 (basic_statement -> blocking_substitution .)
    INTNUMBER_BIN   reduce using rule 242 (basic_statement -> blocking_substitution .)
    SIGNED_INTNUMBER_BIN reduce using rule 242 (basic_statement -> blocking_substitution .)
    INTNUMBER_OCT   reduce using rule 242 (basic_statement -> blocking_substitution .)
    SIGNED_INTNUMBER_OCT reduce using rule 242 (basic_statement -> blocking_substitution .)
    INTNUMBER_HEX   reduce using rule 242 (basic_statement -> blocking_substitution .)
    SIGNED_INTNUMBER_HEX reduce using rule 242 (basic_statement -> blocking_substitution .)
    FLOATNUMBER     reduce using rule 242 (basic_statement -> blocking_substitution .)
    STRING_LITERAL  reduce using rule 242 (basic_statement -> blocking_substitution .)


state 194

    (243) basic_statement -> nonblocking_substitution .

    ENDMODULE       reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    GENERATE        reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    INTEGER         reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    REAL            reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    PARAMETER       reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    LOCALPARAM      reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    GENVAR          reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    ASSIGN          reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    ALWAYS          reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    ALWAYS_FF       reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    ALWAYS_COMB     reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    ALWAYS_LATCH    reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    INITIAL         reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    ID              reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    SENS_OR         reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    FUNCTION        reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    TASK            reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    LPAREN          reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    INPUT           reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    OUTPUT          reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    INOUT           reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    TRI             reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    REG             reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    LOGIC           reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    WIRE            reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    SIGNED          reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    SUPPLY0         reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    SUPPLY1         reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    ENDGENERATE     reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    IF              reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    FOR             reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    ELSE            reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    END             reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    CASE            reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    CASEX           reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    CASEZ           reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    UNIQUE          reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    WHILE           reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    WAIT            reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    FOREVER         reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    BEGIN           reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    FORK            reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    DELAY           reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    AT              reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    DOLLER          reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    DISABLE         reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    LBRACE          reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    SEMICOLON       reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    JOIN            reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    ENDFUNCTION     reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    ENDTASK         reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    ENDCASE         reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    DEFAULT         reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    MINUS           reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    PLUS            reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    LNOT            reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    NOT             reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    AND             reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    NAND            reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    NOR             reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    OR              reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    XOR             reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    XNOR            reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    INTNUMBER_DEC   reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    SIGNED_INTNUMBER_DEC reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    INTNUMBER_BIN   reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    SIGNED_INTNUMBER_BIN reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    INTNUMBER_OCT   reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    SIGNED_INTNUMBER_OCT reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    INTNUMBER_HEX   reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    SIGNED_INTNUMBER_HEX reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    FLOATNUMBER     reduce using rule 243 (basic_statement -> nonblocking_substitution .)
    STRING_LITERAL  reduce using rule 243 (basic_statement -> nonblocking_substitution .)


state 195

    (244) basic_statement -> single_statement .

    ENDMODULE       reduce using rule 244 (basic_statement -> single_statement .)
    GENERATE        reduce using rule 244 (basic_statement -> single_statement .)
    INTEGER         reduce using rule 244 (basic_statement -> single_statement .)
    REAL            reduce using rule 244 (basic_statement -> single_statement .)
    PARAMETER       reduce using rule 244 (basic_statement -> single_statement .)
    LOCALPARAM      reduce using rule 244 (basic_statement -> single_statement .)
    GENVAR          reduce using rule 244 (basic_statement -> single_statement .)
    ASSIGN          reduce using rule 244 (basic_statement -> single_statement .)
    ALWAYS          reduce using rule 244 (basic_statement -> single_statement .)
    ALWAYS_FF       reduce using rule 244 (basic_statement -> single_statement .)
    ALWAYS_COMB     reduce using rule 244 (basic_statement -> single_statement .)
    ALWAYS_LATCH    reduce using rule 244 (basic_statement -> single_statement .)
    INITIAL         reduce using rule 244 (basic_statement -> single_statement .)
    ID              reduce using rule 244 (basic_statement -> single_statement .)
    SENS_OR         reduce using rule 244 (basic_statement -> single_statement .)
    FUNCTION        reduce using rule 244 (basic_statement -> single_statement .)
    TASK            reduce using rule 244 (basic_statement -> single_statement .)
    LPAREN          reduce using rule 244 (basic_statement -> single_statement .)
    INPUT           reduce using rule 244 (basic_statement -> single_statement .)
    OUTPUT          reduce using rule 244 (basic_statement -> single_statement .)
    INOUT           reduce using rule 244 (basic_statement -> single_statement .)
    TRI             reduce using rule 244 (basic_statement -> single_statement .)
    REG             reduce using rule 244 (basic_statement -> single_statement .)
    LOGIC           reduce using rule 244 (basic_statement -> single_statement .)
    WIRE            reduce using rule 244 (basic_statement -> single_statement .)
    SIGNED          reduce using rule 244 (basic_statement -> single_statement .)
    SUPPLY0         reduce using rule 244 (basic_statement -> single_statement .)
    SUPPLY1         reduce using rule 244 (basic_statement -> single_statement .)
    ENDGENERATE     reduce using rule 244 (basic_statement -> single_statement .)
    IF              reduce using rule 244 (basic_statement -> single_statement .)
    FOR             reduce using rule 244 (basic_statement -> single_statement .)
    ELSE            reduce using rule 244 (basic_statement -> single_statement .)
    END             reduce using rule 244 (basic_statement -> single_statement .)
    CASE            reduce using rule 244 (basic_statement -> single_statement .)
    CASEX           reduce using rule 244 (basic_statement -> single_statement .)
    CASEZ           reduce using rule 244 (basic_statement -> single_statement .)
    UNIQUE          reduce using rule 244 (basic_statement -> single_statement .)
    WHILE           reduce using rule 244 (basic_statement -> single_statement .)
    WAIT            reduce using rule 244 (basic_statement -> single_statement .)
    FOREVER         reduce using rule 244 (basic_statement -> single_statement .)
    BEGIN           reduce using rule 244 (basic_statement -> single_statement .)
    FORK            reduce using rule 244 (basic_statement -> single_statement .)
    DELAY           reduce using rule 244 (basic_statement -> single_statement .)
    AT              reduce using rule 244 (basic_statement -> single_statement .)
    DOLLER          reduce using rule 244 (basic_statement -> single_statement .)
    DISABLE         reduce using rule 244 (basic_statement -> single_statement .)
    LBRACE          reduce using rule 244 (basic_statement -> single_statement .)
    SEMICOLON       reduce using rule 244 (basic_statement -> single_statement .)
    JOIN            reduce using rule 244 (basic_statement -> single_statement .)
    ENDFUNCTION     reduce using rule 244 (basic_statement -> single_statement .)
    ENDTASK         reduce using rule 244 (basic_statement -> single_statement .)
    ENDCASE         reduce using rule 244 (basic_statement -> single_statement .)
    DEFAULT         reduce using rule 244 (basic_statement -> single_statement .)
    MINUS           reduce using rule 244 (basic_statement -> single_statement .)
    PLUS            reduce using rule 244 (basic_statement -> single_statement .)
    LNOT            reduce using rule 244 (basic_statement -> single_statement .)
    NOT             reduce using rule 244 (basic_statement -> single_statement .)
    AND             reduce using rule 244 (basic_statement -> single_statement .)
    NAND            reduce using rule 244 (basic_statement -> single_statement .)
    NOR             reduce using rule 244 (basic_statement -> single_statement .)
    OR              reduce using rule 244 (basic_statement -> single_statement .)
    XOR             reduce using rule 244 (basic_statement -> single_statement .)
    XNOR            reduce using rule 244 (basic_statement -> single_statement .)
    INTNUMBER_DEC   reduce using rule 244 (basic_statement -> single_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 244 (basic_statement -> single_statement .)
    INTNUMBER_BIN   reduce using rule 244 (basic_statement -> single_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 244 (basic_statement -> single_statement .)
    INTNUMBER_OCT   reduce using rule 244 (basic_statement -> single_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 244 (basic_statement -> single_statement .)
    INTNUMBER_HEX   reduce using rule 244 (basic_statement -> single_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 244 (basic_statement -> single_statement .)
    FLOATNUMBER     reduce using rule 244 (basic_statement -> single_statement .)
    STRING_LITERAL  reduce using rule 244 (basic_statement -> single_statement .)


state 196

    (271) if_statement -> IF . LPAREN cond RPAREN true_statement ELSE else_statement
    (272) if_statement -> IF . LPAREN cond RPAREN true_statement

    LPAREN          shift and go to state 349


state 197

    (273) if_statement -> delays . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (274) if_statement -> delays . IF LPAREN cond RPAREN true_statement
    (246) blocking_substitution -> delays . lvalue EQUALS delays rvalue SEMICOLON
    (248) nonblocking_substitution -> delays . lvalue LE delays rvalue SEMICOLON
    (131) lvalue -> . lpartselect
    (132) lvalue -> . lpointer
    (133) lvalue -> . lconcat
    (134) lvalue -> . identifier
    (117) lpartselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (118) lpartselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (119) lpartselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (120) lpartselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (121) lpartselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (122) lpartselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (123) lpointer -> . pointer
    (124) lconcat -> . LBRACE lconcatlist RBRACE
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT

    IF              shift and go to state 350
    LBRACE          shift and go to state 171
    ID              shift and go to state 88

    lvalue                         shift and go to state 351
    lpartselect                    shift and go to state 166
    lpointer                       shift and go to state 167
    lconcat                        shift and go to state 168
    identifier                     shift and go to state 169
    pointer                        shift and go to state 170
    scope                          shift and go to state 110

state 198

    (289) case_statement -> CASE . LPAREN case_comp RPAREN casecontent_statements ENDCASE

    LPAREN          shift and go to state 352


state 199

    (290) casex_statement -> CASEX . LPAREN case_comp RPAREN casecontent_statements ENDCASE

    LPAREN          shift and go to state 353


state 200

    (291) casez_statement -> CASEZ . LPAREN case_comp RPAREN casecontent_statements ENDCASE

    LPAREN          shift and go to state 354


state 201

    (292) unique_case_statement -> UNIQUE . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE

    CASE            shift and go to state 355


state 202

    (279) for_statement -> FOR . LPAREN forpre forcond forpost RPAREN forcontent_statement

    LPAREN          shift and go to state 356


state 203

    (287) while_statement -> WHILE . LPAREN cond RPAREN whilecontent_statement

    LPAREN          shift and go to state 357


state 204

    (302) event_statement -> senslist . SEMICOLON

    SEMICOLON       shift and go to state 358


state 205

    (303) wait_statement -> WAIT . LPAREN cond RPAREN waitcontent_statement

    LPAREN          shift and go to state 359


state 206

    (306) forever_statement -> FOREVER . basic_statement
    (229) basic_statement -> . if_statement
    (230) basic_statement -> . case_statement
    (231) basic_statement -> . casex_statement
    (232) basic_statement -> . casez_statement
    (233) basic_statement -> . unique_case_statement
    (234) basic_statement -> . for_statement
    (235) basic_statement -> . while_statement
    (236) basic_statement -> . event_statement
    (237) basic_statement -> . wait_statement
    (238) basic_statement -> . forever_statement
    (239) basic_statement -> . block
    (240) basic_statement -> . namedblock
    (241) basic_statement -> . parallelblock
    (242) basic_statement -> . blocking_substitution
    (243) basic_statement -> . nonblocking_substitution
    (244) basic_statement -> . single_statement
    (271) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (272) if_statement -> . IF LPAREN cond RPAREN true_statement
    (273) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (274) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (289) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (290) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (291) casez_statement -> . CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (292) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (279) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (287) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (302) event_statement -> . senslist SEMICOLON
    (303) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (306) forever_statement -> . FOREVER basic_statement
    (254) block -> . BEGIN block_statements END
    (255) block -> . BEGIN END
    (259) namedblock -> . BEGIN COLON ID namedblock_statements END
    (260) namedblock -> . BEGIN COLON ID END
    (269) parallelblock -> . FORK block_statements JOIN
    (270) parallelblock -> . FORK JOIN
    (246) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (248) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (410) single_statement -> . DELAY expression SEMICOLON
    (411) single_statement -> . systemcall SEMICOLON
    (412) single_statement -> . disable SEMICOLON
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (209) senslist -> . AT LPAREN edgesigs RPAREN
    (217) senslist -> . empty
    (218) senslist -> . AT levelsig
    (219) senslist -> . AT LPAREN levelsigs RPAREN
    (227) senslist -> . AT TIMES
    (228) senslist -> . AT LPAREN TIMES RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (409) disable -> . DISABLE ID
    (413) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 196
    CASE            shift and go to state 198
    CASEX           shift and go to state 199
    CASEZ           shift and go to state 200
    UNIQUE          shift and go to state 201
    FOR             shift and go to state 202
    WHILE           shift and go to state 203
    WAIT            shift and go to state 205
    FOREVER         shift and go to state 206
    BEGIN           shift and go to state 207
    FORK            shift and go to state 208
    DELAY           shift and go to state 209
    AT              shift and go to state 173
    DOLLER          shift and go to state 109
    DISABLE         shift and go to state 213
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    SEMICOLON       reduce using rule 413 (empty -> .)

  ! IF              [ reduce using rule 413 (empty -> .) ]

    basic_statement                shift and go to state 360
    if_statement                   shift and go to state 180
    case_statement                 shift and go to state 181
    casex_statement                shift and go to state 182
    casez_statement                shift and go to state 183
    unique_case_statement          shift and go to state 184
    for_statement                  shift and go to state 185
    while_statement                shift and go to state 186
    event_statement                shift and go to state 187
    wait_statement                 shift and go to state 188
    forever_statement              shift and go to state 189
    block                          shift and go to state 190
    namedblock                     shift and go to state 191
    parallelblock                  shift and go to state 192
    blocking_substitution          shift and go to state 193
    nonblocking_substitution       shift and go to state 194
    single_statement               shift and go to state 195
    delays                         shift and go to state 197
    senslist                       shift and go to state 204
    systemcall                     shift and go to state 210
    disable                        shift and go to state 211
    empty                          shift and go to state 212

state 207

    (254) block -> BEGIN . block_statements END
    (255) block -> BEGIN . END
    (259) namedblock -> BEGIN . COLON ID namedblock_statements END
    (260) namedblock -> BEGIN . COLON ID END
    (256) block_statements -> . block_statements block_statement
    (257) block_statements -> . block_statement
    (258) block_statement -> . basic_statement
    (229) basic_statement -> . if_statement
    (230) basic_statement -> . case_statement
    (231) basic_statement -> . casex_statement
    (232) basic_statement -> . casez_statement
    (233) basic_statement -> . unique_case_statement
    (234) basic_statement -> . for_statement
    (235) basic_statement -> . while_statement
    (236) basic_statement -> . event_statement
    (237) basic_statement -> . wait_statement
    (238) basic_statement -> . forever_statement
    (239) basic_statement -> . block
    (240) basic_statement -> . namedblock
    (241) basic_statement -> . parallelblock
    (242) basic_statement -> . blocking_substitution
    (243) basic_statement -> . nonblocking_substitution
    (244) basic_statement -> . single_statement
    (271) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (272) if_statement -> . IF LPAREN cond RPAREN true_statement
    (273) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (274) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (289) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (290) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (291) casez_statement -> . CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (292) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (279) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (287) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (302) event_statement -> . senslist SEMICOLON
    (303) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (306) forever_statement -> . FOREVER basic_statement
    (254) block -> . BEGIN block_statements END
    (255) block -> . BEGIN END
    (259) namedblock -> . BEGIN COLON ID namedblock_statements END
    (260) namedblock -> . BEGIN COLON ID END
    (269) parallelblock -> . FORK block_statements JOIN
    (270) parallelblock -> . FORK JOIN
    (246) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (248) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (410) single_statement -> . DELAY expression SEMICOLON
    (411) single_statement -> . systemcall SEMICOLON
    (412) single_statement -> . disable SEMICOLON
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (209) senslist -> . AT LPAREN edgesigs RPAREN
    (217) senslist -> . empty
    (218) senslist -> . AT levelsig
    (219) senslist -> . AT LPAREN levelsigs RPAREN
    (227) senslist -> . AT TIMES
    (228) senslist -> . AT LPAREN TIMES RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (409) disable -> . DISABLE ID
    (413) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    END             shift and go to state 362
    COLON           shift and go to state 363
    IF              shift and go to state 196
    CASE            shift and go to state 198
    CASEX           shift and go to state 199
    CASEZ           shift and go to state 200
    UNIQUE          shift and go to state 201
    FOR             shift and go to state 202
    WHILE           shift and go to state 203
    WAIT            shift and go to state 205
    FOREVER         shift and go to state 206
    BEGIN           shift and go to state 207
    FORK            shift and go to state 208
    DELAY           shift and go to state 209
    AT              shift and go to state 173
    DOLLER          shift and go to state 109
    DISABLE         shift and go to state 213
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    SEMICOLON       reduce using rule 413 (empty -> .)

  ! IF              [ reduce using rule 413 (empty -> .) ]

    block_statements               shift and go to state 361
    block_statement                shift and go to state 364
    basic_statement                shift and go to state 365
    if_statement                   shift and go to state 180
    case_statement                 shift and go to state 181
    casex_statement                shift and go to state 182
    casez_statement                shift and go to state 183
    unique_case_statement          shift and go to state 184
    for_statement                  shift and go to state 185
    while_statement                shift and go to state 186
    event_statement                shift and go to state 187
    wait_statement                 shift and go to state 188
    forever_statement              shift and go to state 189
    block                          shift and go to state 190
    namedblock                     shift and go to state 191
    parallelblock                  shift and go to state 192
    blocking_substitution          shift and go to state 193
    nonblocking_substitution       shift and go to state 194
    single_statement               shift and go to state 195
    delays                         shift and go to state 197
    senslist                       shift and go to state 204
    systemcall                     shift and go to state 210
    disable                        shift and go to state 211
    empty                          shift and go to state 212

state 208

    (269) parallelblock -> FORK . block_statements JOIN
    (270) parallelblock -> FORK . JOIN
    (256) block_statements -> . block_statements block_statement
    (257) block_statements -> . block_statement
    (258) block_statement -> . basic_statement
    (229) basic_statement -> . if_statement
    (230) basic_statement -> . case_statement
    (231) basic_statement -> . casex_statement
    (232) basic_statement -> . casez_statement
    (233) basic_statement -> . unique_case_statement
    (234) basic_statement -> . for_statement
    (235) basic_statement -> . while_statement
    (236) basic_statement -> . event_statement
    (237) basic_statement -> . wait_statement
    (238) basic_statement -> . forever_statement
    (239) basic_statement -> . block
    (240) basic_statement -> . namedblock
    (241) basic_statement -> . parallelblock
    (242) basic_statement -> . blocking_substitution
    (243) basic_statement -> . nonblocking_substitution
    (244) basic_statement -> . single_statement
    (271) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (272) if_statement -> . IF LPAREN cond RPAREN true_statement
    (273) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (274) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (289) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (290) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (291) casez_statement -> . CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (292) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (279) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (287) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (302) event_statement -> . senslist SEMICOLON
    (303) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (306) forever_statement -> . FOREVER basic_statement
    (254) block -> . BEGIN block_statements END
    (255) block -> . BEGIN END
    (259) namedblock -> . BEGIN COLON ID namedblock_statements END
    (260) namedblock -> . BEGIN COLON ID END
    (269) parallelblock -> . FORK block_statements JOIN
    (270) parallelblock -> . FORK JOIN
    (246) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (248) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (410) single_statement -> . DELAY expression SEMICOLON
    (411) single_statement -> . systemcall SEMICOLON
    (412) single_statement -> . disable SEMICOLON
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (209) senslist -> . AT LPAREN edgesigs RPAREN
    (217) senslist -> . empty
    (218) senslist -> . AT levelsig
    (219) senslist -> . AT LPAREN levelsigs RPAREN
    (227) senslist -> . AT TIMES
    (228) senslist -> . AT LPAREN TIMES RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (409) disable -> . DISABLE ID
    (413) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    JOIN            shift and go to state 367
    IF              shift and go to state 196
    CASE            shift and go to state 198
    CASEX           shift and go to state 199
    CASEZ           shift and go to state 200
    UNIQUE          shift and go to state 201
    FOR             shift and go to state 202
    WHILE           shift and go to state 203
    WAIT            shift and go to state 205
    FOREVER         shift and go to state 206
    BEGIN           shift and go to state 207
    FORK            shift and go to state 208
    DELAY           shift and go to state 209
    AT              shift and go to state 173
    DOLLER          shift and go to state 109
    DISABLE         shift and go to state 213
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    SEMICOLON       reduce using rule 413 (empty -> .)

  ! IF              [ reduce using rule 413 (empty -> .) ]

    block_statements               shift and go to state 366
    block_statement                shift and go to state 364
    basic_statement                shift and go to state 365
    if_statement                   shift and go to state 180
    case_statement                 shift and go to state 181
    casex_statement                shift and go to state 182
    casez_statement                shift and go to state 183
    unique_case_statement          shift and go to state 184
    for_statement                  shift and go to state 185
    while_statement                shift and go to state 186
    event_statement                shift and go to state 187
    wait_statement                 shift and go to state 188
    forever_statement              shift and go to state 189
    block                          shift and go to state 190
    namedblock                     shift and go to state 191
    parallelblock                  shift and go to state 192
    blocking_substitution          shift and go to state 193
    nonblocking_substitution       shift and go to state 194
    single_statement               shift and go to state 195
    delays                         shift and go to state 197
    senslist                       shift and go to state 204
    systemcall                     shift and go to state 210
    disable                        shift and go to state 211
    empty                          shift and go to state 212

state 209

    (410) single_statement -> DELAY . expression SEMICOLON
    (249) delays -> DELAY . LPAREN expression RPAREN
    (250) delays -> DELAY . identifier
    (251) delays -> DELAY . intnumber
    (252) delays -> DELAY . floatnumber
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (204) stringliteral -> . STRING_LITERAL

    LPAREN          shift and go to state 369
    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 368
    identifier                     shift and go to state 370
    intnumber                      shift and go to state 371
    floatnumber                    shift and go to state 372
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    stringliteral                  shift and go to state 113

state 210

    (411) single_statement -> systemcall . SEMICOLON

    SEMICOLON       shift and go to state 373


state 211

    (412) single_statement -> disable . SEMICOLON

    SEMICOLON       shift and go to state 374


state 212

    (253) delays -> empty .
    (217) senslist -> empty .

    IF              reduce using rule 253 (delays -> empty .)
    LBRACE          reduce using rule 253 (delays -> empty .)
    ID              reduce using rule 253 (delays -> empty .)
    SEMICOLON       reduce using rule 217 (senslist -> empty .)


state 213

    (409) disable -> DISABLE . ID

    ID              shift and go to state 375


state 214

    (307) instance -> ID parameterlist . instance_bodylist SEMICOLON
    (309) instance_bodylist -> . instance_bodylist COMMA instance_body
    (310) instance_bodylist -> . instance_body
    (311) instance_body -> . ID LPAREN instance_ports RPAREN
    (312) instance_body -> . ID width LPAREN instance_ports RPAREN

    ID              shift and go to state 376

    instance_bodylist              shift and go to state 377
    instance_body                  shift and go to state 378

state 215

    (313) instance -> ID instance_bodylist_noname . SEMICOLON
    (315) instance_bodylist_noname -> instance_bodylist_noname . COMMA instance_body_noname

    SEMICOLON       shift and go to state 379
    COMMA           shift and go to state 380


state 216

    (318) parameterlist -> DELAY . LPAREN param_args RPAREN
    (319) parameterlist -> DELAY . LPAREN param_args_noname RPAREN

    LPAREN          shift and go to state 381


state 217

    (317) instance_body_noname -> LPAREN . instance_ports RPAREN
    (328) instance_ports -> . instance_ports_list
    (329) instance_ports -> . instance_ports_arg
    (330) instance_ports_list -> . instance_ports_list COMMA instance_port_list
    (331) instance_ports_list -> . instance_port_list
    (332) instance_ports_list -> . empty
    (334) instance_ports_arg -> . instance_ports_arg COMMA instance_port_arg
    (335) instance_ports_arg -> . instance_port_arg
    (333) instance_port_list -> . expression
    (413) empty -> .
    (336) instance_port_arg -> . DOT ID LPAREN identifier RPAREN
    (337) instance_port_arg -> . DOT ID LPAREN expression RPAREN
    (338) instance_port_arg -> . DOT ID LPAREN RPAREN
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    COMMA           reduce using rule 413 (empty -> .)
    RPAREN          reduce using rule 413 (empty -> .)
    DOT             shift and go to state 389
    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    instance_ports                 shift and go to state 382
    instance_ports_list            shift and go to state 383
    instance_ports_arg             shift and go to state 384
    instance_port_list             shift and go to state 385
    empty                          shift and go to state 386
    instance_port_arg              shift and go to state 387
    expression                     shift and go to state 388
    identifier                     shift and go to state 106
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 218

    (320) parameterlist -> empty .

    ID              reduce using rule 320 (parameterlist -> empty .)


state 219

    (316) instance_bodylist_noname -> instance_body_noname .

    SEMICOLON       reduce using rule 316 (instance_bodylist_noname -> instance_body_noname .)
    COMMA           reduce using rule 316 (instance_bodylist_noname -> instance_body_noname .)


state 220

    (308) instance -> SENS_OR parameterlist . instance_bodylist SEMICOLON
    (309) instance_bodylist -> . instance_bodylist COMMA instance_body
    (310) instance_bodylist -> . instance_body
    (311) instance_body -> . ID LPAREN instance_ports RPAREN
    (312) instance_body -> . ID width LPAREN instance_ports RPAREN

    ID              shift and go to state 376

    instance_bodylist              shift and go to state 390
    instance_body                  shift and go to state 378

state 221

    (314) instance -> SENS_OR instance_bodylist_noname . SEMICOLON
    (315) instance_bodylist_noname -> instance_bodylist_noname . COMMA instance_body_noname

    SEMICOLON       shift and go to state 391
    COMMA           shift and go to state 380


state 222

    (368) function -> FUNCTION width . ID SEMICOLON function_statement ENDFUNCTION

    ID              shift and go to state 392


state 223

    (369) function -> FUNCTION ID . SEMICOLON function_statement ENDFUNCTION

    SEMICOLON       shift and go to state 393


state 224

    (370) function -> FUNCTION INTEGER . ID SEMICOLON function_statement ENDFUNCTION

    ID              shift and go to state 394


state 225

    (389) task -> TASK ID . SEMICOLON task_statement ENDTASK

    SEMICOLON       shift and go to state 395


state 226

    (28) portlist -> LPAREN ports RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 396


state 227

    (32) ports -> ports COMMA . portname
    (34) portname -> . ID

    ID              shift and go to state 79

    portname                       shift and go to state 397

state 228

    (30) portlist -> LPAREN RPAREN SEMICOLON .

    GENERATE        reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    INTEGER         reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    REAL            reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    PARAMETER       reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    LOCALPARAM      reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    GENVAR          reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    ASSIGN          reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    ALWAYS          reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    ALWAYS_FF       reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    ALWAYS_COMB     reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    INITIAL         reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    SENS_OR         reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    TASK            reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    INPUT           reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    OUTPUT          reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    INOUT           reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    TRI             reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    REG             reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    LOGIC           reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    WIRE            reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    SIGNED          reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    SUPPLY0         reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    SUPPLY1         reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    ENDMODULE       reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)


state 229

    (29) portlist -> LPAREN ioports RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 398


state 230

    (47) ioports -> ioports COMMA . ioport
    (49) ioport -> . sigtypes portname
    (50) ioport -> . sigtypes width portname
    (51) ioport -> . sigtypes width portname dimensions
    (55) ioport -> . portname
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (34) portname -> . ID
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

    ID              shift and go to state 79
    INPUT           shift and go to state 65
    OUTPUT          shift and go to state 66
    INOUT           shift and go to state 67
    TRI             shift and go to state 68
    REG             shift and go to state 69
    LOGIC           shift and go to state 70
    WIRE            shift and go to state 71
    SIGNED          shift and go to state 49
    SUPPLY0         shift and go to state 72
    SUPPLY1         shift and go to state 73

    ioport                         shift and go to state 399
    sigtypes                       shift and go to state 400
    portname                       shift and go to state 401
    sigtype                        shift and go to state 64

state 231

    (52) ioport_head -> sigtypes portname .

    RPAREN          reduce using rule 52 (ioport_head -> sigtypes portname .)
    COMMA           reduce using rule 52 (ioport_head -> sigtypes portname .)


state 232

    (53) ioport_head -> sigtypes width . portname
    (54) ioport_head -> sigtypes width . portname dimensions
    (34) portname -> . ID

    ID              shift and go to state 79

    portname                       shift and go to state 402

state 233

    (12) paramlist -> DELAY LPAREN params RPAREN .

    LPAREN          reduce using rule 12 (paramlist -> DELAY LPAREN params RPAREN .)
    SEMICOLON       reduce using rule 12 (paramlist -> DELAY LPAREN params RPAREN .)


state 234

    (14) params -> params_begin param_end .

    RPAREN          reduce using rule 14 (params -> params_begin param_end .)


state 235

    (15) params_begin -> params_begin param .

    PARAMETER       reduce using rule 15 (params_begin -> params_begin param .)


state 236

    (23) param_end -> PARAMETER param_substitution_list .
    (18) param -> PARAMETER param_substitution_list . COMMA
    (112) param_substitution_list -> param_substitution_list . COMMA param_substitution

    RPAREN          reduce using rule 23 (param_end -> PARAMETER param_substitution_list .)
    COMMA           shift and go to state 403


state 237

    (24) param_end -> PARAMETER SIGNED . param_substitution_list
    (26) param_end -> PARAMETER SIGNED . width param_substitution_list
    (19) param -> PARAMETER SIGNED . param_substitution_list COMMA
    (21) param -> PARAMETER SIGNED . width param_substitution_list COMMA
    (112) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (113) param_substitution_list -> . param_substitution
    (56) width -> . LBRACKET expression COLON expression RBRACKET
    (114) param_substitution -> . ID EQUALS rvalue

    LBRACKET        shift and go to state 139
    ID              shift and go to state 156

    param_substitution_list        shift and go to state 404
    width                          shift and go to state 405
    param_substitution             shift and go to state 155

state 238

    (25) param_end -> PARAMETER width . param_substitution_list
    (20) param -> PARAMETER width . param_substitution_list COMMA
    (112) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (113) param_substitution_list -> . param_substitution
    (114) param_substitution -> . ID EQUALS rvalue

    ID              shift and go to state 156

    param_substitution_list        shift and go to state 406
    param_substitution             shift and go to state 155

state 239

    (27) param_end -> PARAMETER INTEGER . param_substitution_list
    (22) param -> PARAMETER INTEGER . param_substitution_list COMMA
    (112) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (113) param_substitution_list -> . param_substitution
    (114) param_substitution -> . ID EQUALS rvalue

    ID              shift and go to state 156

    param_substitution_list        shift and go to state 407
    param_substitution             shift and go to state 155

state 240

    (171) expression -> LPAREN expression . RPAREN
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RPAREN          shift and go to state 408
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 241

    (7) pragma -> LPAREN TIMES ID EQUALS expression TIMES . RPAREN
    (147) expression -> expression TIMES . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    RPAREN          shift and go to state 411
    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 410
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 242

    (146) expression -> expression POWER . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 412
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 243

    (148) expression -> expression DIVIDE . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 413
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 244

    (149) expression -> expression MOD . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 414
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 245

    (150) expression -> expression PLUS . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 415
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 246

    (151) expression -> expression MINUS . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 416
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 247

    (152) expression -> expression LSHIFT . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 417
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 248

    (153) expression -> expression RSHIFT . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 418
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 249

    (154) expression -> expression LSHIFTA . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 419
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 250

    (155) expression -> expression RSHIFTA . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 420
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 251

    (156) expression -> expression LT . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 421
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 252

    (157) expression -> expression GT . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 422
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 253

    (158) expression -> expression LE . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 423
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 254

    (159) expression -> expression GE . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 424
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 255

    (160) expression -> expression EQ . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 425
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 256

    (161) expression -> expression NE . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 426
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 257

    (162) expression -> expression EQL . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 427
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 258

    (163) expression -> expression NEL . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 428
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 259

    (164) expression -> expression AND . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 429
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 260

    (165) expression -> expression XOR . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 430
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 261

    (166) expression -> expression XNOR . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 431
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 262

    (167) expression -> expression OR . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 432
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 263

    (168) expression -> expression LAND . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 433
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 264

    (169) expression -> expression LOR . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 434
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 265

    (170) expression -> expression COND . expression COLON expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 435
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 266

    (136) expression -> MINUS expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 136 (expression -> MINUS expression .)
    POWER           reduce using rule 136 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 136 (expression -> MINUS expression .)
    MOD             reduce using rule 136 (expression -> MINUS expression .)
    PLUS            reduce using rule 136 (expression -> MINUS expression .)
    MINUS           reduce using rule 136 (expression -> MINUS expression .)
    LSHIFT          reduce using rule 136 (expression -> MINUS expression .)
    RSHIFT          reduce using rule 136 (expression -> MINUS expression .)
    LSHIFTA         reduce using rule 136 (expression -> MINUS expression .)
    RSHIFTA         reduce using rule 136 (expression -> MINUS expression .)
    LT              reduce using rule 136 (expression -> MINUS expression .)
    GT              reduce using rule 136 (expression -> MINUS expression .)
    LE              reduce using rule 136 (expression -> MINUS expression .)
    GE              reduce using rule 136 (expression -> MINUS expression .)
    EQ              reduce using rule 136 (expression -> MINUS expression .)
    NE              reduce using rule 136 (expression -> MINUS expression .)
    EQL             reduce using rule 136 (expression -> MINUS expression .)
    NEL             reduce using rule 136 (expression -> MINUS expression .)
    AND             reduce using rule 136 (expression -> MINUS expression .)
    XOR             reduce using rule 136 (expression -> MINUS expression .)
    XNOR            reduce using rule 136 (expression -> MINUS expression .)
    OR              reduce using rule 136 (expression -> MINUS expression .)
    LAND            reduce using rule 136 (expression -> MINUS expression .)
    LOR             reduce using rule 136 (expression -> MINUS expression .)
    COND            reduce using rule 136 (expression -> MINUS expression .)
    RPAREN          reduce using rule 136 (expression -> MINUS expression .)
    LBRACE          reduce using rule 136 (expression -> MINUS expression .)
    RBRACE          reduce using rule 136 (expression -> MINUS expression .)
    COMMA           reduce using rule 136 (expression -> MINUS expression .)
    COLON           reduce using rule 136 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 136 (expression -> MINUS expression .)
    PLUSCOLON       reduce using rule 136 (expression -> MINUS expression .)
    MINUSCOLON      reduce using rule 136 (expression -> MINUS expression .)
    RBRACKET        reduce using rule 136 (expression -> MINUS expression .)

  ! POWER           [ shift and go to state 242 ]
  ! TIMES           [ shift and go to state 409 ]
  ! DIVIDE          [ shift and go to state 243 ]
  ! MOD             [ shift and go to state 244 ]
  ! PLUS            [ shift and go to state 245 ]
  ! MINUS           [ shift and go to state 246 ]
  ! LSHIFT          [ shift and go to state 247 ]
  ! RSHIFT          [ shift and go to state 248 ]
  ! LSHIFTA         [ shift and go to state 249 ]
  ! RSHIFTA         [ shift and go to state 250 ]
  ! LT              [ shift and go to state 251 ]
  ! GT              [ shift and go to state 252 ]
  ! LE              [ shift and go to state 253 ]
  ! GE              [ shift and go to state 254 ]
  ! EQ              [ shift and go to state 255 ]
  ! NE              [ shift and go to state 256 ]
  ! EQL             [ shift and go to state 257 ]
  ! NEL             [ shift and go to state 258 ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 267

    (137) expression -> PLUS expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 137 (expression -> PLUS expression .)
    POWER           reduce using rule 137 (expression -> PLUS expression .)
    DIVIDE          reduce using rule 137 (expression -> PLUS expression .)
    MOD             reduce using rule 137 (expression -> PLUS expression .)
    PLUS            reduce using rule 137 (expression -> PLUS expression .)
    MINUS           reduce using rule 137 (expression -> PLUS expression .)
    LSHIFT          reduce using rule 137 (expression -> PLUS expression .)
    RSHIFT          reduce using rule 137 (expression -> PLUS expression .)
    LSHIFTA         reduce using rule 137 (expression -> PLUS expression .)
    RSHIFTA         reduce using rule 137 (expression -> PLUS expression .)
    LT              reduce using rule 137 (expression -> PLUS expression .)
    GT              reduce using rule 137 (expression -> PLUS expression .)
    LE              reduce using rule 137 (expression -> PLUS expression .)
    GE              reduce using rule 137 (expression -> PLUS expression .)
    EQ              reduce using rule 137 (expression -> PLUS expression .)
    NE              reduce using rule 137 (expression -> PLUS expression .)
    EQL             reduce using rule 137 (expression -> PLUS expression .)
    NEL             reduce using rule 137 (expression -> PLUS expression .)
    AND             reduce using rule 137 (expression -> PLUS expression .)
    XOR             reduce using rule 137 (expression -> PLUS expression .)
    XNOR            reduce using rule 137 (expression -> PLUS expression .)
    OR              reduce using rule 137 (expression -> PLUS expression .)
    LAND            reduce using rule 137 (expression -> PLUS expression .)
    LOR             reduce using rule 137 (expression -> PLUS expression .)
    COND            reduce using rule 137 (expression -> PLUS expression .)
    RPAREN          reduce using rule 137 (expression -> PLUS expression .)
    LBRACE          reduce using rule 137 (expression -> PLUS expression .)
    RBRACE          reduce using rule 137 (expression -> PLUS expression .)
    COMMA           reduce using rule 137 (expression -> PLUS expression .)
    COLON           reduce using rule 137 (expression -> PLUS expression .)
    SEMICOLON       reduce using rule 137 (expression -> PLUS expression .)
    PLUSCOLON       reduce using rule 137 (expression -> PLUS expression .)
    MINUSCOLON      reduce using rule 137 (expression -> PLUS expression .)
    RBRACKET        reduce using rule 137 (expression -> PLUS expression .)

  ! POWER           [ shift and go to state 242 ]
  ! TIMES           [ shift and go to state 409 ]
  ! DIVIDE          [ shift and go to state 243 ]
  ! MOD             [ shift and go to state 244 ]
  ! PLUS            [ shift and go to state 245 ]
  ! MINUS           [ shift and go to state 246 ]
  ! LSHIFT          [ shift and go to state 247 ]
  ! RSHIFT          [ shift and go to state 248 ]
  ! LSHIFTA         [ shift and go to state 249 ]
  ! RSHIFTA         [ shift and go to state 250 ]
  ! LT              [ shift and go to state 251 ]
  ! GT              [ shift and go to state 252 ]
  ! LE              [ shift and go to state 253 ]
  ! GE              [ shift and go to state 254 ]
  ! EQ              [ shift and go to state 255 ]
  ! NE              [ shift and go to state 256 ]
  ! EQL             [ shift and go to state 257 ]
  ! NEL             [ shift and go to state 258 ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 268

    (138) expression -> LNOT expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 138 (expression -> LNOT expression .)
    POWER           reduce using rule 138 (expression -> LNOT expression .)
    DIVIDE          reduce using rule 138 (expression -> LNOT expression .)
    MOD             reduce using rule 138 (expression -> LNOT expression .)
    PLUS            reduce using rule 138 (expression -> LNOT expression .)
    MINUS           reduce using rule 138 (expression -> LNOT expression .)
    LSHIFT          reduce using rule 138 (expression -> LNOT expression .)
    RSHIFT          reduce using rule 138 (expression -> LNOT expression .)
    LSHIFTA         reduce using rule 138 (expression -> LNOT expression .)
    RSHIFTA         reduce using rule 138 (expression -> LNOT expression .)
    LT              reduce using rule 138 (expression -> LNOT expression .)
    GT              reduce using rule 138 (expression -> LNOT expression .)
    LE              reduce using rule 138 (expression -> LNOT expression .)
    GE              reduce using rule 138 (expression -> LNOT expression .)
    EQ              reduce using rule 138 (expression -> LNOT expression .)
    NE              reduce using rule 138 (expression -> LNOT expression .)
    EQL             reduce using rule 138 (expression -> LNOT expression .)
    NEL             reduce using rule 138 (expression -> LNOT expression .)
    AND             reduce using rule 138 (expression -> LNOT expression .)
    XOR             reduce using rule 138 (expression -> LNOT expression .)
    XNOR            reduce using rule 138 (expression -> LNOT expression .)
    OR              reduce using rule 138 (expression -> LNOT expression .)
    LAND            reduce using rule 138 (expression -> LNOT expression .)
    LOR             reduce using rule 138 (expression -> LNOT expression .)
    COND            reduce using rule 138 (expression -> LNOT expression .)
    RPAREN          reduce using rule 138 (expression -> LNOT expression .)
    LBRACE          reduce using rule 138 (expression -> LNOT expression .)
    RBRACE          reduce using rule 138 (expression -> LNOT expression .)
    COMMA           reduce using rule 138 (expression -> LNOT expression .)
    COLON           reduce using rule 138 (expression -> LNOT expression .)
    SEMICOLON       reduce using rule 138 (expression -> LNOT expression .)
    PLUSCOLON       reduce using rule 138 (expression -> LNOT expression .)
    MINUSCOLON      reduce using rule 138 (expression -> LNOT expression .)
    RBRACKET        reduce using rule 138 (expression -> LNOT expression .)

  ! POWER           [ shift and go to state 242 ]
  ! TIMES           [ shift and go to state 409 ]
  ! DIVIDE          [ shift and go to state 243 ]
  ! MOD             [ shift and go to state 244 ]
  ! PLUS            [ shift and go to state 245 ]
  ! MINUS           [ shift and go to state 246 ]
  ! LSHIFT          [ shift and go to state 247 ]
  ! RSHIFT          [ shift and go to state 248 ]
  ! LSHIFTA         [ shift and go to state 249 ]
  ! RSHIFTA         [ shift and go to state 250 ]
  ! LT              [ shift and go to state 251 ]
  ! GT              [ shift and go to state 252 ]
  ! LE              [ shift and go to state 253 ]
  ! GE              [ shift and go to state 254 ]
  ! EQ              [ shift and go to state 255 ]
  ! NE              [ shift and go to state 256 ]
  ! EQL             [ shift and go to state 257 ]
  ! NEL             [ shift and go to state 258 ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 269

    (139) expression -> NOT expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 139 (expression -> NOT expression .)
    POWER           reduce using rule 139 (expression -> NOT expression .)
    DIVIDE          reduce using rule 139 (expression -> NOT expression .)
    MOD             reduce using rule 139 (expression -> NOT expression .)
    PLUS            reduce using rule 139 (expression -> NOT expression .)
    MINUS           reduce using rule 139 (expression -> NOT expression .)
    LSHIFT          reduce using rule 139 (expression -> NOT expression .)
    RSHIFT          reduce using rule 139 (expression -> NOT expression .)
    LSHIFTA         reduce using rule 139 (expression -> NOT expression .)
    RSHIFTA         reduce using rule 139 (expression -> NOT expression .)
    LT              reduce using rule 139 (expression -> NOT expression .)
    GT              reduce using rule 139 (expression -> NOT expression .)
    LE              reduce using rule 139 (expression -> NOT expression .)
    GE              reduce using rule 139 (expression -> NOT expression .)
    EQ              reduce using rule 139 (expression -> NOT expression .)
    NE              reduce using rule 139 (expression -> NOT expression .)
    EQL             reduce using rule 139 (expression -> NOT expression .)
    NEL             reduce using rule 139 (expression -> NOT expression .)
    AND             reduce using rule 139 (expression -> NOT expression .)
    XOR             reduce using rule 139 (expression -> NOT expression .)
    XNOR            reduce using rule 139 (expression -> NOT expression .)
    OR              reduce using rule 139 (expression -> NOT expression .)
    LAND            reduce using rule 139 (expression -> NOT expression .)
    LOR             reduce using rule 139 (expression -> NOT expression .)
    COND            reduce using rule 139 (expression -> NOT expression .)
    RPAREN          reduce using rule 139 (expression -> NOT expression .)
    LBRACE          reduce using rule 139 (expression -> NOT expression .)
    RBRACE          reduce using rule 139 (expression -> NOT expression .)
    COMMA           reduce using rule 139 (expression -> NOT expression .)
    COLON           reduce using rule 139 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 139 (expression -> NOT expression .)
    PLUSCOLON       reduce using rule 139 (expression -> NOT expression .)
    MINUSCOLON      reduce using rule 139 (expression -> NOT expression .)
    RBRACKET        reduce using rule 139 (expression -> NOT expression .)

  ! POWER           [ shift and go to state 242 ]
  ! TIMES           [ shift and go to state 409 ]
  ! DIVIDE          [ shift and go to state 243 ]
  ! MOD             [ shift and go to state 244 ]
  ! PLUS            [ shift and go to state 245 ]
  ! MINUS           [ shift and go to state 246 ]
  ! LSHIFT          [ shift and go to state 247 ]
  ! RSHIFT          [ shift and go to state 248 ]
  ! LSHIFTA         [ shift and go to state 249 ]
  ! RSHIFTA         [ shift and go to state 250 ]
  ! LT              [ shift and go to state 251 ]
  ! GT              [ shift and go to state 252 ]
  ! LE              [ shift and go to state 253 ]
  ! GE              [ shift and go to state 254 ]
  ! EQ              [ shift and go to state 255 ]
  ! NE              [ shift and go to state 256 ]
  ! EQL             [ shift and go to state 257 ]
  ! NEL             [ shift and go to state 258 ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 270

    (140) expression -> AND expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 140 (expression -> AND expression .)
    POWER           reduce using rule 140 (expression -> AND expression .)
    DIVIDE          reduce using rule 140 (expression -> AND expression .)
    MOD             reduce using rule 140 (expression -> AND expression .)
    PLUS            reduce using rule 140 (expression -> AND expression .)
    MINUS           reduce using rule 140 (expression -> AND expression .)
    LSHIFT          reduce using rule 140 (expression -> AND expression .)
    RSHIFT          reduce using rule 140 (expression -> AND expression .)
    LSHIFTA         reduce using rule 140 (expression -> AND expression .)
    RSHIFTA         reduce using rule 140 (expression -> AND expression .)
    LT              reduce using rule 140 (expression -> AND expression .)
    GT              reduce using rule 140 (expression -> AND expression .)
    LE              reduce using rule 140 (expression -> AND expression .)
    GE              reduce using rule 140 (expression -> AND expression .)
    EQ              reduce using rule 140 (expression -> AND expression .)
    NE              reduce using rule 140 (expression -> AND expression .)
    EQL             reduce using rule 140 (expression -> AND expression .)
    NEL             reduce using rule 140 (expression -> AND expression .)
    AND             reduce using rule 140 (expression -> AND expression .)
    XOR             reduce using rule 140 (expression -> AND expression .)
    XNOR            reduce using rule 140 (expression -> AND expression .)
    OR              reduce using rule 140 (expression -> AND expression .)
    LAND            reduce using rule 140 (expression -> AND expression .)
    LOR             reduce using rule 140 (expression -> AND expression .)
    COND            reduce using rule 140 (expression -> AND expression .)
    RPAREN          reduce using rule 140 (expression -> AND expression .)
    LBRACE          reduce using rule 140 (expression -> AND expression .)
    RBRACE          reduce using rule 140 (expression -> AND expression .)
    COMMA           reduce using rule 140 (expression -> AND expression .)
    COLON           reduce using rule 140 (expression -> AND expression .)
    SEMICOLON       reduce using rule 140 (expression -> AND expression .)
    PLUSCOLON       reduce using rule 140 (expression -> AND expression .)
    MINUSCOLON      reduce using rule 140 (expression -> AND expression .)
    RBRACKET        reduce using rule 140 (expression -> AND expression .)

  ! POWER           [ shift and go to state 242 ]
  ! TIMES           [ shift and go to state 409 ]
  ! DIVIDE          [ shift and go to state 243 ]
  ! MOD             [ shift and go to state 244 ]
  ! PLUS            [ shift and go to state 245 ]
  ! MINUS           [ shift and go to state 246 ]
  ! LSHIFT          [ shift and go to state 247 ]
  ! RSHIFT          [ shift and go to state 248 ]
  ! LSHIFTA         [ shift and go to state 249 ]
  ! RSHIFTA         [ shift and go to state 250 ]
  ! LT              [ shift and go to state 251 ]
  ! GT              [ shift and go to state 252 ]
  ! LE              [ shift and go to state 253 ]
  ! GE              [ shift and go to state 254 ]
  ! EQ              [ shift and go to state 255 ]
  ! NE              [ shift and go to state 256 ]
  ! EQL             [ shift and go to state 257 ]
  ! NEL             [ shift and go to state 258 ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 271

    (141) expression -> NAND expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 141 (expression -> NAND expression .)
    POWER           reduce using rule 141 (expression -> NAND expression .)
    DIVIDE          reduce using rule 141 (expression -> NAND expression .)
    MOD             reduce using rule 141 (expression -> NAND expression .)
    PLUS            reduce using rule 141 (expression -> NAND expression .)
    MINUS           reduce using rule 141 (expression -> NAND expression .)
    LSHIFT          reduce using rule 141 (expression -> NAND expression .)
    RSHIFT          reduce using rule 141 (expression -> NAND expression .)
    LSHIFTA         reduce using rule 141 (expression -> NAND expression .)
    RSHIFTA         reduce using rule 141 (expression -> NAND expression .)
    LT              reduce using rule 141 (expression -> NAND expression .)
    GT              reduce using rule 141 (expression -> NAND expression .)
    LE              reduce using rule 141 (expression -> NAND expression .)
    GE              reduce using rule 141 (expression -> NAND expression .)
    EQ              reduce using rule 141 (expression -> NAND expression .)
    NE              reduce using rule 141 (expression -> NAND expression .)
    EQL             reduce using rule 141 (expression -> NAND expression .)
    NEL             reduce using rule 141 (expression -> NAND expression .)
    AND             reduce using rule 141 (expression -> NAND expression .)
    XOR             reduce using rule 141 (expression -> NAND expression .)
    XNOR            reduce using rule 141 (expression -> NAND expression .)
    OR              reduce using rule 141 (expression -> NAND expression .)
    LAND            reduce using rule 141 (expression -> NAND expression .)
    LOR             reduce using rule 141 (expression -> NAND expression .)
    COND            reduce using rule 141 (expression -> NAND expression .)
    RPAREN          reduce using rule 141 (expression -> NAND expression .)
    LBRACE          reduce using rule 141 (expression -> NAND expression .)
    RBRACE          reduce using rule 141 (expression -> NAND expression .)
    COMMA           reduce using rule 141 (expression -> NAND expression .)
    COLON           reduce using rule 141 (expression -> NAND expression .)
    SEMICOLON       reduce using rule 141 (expression -> NAND expression .)
    PLUSCOLON       reduce using rule 141 (expression -> NAND expression .)
    MINUSCOLON      reduce using rule 141 (expression -> NAND expression .)
    RBRACKET        reduce using rule 141 (expression -> NAND expression .)

  ! POWER           [ shift and go to state 242 ]
  ! TIMES           [ shift and go to state 409 ]
  ! DIVIDE          [ shift and go to state 243 ]
  ! MOD             [ shift and go to state 244 ]
  ! PLUS            [ shift and go to state 245 ]
  ! MINUS           [ shift and go to state 246 ]
  ! LSHIFT          [ shift and go to state 247 ]
  ! RSHIFT          [ shift and go to state 248 ]
  ! LSHIFTA         [ shift and go to state 249 ]
  ! RSHIFTA         [ shift and go to state 250 ]
  ! LT              [ shift and go to state 251 ]
  ! GT              [ shift and go to state 252 ]
  ! LE              [ shift and go to state 253 ]
  ! GE              [ shift and go to state 254 ]
  ! EQ              [ shift and go to state 255 ]
  ! NE              [ shift and go to state 256 ]
  ! EQL             [ shift and go to state 257 ]
  ! NEL             [ shift and go to state 258 ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 272

    (142) expression -> NOR expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 142 (expression -> NOR expression .)
    POWER           reduce using rule 142 (expression -> NOR expression .)
    DIVIDE          reduce using rule 142 (expression -> NOR expression .)
    MOD             reduce using rule 142 (expression -> NOR expression .)
    PLUS            reduce using rule 142 (expression -> NOR expression .)
    MINUS           reduce using rule 142 (expression -> NOR expression .)
    LSHIFT          reduce using rule 142 (expression -> NOR expression .)
    RSHIFT          reduce using rule 142 (expression -> NOR expression .)
    LSHIFTA         reduce using rule 142 (expression -> NOR expression .)
    RSHIFTA         reduce using rule 142 (expression -> NOR expression .)
    LT              reduce using rule 142 (expression -> NOR expression .)
    GT              reduce using rule 142 (expression -> NOR expression .)
    LE              reduce using rule 142 (expression -> NOR expression .)
    GE              reduce using rule 142 (expression -> NOR expression .)
    EQ              reduce using rule 142 (expression -> NOR expression .)
    NE              reduce using rule 142 (expression -> NOR expression .)
    EQL             reduce using rule 142 (expression -> NOR expression .)
    NEL             reduce using rule 142 (expression -> NOR expression .)
    AND             reduce using rule 142 (expression -> NOR expression .)
    XOR             reduce using rule 142 (expression -> NOR expression .)
    XNOR            reduce using rule 142 (expression -> NOR expression .)
    OR              reduce using rule 142 (expression -> NOR expression .)
    LAND            reduce using rule 142 (expression -> NOR expression .)
    LOR             reduce using rule 142 (expression -> NOR expression .)
    COND            reduce using rule 142 (expression -> NOR expression .)
    RPAREN          reduce using rule 142 (expression -> NOR expression .)
    LBRACE          reduce using rule 142 (expression -> NOR expression .)
    RBRACE          reduce using rule 142 (expression -> NOR expression .)
    COMMA           reduce using rule 142 (expression -> NOR expression .)
    COLON           reduce using rule 142 (expression -> NOR expression .)
    SEMICOLON       reduce using rule 142 (expression -> NOR expression .)
    PLUSCOLON       reduce using rule 142 (expression -> NOR expression .)
    MINUSCOLON      reduce using rule 142 (expression -> NOR expression .)
    RBRACKET        reduce using rule 142 (expression -> NOR expression .)

  ! POWER           [ shift and go to state 242 ]
  ! TIMES           [ shift and go to state 409 ]
  ! DIVIDE          [ shift and go to state 243 ]
  ! MOD             [ shift and go to state 244 ]
  ! PLUS            [ shift and go to state 245 ]
  ! MINUS           [ shift and go to state 246 ]
  ! LSHIFT          [ shift and go to state 247 ]
  ! RSHIFT          [ shift and go to state 248 ]
  ! LSHIFTA         [ shift and go to state 249 ]
  ! RSHIFTA         [ shift and go to state 250 ]
  ! LT              [ shift and go to state 251 ]
  ! GT              [ shift and go to state 252 ]
  ! LE              [ shift and go to state 253 ]
  ! GE              [ shift and go to state 254 ]
  ! EQ              [ shift and go to state 255 ]
  ! NE              [ shift and go to state 256 ]
  ! EQL             [ shift and go to state 257 ]
  ! NEL             [ shift and go to state 258 ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 273

    (143) expression -> OR expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 143 (expression -> OR expression .)
    POWER           reduce using rule 143 (expression -> OR expression .)
    DIVIDE          reduce using rule 143 (expression -> OR expression .)
    MOD             reduce using rule 143 (expression -> OR expression .)
    PLUS            reduce using rule 143 (expression -> OR expression .)
    MINUS           reduce using rule 143 (expression -> OR expression .)
    LSHIFT          reduce using rule 143 (expression -> OR expression .)
    RSHIFT          reduce using rule 143 (expression -> OR expression .)
    LSHIFTA         reduce using rule 143 (expression -> OR expression .)
    RSHIFTA         reduce using rule 143 (expression -> OR expression .)
    LT              reduce using rule 143 (expression -> OR expression .)
    GT              reduce using rule 143 (expression -> OR expression .)
    LE              reduce using rule 143 (expression -> OR expression .)
    GE              reduce using rule 143 (expression -> OR expression .)
    EQ              reduce using rule 143 (expression -> OR expression .)
    NE              reduce using rule 143 (expression -> OR expression .)
    EQL             reduce using rule 143 (expression -> OR expression .)
    NEL             reduce using rule 143 (expression -> OR expression .)
    AND             reduce using rule 143 (expression -> OR expression .)
    XOR             reduce using rule 143 (expression -> OR expression .)
    XNOR            reduce using rule 143 (expression -> OR expression .)
    OR              reduce using rule 143 (expression -> OR expression .)
    LAND            reduce using rule 143 (expression -> OR expression .)
    LOR             reduce using rule 143 (expression -> OR expression .)
    COND            reduce using rule 143 (expression -> OR expression .)
    RPAREN          reduce using rule 143 (expression -> OR expression .)
    LBRACE          reduce using rule 143 (expression -> OR expression .)
    RBRACE          reduce using rule 143 (expression -> OR expression .)
    COMMA           reduce using rule 143 (expression -> OR expression .)
    COLON           reduce using rule 143 (expression -> OR expression .)
    SEMICOLON       reduce using rule 143 (expression -> OR expression .)
    PLUSCOLON       reduce using rule 143 (expression -> OR expression .)
    MINUSCOLON      reduce using rule 143 (expression -> OR expression .)
    RBRACKET        reduce using rule 143 (expression -> OR expression .)

  ! POWER           [ shift and go to state 242 ]
  ! TIMES           [ shift and go to state 409 ]
  ! DIVIDE          [ shift and go to state 243 ]
  ! MOD             [ shift and go to state 244 ]
  ! PLUS            [ shift and go to state 245 ]
  ! MINUS           [ shift and go to state 246 ]
  ! LSHIFT          [ shift and go to state 247 ]
  ! RSHIFT          [ shift and go to state 248 ]
  ! LSHIFTA         [ shift and go to state 249 ]
  ! RSHIFTA         [ shift and go to state 250 ]
  ! LT              [ shift and go to state 251 ]
  ! GT              [ shift and go to state 252 ]
  ! LE              [ shift and go to state 253 ]
  ! GE              [ shift and go to state 254 ]
  ! EQ              [ shift and go to state 255 ]
  ! NE              [ shift and go to state 256 ]
  ! EQL             [ shift and go to state 257 ]
  ! NEL             [ shift and go to state 258 ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 274

    (144) expression -> XOR expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 144 (expression -> XOR expression .)
    POWER           reduce using rule 144 (expression -> XOR expression .)
    DIVIDE          reduce using rule 144 (expression -> XOR expression .)
    MOD             reduce using rule 144 (expression -> XOR expression .)
    PLUS            reduce using rule 144 (expression -> XOR expression .)
    MINUS           reduce using rule 144 (expression -> XOR expression .)
    LSHIFT          reduce using rule 144 (expression -> XOR expression .)
    RSHIFT          reduce using rule 144 (expression -> XOR expression .)
    LSHIFTA         reduce using rule 144 (expression -> XOR expression .)
    RSHIFTA         reduce using rule 144 (expression -> XOR expression .)
    LT              reduce using rule 144 (expression -> XOR expression .)
    GT              reduce using rule 144 (expression -> XOR expression .)
    LE              reduce using rule 144 (expression -> XOR expression .)
    GE              reduce using rule 144 (expression -> XOR expression .)
    EQ              reduce using rule 144 (expression -> XOR expression .)
    NE              reduce using rule 144 (expression -> XOR expression .)
    EQL             reduce using rule 144 (expression -> XOR expression .)
    NEL             reduce using rule 144 (expression -> XOR expression .)
    AND             reduce using rule 144 (expression -> XOR expression .)
    XOR             reduce using rule 144 (expression -> XOR expression .)
    XNOR            reduce using rule 144 (expression -> XOR expression .)
    OR              reduce using rule 144 (expression -> XOR expression .)
    LAND            reduce using rule 144 (expression -> XOR expression .)
    LOR             reduce using rule 144 (expression -> XOR expression .)
    COND            reduce using rule 144 (expression -> XOR expression .)
    RPAREN          reduce using rule 144 (expression -> XOR expression .)
    LBRACE          reduce using rule 144 (expression -> XOR expression .)
    RBRACE          reduce using rule 144 (expression -> XOR expression .)
    COMMA           reduce using rule 144 (expression -> XOR expression .)
    COLON           reduce using rule 144 (expression -> XOR expression .)
    SEMICOLON       reduce using rule 144 (expression -> XOR expression .)
    PLUSCOLON       reduce using rule 144 (expression -> XOR expression .)
    MINUSCOLON      reduce using rule 144 (expression -> XOR expression .)
    RBRACKET        reduce using rule 144 (expression -> XOR expression .)

  ! POWER           [ shift and go to state 242 ]
  ! TIMES           [ shift and go to state 409 ]
  ! DIVIDE          [ shift and go to state 243 ]
  ! MOD             [ shift and go to state 244 ]
  ! PLUS            [ shift and go to state 245 ]
  ! MINUS           [ shift and go to state 246 ]
  ! LSHIFT          [ shift and go to state 247 ]
  ! RSHIFT          [ shift and go to state 248 ]
  ! LSHIFTA         [ shift and go to state 249 ]
  ! RSHIFTA         [ shift and go to state 250 ]
  ! LT              [ shift and go to state 251 ]
  ! GT              [ shift and go to state 252 ]
  ! LE              [ shift and go to state 253 ]
  ! GE              [ shift and go to state 254 ]
  ! EQ              [ shift and go to state 255 ]
  ! NE              [ shift and go to state 256 ]
  ! EQL             [ shift and go to state 257 ]
  ! NEL             [ shift and go to state 258 ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 275

    (145) expression -> XNOR expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 145 (expression -> XNOR expression .)
    POWER           reduce using rule 145 (expression -> XNOR expression .)
    DIVIDE          reduce using rule 145 (expression -> XNOR expression .)
    MOD             reduce using rule 145 (expression -> XNOR expression .)
    PLUS            reduce using rule 145 (expression -> XNOR expression .)
    MINUS           reduce using rule 145 (expression -> XNOR expression .)
    LSHIFT          reduce using rule 145 (expression -> XNOR expression .)
    RSHIFT          reduce using rule 145 (expression -> XNOR expression .)
    LSHIFTA         reduce using rule 145 (expression -> XNOR expression .)
    RSHIFTA         reduce using rule 145 (expression -> XNOR expression .)
    LT              reduce using rule 145 (expression -> XNOR expression .)
    GT              reduce using rule 145 (expression -> XNOR expression .)
    LE              reduce using rule 145 (expression -> XNOR expression .)
    GE              reduce using rule 145 (expression -> XNOR expression .)
    EQ              reduce using rule 145 (expression -> XNOR expression .)
    NE              reduce using rule 145 (expression -> XNOR expression .)
    EQL             reduce using rule 145 (expression -> XNOR expression .)
    NEL             reduce using rule 145 (expression -> XNOR expression .)
    AND             reduce using rule 145 (expression -> XNOR expression .)
    XOR             reduce using rule 145 (expression -> XNOR expression .)
    XNOR            reduce using rule 145 (expression -> XNOR expression .)
    OR              reduce using rule 145 (expression -> XNOR expression .)
    LAND            reduce using rule 145 (expression -> XNOR expression .)
    LOR             reduce using rule 145 (expression -> XNOR expression .)
    COND            reduce using rule 145 (expression -> XNOR expression .)
    RPAREN          reduce using rule 145 (expression -> XNOR expression .)
    LBRACE          reduce using rule 145 (expression -> XNOR expression .)
    RBRACE          reduce using rule 145 (expression -> XNOR expression .)
    COMMA           reduce using rule 145 (expression -> XNOR expression .)
    COLON           reduce using rule 145 (expression -> XNOR expression .)
    SEMICOLON       reduce using rule 145 (expression -> XNOR expression .)
    PLUSCOLON       reduce using rule 145 (expression -> XNOR expression .)
    MINUSCOLON      reduce using rule 145 (expression -> XNOR expression .)
    RBRACKET        reduce using rule 145 (expression -> XNOR expression .)

  ! POWER           [ shift and go to state 242 ]
  ! TIMES           [ shift and go to state 409 ]
  ! DIVIDE          [ shift and go to state 243 ]
  ! MOD             [ shift and go to state 244 ]
  ! PLUS            [ shift and go to state 245 ]
  ! MINUS           [ shift and go to state 246 ]
  ! LSHIFT          [ shift and go to state 247 ]
  ! RSHIFT          [ shift and go to state 248 ]
  ! LSHIFTA         [ shift and go to state 249 ]
  ! RSHIFTA         [ shift and go to state 250 ]
  ! LT              [ shift and go to state 251 ]
  ! GT              [ shift and go to state 252 ]
  ! LE              [ shift and go to state 253 ]
  ! GE              [ shift and go to state 254 ]
  ! EQ              [ shift and go to state 255 ]
  ! NE              [ shift and go to state 256 ]
  ! EQL             [ shift and go to state 257 ]
  ! NEL             [ shift and go to state 258 ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 276

    (187) partselect -> pointer LBRACKET . expression COLON expression RBRACKET
    (188) partselect -> pointer LBRACKET . expression PLUSCOLON expression RBRACKET
    (189) partselect -> pointer LBRACKET . expression MINUSCOLON expression RBRACKET
    (191) pointer -> pointer LBRACKET . expression RBRACKET
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    pointer                        shift and go to state 103
    expression                     shift and go to state 436
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 277

    (408) scope -> pointer DOT .

    ID              reduce using rule 408 (scope -> pointer DOT .)


state 278

    (184) partselect -> identifier LBRACKET . expression COLON expression RBRACKET
    (185) partselect -> identifier LBRACKET . expression PLUSCOLON expression RBRACKET
    (186) partselect -> identifier LBRACKET . expression MINUSCOLON expression RBRACKET
    (190) pointer -> identifier LBRACKET . expression RBRACKET
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    identifier                     shift and go to state 106
    expression                     shift and go to state 437
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 279

    (385) functioncall -> identifier LPAREN . func_args RPAREN
    (386) func_args -> . func_args COMMA expression
    (387) func_args -> . expression
    (388) func_args -> . empty
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (413) empty -> .
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    RPAREN          reduce using rule 413 (empty -> .)
    COMMA           reduce using rule 413 (empty -> .)
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    identifier                     shift and go to state 106
    func_args                      shift and go to state 438
    expression                     shift and go to state 439
    empty                          shift and go to state 440
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 280

    (407) scope -> identifier DOT .

    ID              reduce using rule 407 (scope -> identifier DOT .)


state 281

    (180) concat -> LBRACE concatlist . RBRACE
    (181) concatlist -> concatlist . COMMA expression

    RBRACE          shift and go to state 441
    COMMA           shift and go to state 442


state 282

    (183) repeat -> LBRACE expression . concat RBRACE
    (182) concatlist -> expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression
    (180) concat -> . LBRACE concatlist RBRACE

    RBRACE          reduce using rule 182 (concatlist -> expression .)
    COMMA           reduce using rule 182 (concatlist -> expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265
    LBRACE          shift and go to state 443

    concat                         shift and go to state 444

state 283

    (361) systemcall -> DOLLER ID .
    (362) systemcall -> DOLLER ID . LPAREN sysargs RPAREN

    TIMES           reduce using rule 361 (systemcall -> DOLLER ID .)
    POWER           reduce using rule 361 (systemcall -> DOLLER ID .)
    DIVIDE          reduce using rule 361 (systemcall -> DOLLER ID .)
    MOD             reduce using rule 361 (systemcall -> DOLLER ID .)
    PLUS            reduce using rule 361 (systemcall -> DOLLER ID .)
    MINUS           reduce using rule 361 (systemcall -> DOLLER ID .)
    LSHIFT          reduce using rule 361 (systemcall -> DOLLER ID .)
    RSHIFT          reduce using rule 361 (systemcall -> DOLLER ID .)
    LSHIFTA         reduce using rule 361 (systemcall -> DOLLER ID .)
    RSHIFTA         reduce using rule 361 (systemcall -> DOLLER ID .)
    LT              reduce using rule 361 (systemcall -> DOLLER ID .)
    GT              reduce using rule 361 (systemcall -> DOLLER ID .)
    LE              reduce using rule 361 (systemcall -> DOLLER ID .)
    GE              reduce using rule 361 (systemcall -> DOLLER ID .)
    EQ              reduce using rule 361 (systemcall -> DOLLER ID .)
    NE              reduce using rule 361 (systemcall -> DOLLER ID .)
    EQL             reduce using rule 361 (systemcall -> DOLLER ID .)
    NEL             reduce using rule 361 (systemcall -> DOLLER ID .)
    AND             reduce using rule 361 (systemcall -> DOLLER ID .)
    XOR             reduce using rule 361 (systemcall -> DOLLER ID .)
    XNOR            reduce using rule 361 (systemcall -> DOLLER ID .)
    OR              reduce using rule 361 (systemcall -> DOLLER ID .)
    LAND            reduce using rule 361 (systemcall -> DOLLER ID .)
    LOR             reduce using rule 361 (systemcall -> DOLLER ID .)
    COND            reduce using rule 361 (systemcall -> DOLLER ID .)
    SEMICOLON       reduce using rule 361 (systemcall -> DOLLER ID .)
    RPAREN          reduce using rule 361 (systemcall -> DOLLER ID .)
    LBRACE          reduce using rule 361 (systemcall -> DOLLER ID .)
    RBRACE          reduce using rule 361 (systemcall -> DOLLER ID .)
    COMMA           reduce using rule 361 (systemcall -> DOLLER ID .)
    COLON           reduce using rule 361 (systemcall -> DOLLER ID .)
    PLUSCOLON       reduce using rule 361 (systemcall -> DOLLER ID .)
    MINUSCOLON      reduce using rule 361 (systemcall -> DOLLER ID .)
    RBRACKET        reduce using rule 361 (systemcall -> DOLLER ID .)
    LPAREN          shift and go to state 445


state 284

    (363) systemcall -> DOLLER SIGNED . LPAREN sysargs RPAREN

    LPAREN          shift and go to state 446


state 285

    (406) identifier -> scope ID .

    LBRACKET        reduce using rule 406 (identifier -> scope ID .)
    LPAREN          reduce using rule 406 (identifier -> scope ID .)
    DOT             reduce using rule 406 (identifier -> scope ID .)
    TIMES           reduce using rule 406 (identifier -> scope ID .)
    POWER           reduce using rule 406 (identifier -> scope ID .)
    DIVIDE          reduce using rule 406 (identifier -> scope ID .)
    MOD             reduce using rule 406 (identifier -> scope ID .)
    PLUS            reduce using rule 406 (identifier -> scope ID .)
    MINUS           reduce using rule 406 (identifier -> scope ID .)
    LSHIFT          reduce using rule 406 (identifier -> scope ID .)
    RSHIFT          reduce using rule 406 (identifier -> scope ID .)
    LSHIFTA         reduce using rule 406 (identifier -> scope ID .)
    RSHIFTA         reduce using rule 406 (identifier -> scope ID .)
    LT              reduce using rule 406 (identifier -> scope ID .)
    GT              reduce using rule 406 (identifier -> scope ID .)
    LE              reduce using rule 406 (identifier -> scope ID .)
    GE              reduce using rule 406 (identifier -> scope ID .)
    EQ              reduce using rule 406 (identifier -> scope ID .)
    NE              reduce using rule 406 (identifier -> scope ID .)
    EQL             reduce using rule 406 (identifier -> scope ID .)
    NEL             reduce using rule 406 (identifier -> scope ID .)
    AND             reduce using rule 406 (identifier -> scope ID .)
    XOR             reduce using rule 406 (identifier -> scope ID .)
    XNOR            reduce using rule 406 (identifier -> scope ID .)
    OR              reduce using rule 406 (identifier -> scope ID .)
    LAND            reduce using rule 406 (identifier -> scope ID .)
    LOR             reduce using rule 406 (identifier -> scope ID .)
    COND            reduce using rule 406 (identifier -> scope ID .)
    EQUALS          reduce using rule 406 (identifier -> scope ID .)
    RPAREN          reduce using rule 406 (identifier -> scope ID .)
    LBRACE          reduce using rule 406 (identifier -> scope ID .)
    RBRACE          reduce using rule 406 (identifier -> scope ID .)
    COMMA           reduce using rule 406 (identifier -> scope ID .)
    COLON           reduce using rule 406 (identifier -> scope ID .)
    SEMICOLON       reduce using rule 406 (identifier -> scope ID .)
    PLUSCOLON       reduce using rule 406 (identifier -> scope ID .)
    MINUSCOLON      reduce using rule 406 (identifier -> scope ID .)
    RBRACKET        reduce using rule 406 (identifier -> scope ID .)
    ID              reduce using rule 406 (identifier -> scope ID .)
    LNOT            reduce using rule 406 (identifier -> scope ID .)
    NOT             reduce using rule 406 (identifier -> scope ID .)
    NAND            reduce using rule 406 (identifier -> scope ID .)
    NOR             reduce using rule 406 (identifier -> scope ID .)
    DOLLER          reduce using rule 406 (identifier -> scope ID .)
    INTNUMBER_DEC   reduce using rule 406 (identifier -> scope ID .)
    SIGNED_INTNUMBER_DEC reduce using rule 406 (identifier -> scope ID .)
    INTNUMBER_BIN   reduce using rule 406 (identifier -> scope ID .)
    SIGNED_INTNUMBER_BIN reduce using rule 406 (identifier -> scope ID .)
    INTNUMBER_OCT   reduce using rule 406 (identifier -> scope ID .)
    SIGNED_INTNUMBER_OCT reduce using rule 406 (identifier -> scope ID .)
    INTNUMBER_HEX   reduce using rule 406 (identifier -> scope ID .)
    SIGNED_INTNUMBER_HEX reduce using rule 406 (identifier -> scope ID .)
    FLOATNUMBER     reduce using rule 406 (identifier -> scope ID .)
    STRING_LITERAL  reduce using rule 406 (identifier -> scope ID .)
    IF              reduce using rule 406 (identifier -> scope ID .)
    CASE            reduce using rule 406 (identifier -> scope ID .)
    CASEX           reduce using rule 406 (identifier -> scope ID .)
    CASEZ           reduce using rule 406 (identifier -> scope ID .)
    UNIQUE          reduce using rule 406 (identifier -> scope ID .)
    FOR             reduce using rule 406 (identifier -> scope ID .)
    WHILE           reduce using rule 406 (identifier -> scope ID .)
    WAIT            reduce using rule 406 (identifier -> scope ID .)
    FOREVER         reduce using rule 406 (identifier -> scope ID .)
    BEGIN           reduce using rule 406 (identifier -> scope ID .)
    FORK            reduce using rule 406 (identifier -> scope ID .)
    DELAY           reduce using rule 406 (identifier -> scope ID .)
    AT              reduce using rule 406 (identifier -> scope ID .)
    DISABLE         reduce using rule 406 (identifier -> scope ID .)
    SENS_OR         reduce using rule 406 (identifier -> scope ID .)


state 286

    (343) generate -> GENERATE generate_items ENDGENERATE .

    ENDMODULE       reduce using rule 343 (generate -> GENERATE generate_items ENDGENERATE .)
    GENERATE        reduce using rule 343 (generate -> GENERATE generate_items ENDGENERATE .)
    INTEGER         reduce using rule 343 (generate -> GENERATE generate_items ENDGENERATE .)
    REAL            reduce using rule 343 (generate -> GENERATE generate_items ENDGENERATE .)
    PARAMETER       reduce using rule 343 (generate -> GENERATE generate_items ENDGENERATE .)
    LOCALPARAM      reduce using rule 343 (generate -> GENERATE generate_items ENDGENERATE .)
    GENVAR          reduce using rule 343 (generate -> GENERATE generate_items ENDGENERATE .)
    ASSIGN          reduce using rule 343 (generate -> GENERATE generate_items ENDGENERATE .)
    ALWAYS          reduce using rule 343 (generate -> GENERATE generate_items ENDGENERATE .)
    ALWAYS_FF       reduce using rule 343 (generate -> GENERATE generate_items ENDGENERATE .)
    ALWAYS_COMB     reduce using rule 343 (generate -> GENERATE generate_items ENDGENERATE .)
    ALWAYS_LATCH    reduce using rule 343 (generate -> GENERATE generate_items ENDGENERATE .)
    INITIAL         reduce using rule 343 (generate -> GENERATE generate_items ENDGENERATE .)
    ID              reduce using rule 343 (generate -> GENERATE generate_items ENDGENERATE .)
    SENS_OR         reduce using rule 343 (generate -> GENERATE generate_items ENDGENERATE .)
    FUNCTION        reduce using rule 343 (generate -> GENERATE generate_items ENDGENERATE .)
    TASK            reduce using rule 343 (generate -> GENERATE generate_items ENDGENERATE .)
    LPAREN          reduce using rule 343 (generate -> GENERATE generate_items ENDGENERATE .)
    INPUT           reduce using rule 343 (generate -> GENERATE generate_items ENDGENERATE .)
    OUTPUT          reduce using rule 343 (generate -> GENERATE generate_items ENDGENERATE .)
    INOUT           reduce using rule 343 (generate -> GENERATE generate_items ENDGENERATE .)
    TRI             reduce using rule 343 (generate -> GENERATE generate_items ENDGENERATE .)
    REG             reduce using rule 343 (generate -> GENERATE generate_items ENDGENERATE .)
    LOGIC           reduce using rule 343 (generate -> GENERATE generate_items ENDGENERATE .)
    WIRE            reduce using rule 343 (generate -> GENERATE generate_items ENDGENERATE .)
    SIGNED          reduce using rule 343 (generate -> GENERATE generate_items ENDGENERATE .)
    SUPPLY0         reduce using rule 343 (generate -> GENERATE generate_items ENDGENERATE .)
    SUPPLY1         reduce using rule 343 (generate -> GENERATE generate_items ENDGENERATE .)


state 287

    (345) generate_items -> generate_items generate_item .

    ENDGENERATE     reduce using rule 345 (generate_items -> generate_items generate_item .)
    IF              reduce using rule 345 (generate_items -> generate_items generate_item .)
    FOR             reduce using rule 345 (generate_items -> generate_items generate_item .)
    INTEGER         reduce using rule 345 (generate_items -> generate_items generate_item .)
    REAL            reduce using rule 345 (generate_items -> generate_items generate_item .)
    PARAMETER       reduce using rule 345 (generate_items -> generate_items generate_item .)
    LOCALPARAM      reduce using rule 345 (generate_items -> generate_items generate_item .)
    GENVAR          reduce using rule 345 (generate_items -> generate_items generate_item .)
    ASSIGN          reduce using rule 345 (generate_items -> generate_items generate_item .)
    ALWAYS          reduce using rule 345 (generate_items -> generate_items generate_item .)
    ALWAYS_FF       reduce using rule 345 (generate_items -> generate_items generate_item .)
    ALWAYS_COMB     reduce using rule 345 (generate_items -> generate_items generate_item .)
    ALWAYS_LATCH    reduce using rule 345 (generate_items -> generate_items generate_item .)
    INITIAL         reduce using rule 345 (generate_items -> generate_items generate_item .)
    ID              reduce using rule 345 (generate_items -> generate_items generate_item .)
    SENS_OR         reduce using rule 345 (generate_items -> generate_items generate_item .)
    FUNCTION        reduce using rule 345 (generate_items -> generate_items generate_item .)
    TASK            reduce using rule 345 (generate_items -> generate_items generate_item .)
    LPAREN          reduce using rule 345 (generate_items -> generate_items generate_item .)
    INPUT           reduce using rule 345 (generate_items -> generate_items generate_item .)
    OUTPUT          reduce using rule 345 (generate_items -> generate_items generate_item .)
    INOUT           reduce using rule 345 (generate_items -> generate_items generate_item .)
    TRI             reduce using rule 345 (generate_items -> generate_items generate_item .)
    REG             reduce using rule 345 (generate_items -> generate_items generate_item .)
    LOGIC           reduce using rule 345 (generate_items -> generate_items generate_item .)
    WIRE            reduce using rule 345 (generate_items -> generate_items generate_item .)
    SIGNED          reduce using rule 345 (generate_items -> generate_items generate_item .)
    SUPPLY0         reduce using rule 345 (generate_items -> generate_items generate_item .)
    SUPPLY1         reduce using rule 345 (generate_items -> generate_items generate_item .)
    END             reduce using rule 345 (generate_items -> generate_items generate_item .)


state 288

    (352) generate_if -> IF LPAREN . cond RPAREN gif_true_item ELSE gif_false_item
    (353) generate_if -> IF LPAREN . cond RPAREN gif_true_item
    (275) cond -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    cond                           shift and go to state 447
    expression                     shift and go to state 448
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 289

    (358) generate_for -> FOR LPAREN . forpre forcond forpost RPAREN generate_forcontent
    (280) forpre -> . blocking_substitution
    (281) forpre -> . SEMICOLON
    (246) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (413) empty -> .

    SEMICOLON       shift and go to state 451
    DELAY           shift and go to state 142
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)

    forpre                         shift and go to state 449
    blocking_substitution          shift and go to state 450
    delays                         shift and go to state 452
    empty                          shift and go to state 143

state 290

    (82) decl -> sigtypes declnamelist SEMICOLON .

    ENDMODULE       reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    GENERATE        reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    INTEGER         reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    REAL            reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    PARAMETER       reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    LOCALPARAM      reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    GENVAR          reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    ASSIGN          reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    ALWAYS          reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    ALWAYS_FF       reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    ALWAYS_COMB     reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    INITIAL         reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    ID              reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    SENS_OR         reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    FUNCTION        reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    TASK            reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    LPAREN          reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    INPUT           reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    OUTPUT          reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    INOUT           reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    TRI             reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    REG             reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    LOGIC           reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    WIRE            reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    SIGNED          reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    SUPPLY0         reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    SUPPLY1         reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    ENDGENERATE     reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    IF              reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    FOR             reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    WHILE           reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    CASE            reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    CASEX           reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    CASEZ           reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    BEGIN           reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    DELAY           reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    LBRACE          reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    END             reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    UNIQUE          reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    WAIT            reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    FOREVER         reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    FORK            reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    AT              reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    DOLLER          reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    DISABLE         reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    SEMICOLON       reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)
    ELSE            reduce using rule 82 (decl -> sigtypes declnamelist SEMICOLON .)


state 291

    (84) declnamelist -> declnamelist COMMA . declname
    (86) declname -> . ID
    (87) declname -> . ID dimensions

    ID              shift and go to state 454

    declname                       shift and go to state 453

state 292

    (83) decl -> sigtypes width declnamelist . SEMICOLON
    (84) declnamelist -> declnamelist . COMMA declname

    SEMICOLON       shift and go to state 455
    COMMA           shift and go to state 291


state 293

    (89) declassign -> sigtypes width declassign_element . SEMICOLON

    SEMICOLON       shift and go to state 456


state 294

    (88) declassign -> sigtypes declassign_element SEMICOLON .

    ENDMODULE       reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    GENERATE        reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    INTEGER         reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    REAL            reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    PARAMETER       reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    LOCALPARAM      reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    GENVAR          reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    ASSIGN          reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    ALWAYS          reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    ALWAYS_FF       reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    ALWAYS_COMB     reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    INITIAL         reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    ID              reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    SENS_OR         reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    FUNCTION        reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    TASK            reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    LPAREN          reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    INPUT           reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    OUTPUT          reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    INOUT           reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    TRI             reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    REG             reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    LOGIC           reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    WIRE            reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    SIGNED          reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    SUPPLY0         reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    SUPPLY1         reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    ENDGENERATE     reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    IF              reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    FOR             reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    ELSE            reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)
    END             reduce using rule 88 (declassign -> sigtypes declassign_element SEMICOLON .)


state 295

    (56) width -> LBRACKET expression . COLON expression RBRACKET
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    COLON           shift and go to state 457
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 296

    (90) declassign_element -> ID EQUALS . rvalue
    (135) rvalue -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    rvalue                         shift and go to state 458
    expression                     shift and go to state 459
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 297

    (87) declname -> ID dimensions .
    (58) dimensions -> dimensions . length
    (57) length -> . LBRACKET expression COLON expression RBRACKET

    SEMICOLON       reduce using rule 87 (declname -> ID dimensions .)
    COMMA           reduce using rule 87 (declname -> ID dimensions .)
    LBRACKET        shift and go to state 299

    length                         shift and go to state 460

state 298

    (59) dimensions -> length .

    LBRACKET        reduce using rule 59 (dimensions -> length .)
    SEMICOLON       reduce using rule 59 (dimensions -> length .)
    COMMA           reduce using rule 59 (dimensions -> length .)
    RPAREN          reduce using rule 59 (dimensions -> length .)


state 299

    (57) length -> LBRACKET . expression COLON expression RBRACKET
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 461
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 300

    (91) declassign_element -> delays ID . EQUALS delays rvalue

    EQUALS          shift and go to state 462


state 301

    (249) delays -> DELAY LPAREN . expression RPAREN
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 463
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 302

    (250) delays -> DELAY identifier .
    (407) scope -> identifier . DOT
    (190) pointer -> identifier . LBRACKET expression RBRACKET

    ID              reduce using rule 250 (delays -> DELAY identifier .)
    LBRACE          reduce using rule 250 (delays -> DELAY identifier .)
    MINUS           reduce using rule 250 (delays -> DELAY identifier .)
    PLUS            reduce using rule 250 (delays -> DELAY identifier .)
    LNOT            reduce using rule 250 (delays -> DELAY identifier .)
    NOT             reduce using rule 250 (delays -> DELAY identifier .)
    AND             reduce using rule 250 (delays -> DELAY identifier .)
    NAND            reduce using rule 250 (delays -> DELAY identifier .)
    NOR             reduce using rule 250 (delays -> DELAY identifier .)
    OR              reduce using rule 250 (delays -> DELAY identifier .)
    XOR             reduce using rule 250 (delays -> DELAY identifier .)
    XNOR            reduce using rule 250 (delays -> DELAY identifier .)
    LPAREN          reduce using rule 250 (delays -> DELAY identifier .)
    DOLLER          reduce using rule 250 (delays -> DELAY identifier .)
    INTNUMBER_DEC   reduce using rule 250 (delays -> DELAY identifier .)
    SIGNED_INTNUMBER_DEC reduce using rule 250 (delays -> DELAY identifier .)
    INTNUMBER_BIN   reduce using rule 250 (delays -> DELAY identifier .)
    SIGNED_INTNUMBER_BIN reduce using rule 250 (delays -> DELAY identifier .)
    INTNUMBER_OCT   reduce using rule 250 (delays -> DELAY identifier .)
    SIGNED_INTNUMBER_OCT reduce using rule 250 (delays -> DELAY identifier .)
    INTNUMBER_HEX   reduce using rule 250 (delays -> DELAY identifier .)
    SIGNED_INTNUMBER_HEX reduce using rule 250 (delays -> DELAY identifier .)
    FLOATNUMBER     reduce using rule 250 (delays -> DELAY identifier .)
    STRING_LITERAL  reduce using rule 250 (delays -> DELAY identifier .)
    IF              reduce using rule 250 (delays -> DELAY identifier .)
    DOT             shift and go to state 280
    LBRACKET        shift and go to state 464


state 303

    (251) delays -> DELAY intnumber .

    ID              reduce using rule 251 (delays -> DELAY intnumber .)
    LBRACE          reduce using rule 251 (delays -> DELAY intnumber .)
    MINUS           reduce using rule 251 (delays -> DELAY intnumber .)
    PLUS            reduce using rule 251 (delays -> DELAY intnumber .)
    LNOT            reduce using rule 251 (delays -> DELAY intnumber .)
    NOT             reduce using rule 251 (delays -> DELAY intnumber .)
    AND             reduce using rule 251 (delays -> DELAY intnumber .)
    NAND            reduce using rule 251 (delays -> DELAY intnumber .)
    NOR             reduce using rule 251 (delays -> DELAY intnumber .)
    OR              reduce using rule 251 (delays -> DELAY intnumber .)
    XOR             reduce using rule 251 (delays -> DELAY intnumber .)
    XNOR            reduce using rule 251 (delays -> DELAY intnumber .)
    LPAREN          reduce using rule 251 (delays -> DELAY intnumber .)
    DOLLER          reduce using rule 251 (delays -> DELAY intnumber .)
    INTNUMBER_DEC   reduce using rule 251 (delays -> DELAY intnumber .)
    SIGNED_INTNUMBER_DEC reduce using rule 251 (delays -> DELAY intnumber .)
    INTNUMBER_BIN   reduce using rule 251 (delays -> DELAY intnumber .)
    SIGNED_INTNUMBER_BIN reduce using rule 251 (delays -> DELAY intnumber .)
    INTNUMBER_OCT   reduce using rule 251 (delays -> DELAY intnumber .)
    SIGNED_INTNUMBER_OCT reduce using rule 251 (delays -> DELAY intnumber .)
    INTNUMBER_HEX   reduce using rule 251 (delays -> DELAY intnumber .)
    SIGNED_INTNUMBER_HEX reduce using rule 251 (delays -> DELAY intnumber .)
    FLOATNUMBER     reduce using rule 251 (delays -> DELAY intnumber .)
    STRING_LITERAL  reduce using rule 251 (delays -> DELAY intnumber .)
    IF              reduce using rule 251 (delays -> DELAY intnumber .)


state 304

    (252) delays -> DELAY floatnumber .

    ID              reduce using rule 252 (delays -> DELAY floatnumber .)
    LBRACE          reduce using rule 252 (delays -> DELAY floatnumber .)
    MINUS           reduce using rule 252 (delays -> DELAY floatnumber .)
    PLUS            reduce using rule 252 (delays -> DELAY floatnumber .)
    LNOT            reduce using rule 252 (delays -> DELAY floatnumber .)
    NOT             reduce using rule 252 (delays -> DELAY floatnumber .)
    AND             reduce using rule 252 (delays -> DELAY floatnumber .)
    NAND            reduce using rule 252 (delays -> DELAY floatnumber .)
    NOR             reduce using rule 252 (delays -> DELAY floatnumber .)
    OR              reduce using rule 252 (delays -> DELAY floatnumber .)
    XOR             reduce using rule 252 (delays -> DELAY floatnumber .)
    XNOR            reduce using rule 252 (delays -> DELAY floatnumber .)
    LPAREN          reduce using rule 252 (delays -> DELAY floatnumber .)
    DOLLER          reduce using rule 252 (delays -> DELAY floatnumber .)
    INTNUMBER_DEC   reduce using rule 252 (delays -> DELAY floatnumber .)
    SIGNED_INTNUMBER_DEC reduce using rule 252 (delays -> DELAY floatnumber .)
    INTNUMBER_BIN   reduce using rule 252 (delays -> DELAY floatnumber .)
    SIGNED_INTNUMBER_BIN reduce using rule 252 (delays -> DELAY floatnumber .)
    INTNUMBER_OCT   reduce using rule 252 (delays -> DELAY floatnumber .)
    SIGNED_INTNUMBER_OCT reduce using rule 252 (delays -> DELAY floatnumber .)
    INTNUMBER_HEX   reduce using rule 252 (delays -> DELAY floatnumber .)
    SIGNED_INTNUMBER_HEX reduce using rule 252 (delays -> DELAY floatnumber .)
    FLOATNUMBER     reduce using rule 252 (delays -> DELAY floatnumber .)
    STRING_LITERAL  reduce using rule 252 (delays -> DELAY floatnumber .)
    IF              reduce using rule 252 (delays -> DELAY floatnumber .)


state 305

    (408) scope -> pointer . DOT
    (191) pointer -> pointer . LBRACKET expression RBRACKET

    DOT             shift and go to state 277
    LBRACKET        shift and go to state 465


state 306

    (92) integerdecl -> INTEGER integernamelist SEMICOLON .

    ENDMODULE       reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    GENERATE        reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    INTEGER         reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    REAL            reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    PARAMETER       reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    LOCALPARAM      reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    GENVAR          reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    ASSIGN          reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    ALWAYS          reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    ALWAYS_FF       reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    ALWAYS_COMB     reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    INITIAL         reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    ID              reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    SENS_OR         reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    FUNCTION        reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    TASK            reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    LPAREN          reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    INPUT           reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    OUTPUT          reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    INOUT           reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    TRI             reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    REG             reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    LOGIC           reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    WIRE            reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    SIGNED          reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    SUPPLY0         reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    SUPPLY1         reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    ENDGENERATE     reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    IF              reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    FOR             reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    WHILE           reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    CASE            reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    CASEX           reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    CASEZ           reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    BEGIN           reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    DELAY           reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    LBRACE          reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    END             reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    UNIQUE          reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    WAIT            reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    FOREVER         reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    FORK            reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    AT              reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    DOLLER          reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    DISABLE         reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    SEMICOLON       reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    ELSE            reduce using rule 92 (integerdecl -> INTEGER integernamelist SEMICOLON .)


state 307

    (94) integernamelist -> integernamelist COMMA . integername
    (96) integername -> . ID EQUALS rvalue
    (97) integername -> . ID

    ID              shift and go to state 147

    integername                    shift and go to state 466

state 308

    (93) integerdecl -> INTEGER SIGNED integernamelist . SEMICOLON
    (94) integernamelist -> integernamelist . COMMA integername

    SEMICOLON       shift and go to state 467
    COMMA           shift and go to state 307


state 309

    (96) integername -> ID EQUALS . rvalue
    (135) rvalue -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    rvalue                         shift and go to state 468
    expression                     shift and go to state 459
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 310

    (98) realdecl -> REAL realnamelist SEMICOLON .

    ENDMODULE       reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    GENERATE        reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    INTEGER         reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    REAL            reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    PARAMETER       reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    LOCALPARAM      reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    GENVAR          reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    ASSIGN          reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    ALWAYS          reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    ALWAYS_FF       reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    ALWAYS_COMB     reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    INITIAL         reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    ID              reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    SENS_OR         reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    FUNCTION        reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    TASK            reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    LPAREN          reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    INPUT           reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    OUTPUT          reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    INOUT           reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    TRI             reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    REG             reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    LOGIC           reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    WIRE            reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    SIGNED          reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    SUPPLY0         reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    SUPPLY1         reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    ENDGENERATE     reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    IF              reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    FOR             reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    END             reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    CASE            reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    CASEX           reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    CASEZ           reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    UNIQUE          reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    WHILE           reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    WAIT            reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    FOREVER         reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    BEGIN           reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    FORK            reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    DELAY           reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    AT              reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    DOLLER          reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    DISABLE         reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    LBRACE          reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    SEMICOLON       reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)
    ELSE            reduce using rule 98 (realdecl -> REAL realnamelist SEMICOLON .)


state 311

    (99) realnamelist -> realnamelist COMMA . realname
    (101) realname -> . ID

    ID              shift and go to state 150

    realname                       shift and go to state 469

state 312

    (102) parameterdecl -> PARAMETER param_substitution_list SEMICOLON .

    ENDMODULE       reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    GENERATE        reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    INTEGER         reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    REAL            reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    PARAMETER       reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    LOCALPARAM      reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    GENVAR          reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    ASSIGN          reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    ALWAYS          reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    ALWAYS_FF       reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    ALWAYS_COMB     reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    INITIAL         reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    ID              reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    SENS_OR         reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    FUNCTION        reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    TASK            reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    LPAREN          reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    INPUT           reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    OUTPUT          reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    INOUT           reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    TRI             reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    REG             reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    LOGIC           reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    WIRE            reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    SIGNED          reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    SUPPLY0         reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    SUPPLY1         reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    ENDGENERATE     reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    IF              reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    FOR             reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    END             reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    CASE            reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    CASEX           reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    CASEZ           reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    UNIQUE          reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    WHILE           reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    WAIT            reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    FOREVER         reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    BEGIN           reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    FORK            reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    DELAY           reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    AT              reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    DOLLER          reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    DISABLE         reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    LBRACE          reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    SEMICOLON       reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    ELSE            reduce using rule 102 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)


state 313

    (112) param_substitution_list -> param_substitution_list COMMA . param_substitution
    (114) param_substitution -> . ID EQUALS rvalue

    ID              shift and go to state 156

    param_substitution             shift and go to state 470

state 314

    (103) parameterdecl -> PARAMETER SIGNED param_substitution_list . SEMICOLON
    (112) param_substitution_list -> param_substitution_list . COMMA param_substitution

    SEMICOLON       shift and go to state 471
    COMMA           shift and go to state 313


state 315

    (105) parameterdecl -> PARAMETER SIGNED width . param_substitution_list SEMICOLON
    (112) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (113) param_substitution_list -> . param_substitution
    (114) param_substitution -> . ID EQUALS rvalue

    ID              shift and go to state 156

    param_substitution_list        shift and go to state 472
    param_substitution             shift and go to state 155

state 316

    (104) parameterdecl -> PARAMETER width param_substitution_list . SEMICOLON
    (112) param_substitution_list -> param_substitution_list . COMMA param_substitution

    SEMICOLON       shift and go to state 473
    COMMA           shift and go to state 313


state 317

    (106) parameterdecl -> PARAMETER INTEGER param_substitution_list . SEMICOLON
    (112) param_substitution_list -> param_substitution_list . COMMA param_substitution

    SEMICOLON       shift and go to state 474
    COMMA           shift and go to state 313


state 318

    (114) param_substitution -> ID EQUALS . rvalue
    (135) rvalue -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    rvalue                         shift and go to state 475
    expression                     shift and go to state 459
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 319

    (107) localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .

    ENDMODULE       reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    GENERATE        reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    INTEGER         reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    REAL            reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    PARAMETER       reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    LOCALPARAM      reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    GENVAR          reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    ASSIGN          reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    ALWAYS          reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    ALWAYS_FF       reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    ALWAYS_COMB     reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    INITIAL         reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    ID              reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    SENS_OR         reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    FUNCTION        reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    TASK            reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    LPAREN          reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    INPUT           reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    OUTPUT          reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    INOUT           reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    TRI             reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    REG             reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    LOGIC           reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    WIRE            reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    SIGNED          reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    SUPPLY0         reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    SUPPLY1         reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    ENDGENERATE     reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    IF              reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    FOR             reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    END             reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    CASE            reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    CASEX           reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    CASEZ           reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    UNIQUE          reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    WHILE           reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    WAIT            reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    FOREVER         reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    BEGIN           reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    FORK            reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    DELAY           reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    AT              reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    DOLLER          reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    DISABLE         reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    LBRACE          reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    SEMICOLON       reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    ELSE            reduce using rule 107 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)


state 320

    (108) localparamdecl -> LOCALPARAM SIGNED param_substitution_list . SEMICOLON
    (112) param_substitution_list -> param_substitution_list . COMMA param_substitution

    SEMICOLON       shift and go to state 476
    COMMA           shift and go to state 313


state 321

    (110) localparamdecl -> LOCALPARAM SIGNED width . param_substitution_list SEMICOLON
    (112) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (113) param_substitution_list -> . param_substitution
    (114) param_substitution -> . ID EQUALS rvalue

    ID              shift and go to state 156

    param_substitution_list        shift and go to state 477
    param_substitution             shift and go to state 155

state 322

    (109) localparamdecl -> LOCALPARAM width param_substitution_list . SEMICOLON
    (112) param_substitution_list -> param_substitution_list . COMMA param_substitution

    SEMICOLON       shift and go to state 478
    COMMA           shift and go to state 313


state 323

    (111) localparamdecl -> LOCALPARAM INTEGER param_substitution_list . SEMICOLON
    (112) param_substitution_list -> param_substitution_list . COMMA param_substitution

    SEMICOLON       shift and go to state 479
    COMMA           shift and go to state 313


state 324

    (339) genvardecl -> GENVAR genvarlist SEMICOLON .

    ENDMODULE       reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    GENERATE        reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    INTEGER         reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    REAL            reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    PARAMETER       reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    LOCALPARAM      reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    GENVAR          reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    ASSIGN          reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    ALWAYS          reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    ALWAYS_FF       reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    ALWAYS_COMB     reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    INITIAL         reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    ID              reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    SENS_OR         reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    FUNCTION        reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    TASK            reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    LPAREN          reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    INPUT           reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    OUTPUT          reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    INOUT           reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    TRI             reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    REG             reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    LOGIC           reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    WIRE            reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    SIGNED          reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    SUPPLY0         reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    SUPPLY1         reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    ENDGENERATE     reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    IF              reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    FOR             reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    ELSE            reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    END             reduce using rule 339 (genvardecl -> GENVAR genvarlist SEMICOLON .)


state 325

    (340) genvarlist -> genvarlist COMMA . genvar
    (342) genvar -> . ID

    ID              shift and go to state 163

    genvar                         shift and go to state 480

state 326

    (115) assignment -> ASSIGN lvalue EQUALS . rvalue SEMICOLON
    (135) rvalue -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    rvalue                         shift and go to state 481
    expression                     shift and go to state 459
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 327

    (116) assignment -> ASSIGN delays lvalue . EQUALS delays rvalue SEMICOLON

    EQUALS          shift and go to state 482


state 328

    (120) lpartselect -> identifier LBRACKET . expression COLON expression RBRACKET
    (121) lpartselect -> identifier LBRACKET . expression PLUSCOLON expression RBRACKET
    (122) lpartselect -> identifier LBRACKET . expression MINUSCOLON expression RBRACKET
    (190) pointer -> identifier LBRACKET . expression RBRACKET
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    identifier                     shift and go to state 106
    expression                     shift and go to state 483
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 329

    (117) lpartselect -> pointer LBRACKET . expression COLON expression RBRACKET
    (118) lpartselect -> pointer LBRACKET . expression PLUSCOLON expression RBRACKET
    (119) lpartselect -> pointer LBRACKET . expression MINUSCOLON expression RBRACKET
    (191) pointer -> pointer LBRACKET . expression RBRACKET
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    pointer                        shift and go to state 103
    expression                     shift and go to state 484
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 330

    (124) lconcat -> LBRACE lconcatlist . RBRACE
    (125) lconcatlist -> lconcatlist . COMMA lconcat_one

    RBRACE          shift and go to state 485
    COMMA           shift and go to state 486


state 331

    (126) lconcatlist -> lconcat_one .

    RBRACE          reduce using rule 126 (lconcatlist -> lconcat_one .)
    COMMA           reduce using rule 126 (lconcatlist -> lconcat_one .)


state 332

    (127) lconcat_one -> identifier .
    (120) lpartselect -> identifier . LBRACKET expression COLON expression RBRACKET
    (121) lpartselect -> identifier . LBRACKET expression PLUSCOLON expression RBRACKET
    (122) lpartselect -> identifier . LBRACKET expression MINUSCOLON expression RBRACKET
    (407) scope -> identifier . DOT
    (190) pointer -> identifier . LBRACKET expression RBRACKET

    RBRACE          reduce using rule 127 (lconcat_one -> identifier .)
    COMMA           reduce using rule 127 (lconcat_one -> identifier .)
    LBRACKET        shift and go to state 328
    DOT             shift and go to state 280


state 333

    (128) lconcat_one -> lpartselect .

    RBRACE          reduce using rule 128 (lconcat_one -> lpartselect .)
    COMMA           reduce using rule 128 (lconcat_one -> lpartselect .)


state 334

    (129) lconcat_one -> lpointer .

    RBRACE          reduce using rule 129 (lconcat_one -> lpointer .)
    COMMA           reduce using rule 129 (lconcat_one -> lpointer .)


state 335

    (130) lconcat_one -> lconcat .

    RBRACE          reduce using rule 130 (lconcat_one -> lconcat .)
    COMMA           reduce using rule 130 (lconcat_one -> lconcat .)


state 336

    (117) lpartselect -> pointer . LBRACKET expression COLON expression RBRACKET
    (118) lpartselect -> pointer . LBRACKET expression PLUSCOLON expression RBRACKET
    (119) lpartselect -> pointer . LBRACKET expression MINUSCOLON expression RBRACKET
    (123) lpointer -> pointer .
    (408) scope -> pointer . DOT
    (191) pointer -> pointer . LBRACKET expression RBRACKET

    LBRACKET        shift and go to state 329
    RBRACE          reduce using rule 123 (lpointer -> pointer .)
    COMMA           reduce using rule 123 (lpointer -> pointer .)
    DOT             shift and go to state 277


state 337

    (205) always -> ALWAYS senslist always_statement .

    ENDMODULE       reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    GENERATE        reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    INTEGER         reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    REAL            reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    PARAMETER       reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    LOCALPARAM      reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    GENVAR          reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    ASSIGN          reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    ALWAYS          reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    ALWAYS_FF       reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    ALWAYS_COMB     reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    ALWAYS_LATCH    reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    INITIAL         reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    ID              reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    SENS_OR         reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    FUNCTION        reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    TASK            reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    LPAREN          reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    INPUT           reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    OUTPUT          reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    INOUT           reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    TRI             reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    REG             reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    LOGIC           reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    WIRE            reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    SIGNED          reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    SUPPLY0         reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    SUPPLY1         reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    ENDGENERATE     reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    IF              reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    FOR             reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    ELSE            reduce using rule 205 (always -> ALWAYS senslist always_statement .)
    END             reduce using rule 205 (always -> ALWAYS senslist always_statement .)


state 338

    (245) always_statement -> basic_statement .

    ENDMODULE       reduce using rule 245 (always_statement -> basic_statement .)
    GENERATE        reduce using rule 245 (always_statement -> basic_statement .)
    INTEGER         reduce using rule 245 (always_statement -> basic_statement .)
    REAL            reduce using rule 245 (always_statement -> basic_statement .)
    PARAMETER       reduce using rule 245 (always_statement -> basic_statement .)
    LOCALPARAM      reduce using rule 245 (always_statement -> basic_statement .)
    GENVAR          reduce using rule 245 (always_statement -> basic_statement .)
    ASSIGN          reduce using rule 245 (always_statement -> basic_statement .)
    ALWAYS          reduce using rule 245 (always_statement -> basic_statement .)
    ALWAYS_FF       reduce using rule 245 (always_statement -> basic_statement .)
    ALWAYS_COMB     reduce using rule 245 (always_statement -> basic_statement .)
    ALWAYS_LATCH    reduce using rule 245 (always_statement -> basic_statement .)
    INITIAL         reduce using rule 245 (always_statement -> basic_statement .)
    ID              reduce using rule 245 (always_statement -> basic_statement .)
    SENS_OR         reduce using rule 245 (always_statement -> basic_statement .)
    FUNCTION        reduce using rule 245 (always_statement -> basic_statement .)
    TASK            reduce using rule 245 (always_statement -> basic_statement .)
    LPAREN          reduce using rule 245 (always_statement -> basic_statement .)
    INPUT           reduce using rule 245 (always_statement -> basic_statement .)
    OUTPUT          reduce using rule 245 (always_statement -> basic_statement .)
    INOUT           reduce using rule 245 (always_statement -> basic_statement .)
    TRI             reduce using rule 245 (always_statement -> basic_statement .)
    REG             reduce using rule 245 (always_statement -> basic_statement .)
    LOGIC           reduce using rule 245 (always_statement -> basic_statement .)
    WIRE            reduce using rule 245 (always_statement -> basic_statement .)
    SIGNED          reduce using rule 245 (always_statement -> basic_statement .)
    SUPPLY0         reduce using rule 245 (always_statement -> basic_statement .)
    SUPPLY1         reduce using rule 245 (always_statement -> basic_statement .)
    ENDGENERATE     reduce using rule 245 (always_statement -> basic_statement .)
    IF              reduce using rule 245 (always_statement -> basic_statement .)
    FOR             reduce using rule 245 (always_statement -> basic_statement .)
    ELSE            reduce using rule 245 (always_statement -> basic_statement .)
    END             reduce using rule 245 (always_statement -> basic_statement .)


state 339

    (209) senslist -> AT LPAREN . edgesigs RPAREN
    (219) senslist -> AT LPAREN . levelsigs RPAREN
    (228) senslist -> AT LPAREN . TIMES RPAREN
    (214) edgesigs -> . edgesigs SENS_OR edgesig
    (215) edgesigs -> . edgesigs COMMA edgesig
    (216) edgesigs -> . edgesig
    (224) levelsigs -> . levelsigs SENS_OR levelsig
    (225) levelsigs -> . levelsigs COMMA levelsig
    (226) levelsigs -> . levelsig
    (210) edgesig -> . POSEDGE edgesig_base
    (211) edgesig -> . NEGEDGE edgesig_base
    (220) levelsig -> . levelsig_base
    (221) levelsig_base -> . identifier
    (222) levelsig_base -> . pointer
    (223) levelsig_base -> . partselect
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT

    TIMES           shift and go to state 489
    POSEDGE         shift and go to state 492
    NEGEDGE         shift and go to state 493
    ID              shift and go to state 88

    edgesigs                       shift and go to state 487
    levelsigs                      shift and go to state 488
    edgesig                        shift and go to state 490
    levelsig                       shift and go to state 491
    levelsig_base                  shift and go to state 342
    identifier                     shift and go to state 343
    pointer                        shift and go to state 344
    partselect                     shift and go to state 345
    scope                          shift and go to state 110

state 340

    (218) senslist -> AT levelsig .

    IF              reduce using rule 218 (senslist -> AT levelsig .)
    CASE            reduce using rule 218 (senslist -> AT levelsig .)
    CASEX           reduce using rule 218 (senslist -> AT levelsig .)
    CASEZ           reduce using rule 218 (senslist -> AT levelsig .)
    UNIQUE          reduce using rule 218 (senslist -> AT levelsig .)
    FOR             reduce using rule 218 (senslist -> AT levelsig .)
    WHILE           reduce using rule 218 (senslist -> AT levelsig .)
    WAIT            reduce using rule 218 (senslist -> AT levelsig .)
    FOREVER         reduce using rule 218 (senslist -> AT levelsig .)
    BEGIN           reduce using rule 218 (senslist -> AT levelsig .)
    FORK            reduce using rule 218 (senslist -> AT levelsig .)
    DELAY           reduce using rule 218 (senslist -> AT levelsig .)
    AT              reduce using rule 218 (senslist -> AT levelsig .)
    DOLLER          reduce using rule 218 (senslist -> AT levelsig .)
    DISABLE         reduce using rule 218 (senslist -> AT levelsig .)
    LBRACE          reduce using rule 218 (senslist -> AT levelsig .)
    ID              reduce using rule 218 (senslist -> AT levelsig .)
    SEMICOLON       reduce using rule 218 (senslist -> AT levelsig .)


state 341

    (227) senslist -> AT TIMES .

    IF              reduce using rule 227 (senslist -> AT TIMES .)
    CASE            reduce using rule 227 (senslist -> AT TIMES .)
    CASEX           reduce using rule 227 (senslist -> AT TIMES .)
    CASEZ           reduce using rule 227 (senslist -> AT TIMES .)
    UNIQUE          reduce using rule 227 (senslist -> AT TIMES .)
    FOR             reduce using rule 227 (senslist -> AT TIMES .)
    WHILE           reduce using rule 227 (senslist -> AT TIMES .)
    WAIT            reduce using rule 227 (senslist -> AT TIMES .)
    FOREVER         reduce using rule 227 (senslist -> AT TIMES .)
    BEGIN           reduce using rule 227 (senslist -> AT TIMES .)
    FORK            reduce using rule 227 (senslist -> AT TIMES .)
    DELAY           reduce using rule 227 (senslist -> AT TIMES .)
    AT              reduce using rule 227 (senslist -> AT TIMES .)
    DOLLER          reduce using rule 227 (senslist -> AT TIMES .)
    DISABLE         reduce using rule 227 (senslist -> AT TIMES .)
    LBRACE          reduce using rule 227 (senslist -> AT TIMES .)
    ID              reduce using rule 227 (senslist -> AT TIMES .)
    SEMICOLON       reduce using rule 227 (senslist -> AT TIMES .)


state 342

    (220) levelsig -> levelsig_base .

    IF              reduce using rule 220 (levelsig -> levelsig_base .)
    CASE            reduce using rule 220 (levelsig -> levelsig_base .)
    CASEX           reduce using rule 220 (levelsig -> levelsig_base .)
    CASEZ           reduce using rule 220 (levelsig -> levelsig_base .)
    UNIQUE          reduce using rule 220 (levelsig -> levelsig_base .)
    FOR             reduce using rule 220 (levelsig -> levelsig_base .)
    WHILE           reduce using rule 220 (levelsig -> levelsig_base .)
    WAIT            reduce using rule 220 (levelsig -> levelsig_base .)
    FOREVER         reduce using rule 220 (levelsig -> levelsig_base .)
    BEGIN           reduce using rule 220 (levelsig -> levelsig_base .)
    FORK            reduce using rule 220 (levelsig -> levelsig_base .)
    DELAY           reduce using rule 220 (levelsig -> levelsig_base .)
    AT              reduce using rule 220 (levelsig -> levelsig_base .)
    DOLLER          reduce using rule 220 (levelsig -> levelsig_base .)
    DISABLE         reduce using rule 220 (levelsig -> levelsig_base .)
    LBRACE          reduce using rule 220 (levelsig -> levelsig_base .)
    ID              reduce using rule 220 (levelsig -> levelsig_base .)
    SEMICOLON       reduce using rule 220 (levelsig -> levelsig_base .)
    RPAREN          reduce using rule 220 (levelsig -> levelsig_base .)
    SENS_OR         reduce using rule 220 (levelsig -> levelsig_base .)
    COMMA           reduce using rule 220 (levelsig -> levelsig_base .)


state 343

    (221) levelsig_base -> identifier .
    (190) pointer -> identifier . LBRACKET expression RBRACKET
    (184) partselect -> identifier . LBRACKET expression COLON expression RBRACKET
    (185) partselect -> identifier . LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> identifier . LBRACKET expression MINUSCOLON expression RBRACKET
    (407) scope -> identifier . DOT

    IF              reduce using rule 221 (levelsig_base -> identifier .)
    CASE            reduce using rule 221 (levelsig_base -> identifier .)
    CASEX           reduce using rule 221 (levelsig_base -> identifier .)
    CASEZ           reduce using rule 221 (levelsig_base -> identifier .)
    UNIQUE          reduce using rule 221 (levelsig_base -> identifier .)
    FOR             reduce using rule 221 (levelsig_base -> identifier .)
    WHILE           reduce using rule 221 (levelsig_base -> identifier .)
    WAIT            reduce using rule 221 (levelsig_base -> identifier .)
    FOREVER         reduce using rule 221 (levelsig_base -> identifier .)
    BEGIN           reduce using rule 221 (levelsig_base -> identifier .)
    FORK            reduce using rule 221 (levelsig_base -> identifier .)
    DELAY           reduce using rule 221 (levelsig_base -> identifier .)
    AT              reduce using rule 221 (levelsig_base -> identifier .)
    DOLLER          reduce using rule 221 (levelsig_base -> identifier .)
    DISABLE         reduce using rule 221 (levelsig_base -> identifier .)
    LBRACE          reduce using rule 221 (levelsig_base -> identifier .)
    ID              reduce using rule 221 (levelsig_base -> identifier .)
    SEMICOLON       reduce using rule 221 (levelsig_base -> identifier .)
    RPAREN          reduce using rule 221 (levelsig_base -> identifier .)
    SENS_OR         reduce using rule 221 (levelsig_base -> identifier .)
    COMMA           reduce using rule 221 (levelsig_base -> identifier .)
    LBRACKET        shift and go to state 494
    DOT             shift and go to state 280


state 344

    (222) levelsig_base -> pointer .
    (191) pointer -> pointer . LBRACKET expression RBRACKET
    (187) partselect -> pointer . LBRACKET expression COLON expression RBRACKET
    (188) partselect -> pointer . LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> pointer . LBRACKET expression MINUSCOLON expression RBRACKET
    (408) scope -> pointer . DOT

    IF              reduce using rule 222 (levelsig_base -> pointer .)
    CASE            reduce using rule 222 (levelsig_base -> pointer .)
    CASEX           reduce using rule 222 (levelsig_base -> pointer .)
    CASEZ           reduce using rule 222 (levelsig_base -> pointer .)
    UNIQUE          reduce using rule 222 (levelsig_base -> pointer .)
    FOR             reduce using rule 222 (levelsig_base -> pointer .)
    WHILE           reduce using rule 222 (levelsig_base -> pointer .)
    WAIT            reduce using rule 222 (levelsig_base -> pointer .)
    FOREVER         reduce using rule 222 (levelsig_base -> pointer .)
    BEGIN           reduce using rule 222 (levelsig_base -> pointer .)
    FORK            reduce using rule 222 (levelsig_base -> pointer .)
    DELAY           reduce using rule 222 (levelsig_base -> pointer .)
    AT              reduce using rule 222 (levelsig_base -> pointer .)
    DOLLER          reduce using rule 222 (levelsig_base -> pointer .)
    DISABLE         reduce using rule 222 (levelsig_base -> pointer .)
    LBRACE          reduce using rule 222 (levelsig_base -> pointer .)
    ID              reduce using rule 222 (levelsig_base -> pointer .)
    SEMICOLON       reduce using rule 222 (levelsig_base -> pointer .)
    RPAREN          reduce using rule 222 (levelsig_base -> pointer .)
    SENS_OR         reduce using rule 222 (levelsig_base -> pointer .)
    COMMA           reduce using rule 222 (levelsig_base -> pointer .)
    LBRACKET        shift and go to state 495
    DOT             shift and go to state 277


state 345

    (223) levelsig_base -> partselect .

    IF              reduce using rule 223 (levelsig_base -> partselect .)
    CASE            reduce using rule 223 (levelsig_base -> partselect .)
    CASEX           reduce using rule 223 (levelsig_base -> partselect .)
    CASEZ           reduce using rule 223 (levelsig_base -> partselect .)
    UNIQUE          reduce using rule 223 (levelsig_base -> partselect .)
    FOR             reduce using rule 223 (levelsig_base -> partselect .)
    WHILE           reduce using rule 223 (levelsig_base -> partselect .)
    WAIT            reduce using rule 223 (levelsig_base -> partselect .)
    FOREVER         reduce using rule 223 (levelsig_base -> partselect .)
    BEGIN           reduce using rule 223 (levelsig_base -> partselect .)
    FORK            reduce using rule 223 (levelsig_base -> partselect .)
    DELAY           reduce using rule 223 (levelsig_base -> partselect .)
    AT              reduce using rule 223 (levelsig_base -> partselect .)
    DOLLER          reduce using rule 223 (levelsig_base -> partselect .)
    DISABLE         reduce using rule 223 (levelsig_base -> partselect .)
    LBRACE          reduce using rule 223 (levelsig_base -> partselect .)
    ID              reduce using rule 223 (levelsig_base -> partselect .)
    SEMICOLON       reduce using rule 223 (levelsig_base -> partselect .)
    RPAREN          reduce using rule 223 (levelsig_base -> partselect .)
    SENS_OR         reduce using rule 223 (levelsig_base -> partselect .)
    COMMA           reduce using rule 223 (levelsig_base -> partselect .)


state 346

    (206) always_ff -> ALWAYS_FF senslist always_statement .

    ENDMODULE       reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    GENERATE        reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    INTEGER         reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    REAL            reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    PARAMETER       reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    LOCALPARAM      reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    GENVAR          reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    ASSIGN          reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    ALWAYS          reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    ALWAYS_FF       reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    ALWAYS_COMB     reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    ALWAYS_LATCH    reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    INITIAL         reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    ID              reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    SENS_OR         reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    FUNCTION        reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    TASK            reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    LPAREN          reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    INPUT           reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    OUTPUT          reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    INOUT           reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    TRI             reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    REG             reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    LOGIC           reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    WIRE            reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    SIGNED          reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    SUPPLY0         reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    SUPPLY1         reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    ENDGENERATE     reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    IF              reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    FOR             reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    ELSE            reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)
    END             reduce using rule 206 (always_ff -> ALWAYS_FF senslist always_statement .)


state 347

    (207) always_comb -> ALWAYS_COMB senslist always_statement .

    ENDMODULE       reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    GENERATE        reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    INTEGER         reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    REAL            reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    PARAMETER       reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    LOCALPARAM      reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    GENVAR          reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    ASSIGN          reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    ALWAYS          reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    ALWAYS_FF       reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    ALWAYS_COMB     reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    ALWAYS_LATCH    reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    INITIAL         reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    ID              reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    SENS_OR         reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    FUNCTION        reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    TASK            reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    LPAREN          reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    INPUT           reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    OUTPUT          reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    INOUT           reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    TRI             reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    REG             reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    LOGIC           reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    WIRE            reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    SIGNED          reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    SUPPLY0         reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    SUPPLY1         reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    ENDGENERATE     reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    IF              reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    FOR             reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    ELSE            reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)
    END             reduce using rule 207 (always_comb -> ALWAYS_COMB senslist always_statement .)


state 348

    (208) always_latch -> ALWAYS_LATCH senslist always_statement .

    ENDMODULE       reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    GENERATE        reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    INTEGER         reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    REAL            reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    PARAMETER       reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    LOCALPARAM      reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    GENVAR          reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    ASSIGN          reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    ALWAYS          reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    ALWAYS_FF       reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    ALWAYS_COMB     reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    ALWAYS_LATCH    reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    INITIAL         reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    ID              reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    SENS_OR         reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    FUNCTION        reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    TASK            reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    LPAREN          reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    INPUT           reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    OUTPUT          reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    INOUT           reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    TRI             reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    REG             reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    LOGIC           reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    WIRE            reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    SIGNED          reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    SUPPLY0         reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    SUPPLY1         reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    ENDGENERATE     reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    IF              reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    FOR             reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    ELSE            reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)
    END             reduce using rule 208 (always_latch -> ALWAYS_LATCH senslist always_statement .)


state 349

    (271) if_statement -> IF LPAREN . cond RPAREN true_statement ELSE else_statement
    (272) if_statement -> IF LPAREN . cond RPAREN true_statement
    (275) cond -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    cond                           shift and go to state 496
    expression                     shift and go to state 448
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 350

    (273) if_statement -> delays IF . LPAREN cond RPAREN true_statement ELSE else_statement
    (274) if_statement -> delays IF . LPAREN cond RPAREN true_statement

    LPAREN          shift and go to state 497


state 351

    (246) blocking_substitution -> delays lvalue . EQUALS delays rvalue SEMICOLON
    (248) nonblocking_substitution -> delays lvalue . LE delays rvalue SEMICOLON

    EQUALS          shift and go to state 498
    LE              shift and go to state 499


state 352

    (289) case_statement -> CASE LPAREN . case_comp RPAREN casecontent_statements ENDCASE
    (293) case_comp -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    case_comp                      shift and go to state 500
    expression                     shift and go to state 501
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 353

    (290) casex_statement -> CASEX LPAREN . case_comp RPAREN casecontent_statements ENDCASE
    (293) case_comp -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    case_comp                      shift and go to state 502
    expression                     shift and go to state 501
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 354

    (291) casez_statement -> CASEZ LPAREN . case_comp RPAREN casecontent_statements ENDCASE
    (293) case_comp -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    case_comp                      shift and go to state 503
    expression                     shift and go to state 501
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 355

    (292) unique_case_statement -> UNIQUE CASE . LPAREN case_comp RPAREN casecontent_statements ENDCASE

    LPAREN          shift and go to state 504


state 356

    (279) for_statement -> FOR LPAREN . forpre forcond forpost RPAREN forcontent_statement
    (280) forpre -> . blocking_substitution
    (281) forpre -> . SEMICOLON
    (246) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (413) empty -> .

    SEMICOLON       shift and go to state 451
    DELAY           shift and go to state 142
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)

    forpre                         shift and go to state 505
    blocking_substitution          shift and go to state 450
    delays                         shift and go to state 452
    empty                          shift and go to state 143

state 357

    (287) while_statement -> WHILE LPAREN . cond RPAREN whilecontent_statement
    (275) cond -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    cond                           shift and go to state 506
    expression                     shift and go to state 448
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 358

    (302) event_statement -> senslist SEMICOLON .

    ENDMODULE       reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    GENERATE        reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    INTEGER         reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    REAL            reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    PARAMETER       reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    LOCALPARAM      reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    GENVAR          reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    ASSIGN          reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    ALWAYS          reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    ALWAYS_FF       reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    ALWAYS_COMB     reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    INITIAL         reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    ID              reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    SENS_OR         reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    FUNCTION        reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    TASK            reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    LPAREN          reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    INPUT           reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    OUTPUT          reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    INOUT           reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    TRI             reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    REG             reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    LOGIC           reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    WIRE            reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    SIGNED          reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    SUPPLY0         reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    SUPPLY1         reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    ENDGENERATE     reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    IF              reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    FOR             reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    ELSE            reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    END             reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    CASE            reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    CASEX           reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    CASEZ           reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    UNIQUE          reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    WHILE           reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    WAIT            reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    FOREVER         reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    BEGIN           reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    FORK            reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    DELAY           reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    AT              reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    DOLLER          reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    DISABLE         reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    LBRACE          reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    SEMICOLON       reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    JOIN            reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    ENDFUNCTION     reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    ENDTASK         reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    ENDCASE         reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    DEFAULT         reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    MINUS           reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    PLUS            reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    LNOT            reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    NOT             reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    AND             reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    NAND            reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    NOR             reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    OR              reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    XOR             reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    XNOR            reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    INTNUMBER_DEC   reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    SIGNED_INTNUMBER_DEC reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    INTNUMBER_BIN   reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    SIGNED_INTNUMBER_BIN reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    INTNUMBER_OCT   reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    SIGNED_INTNUMBER_OCT reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    INTNUMBER_HEX   reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    SIGNED_INTNUMBER_HEX reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    FLOATNUMBER     reduce using rule 302 (event_statement -> senslist SEMICOLON .)
    STRING_LITERAL  reduce using rule 302 (event_statement -> senslist SEMICOLON .)


state 359

    (303) wait_statement -> WAIT LPAREN . cond RPAREN waitcontent_statement
    (275) cond -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    cond                           shift and go to state 507
    expression                     shift and go to state 448
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 360

    (306) forever_statement -> FOREVER basic_statement .

    ENDMODULE       reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    GENERATE        reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    INTEGER         reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    REAL            reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    PARAMETER       reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    LOCALPARAM      reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    GENVAR          reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    ASSIGN          reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    ALWAYS          reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    ALWAYS_FF       reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    ALWAYS_COMB     reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    ALWAYS_LATCH    reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    INITIAL         reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    ID              reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    SENS_OR         reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    FUNCTION        reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    TASK            reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    LPAREN          reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    INPUT           reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    OUTPUT          reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    INOUT           reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    TRI             reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    REG             reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    LOGIC           reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    WIRE            reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    SIGNED          reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    SUPPLY0         reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    SUPPLY1         reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    ENDGENERATE     reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    IF              reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    FOR             reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    ELSE            reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    END             reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    CASE            reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    CASEX           reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    CASEZ           reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    UNIQUE          reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    WHILE           reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    WAIT            reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    FOREVER         reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    BEGIN           reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    FORK            reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    DELAY           reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    AT              reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    DOLLER          reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    DISABLE         reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    LBRACE          reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    SEMICOLON       reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    JOIN            reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    ENDFUNCTION     reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    ENDTASK         reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    ENDCASE         reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    DEFAULT         reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    MINUS           reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    PLUS            reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    LNOT            reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    NOT             reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    AND             reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    NAND            reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    NOR             reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    OR              reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    XOR             reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    XNOR            reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    INTNUMBER_DEC   reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    INTNUMBER_BIN   reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    INTNUMBER_OCT   reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    INTNUMBER_HEX   reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    FLOATNUMBER     reduce using rule 306 (forever_statement -> FOREVER basic_statement .)
    STRING_LITERAL  reduce using rule 306 (forever_statement -> FOREVER basic_statement .)


state 361

    (254) block -> BEGIN block_statements . END
    (256) block_statements -> block_statements . block_statement
    (258) block_statement -> . basic_statement
    (229) basic_statement -> . if_statement
    (230) basic_statement -> . case_statement
    (231) basic_statement -> . casex_statement
    (232) basic_statement -> . casez_statement
    (233) basic_statement -> . unique_case_statement
    (234) basic_statement -> . for_statement
    (235) basic_statement -> . while_statement
    (236) basic_statement -> . event_statement
    (237) basic_statement -> . wait_statement
    (238) basic_statement -> . forever_statement
    (239) basic_statement -> . block
    (240) basic_statement -> . namedblock
    (241) basic_statement -> . parallelblock
    (242) basic_statement -> . blocking_substitution
    (243) basic_statement -> . nonblocking_substitution
    (244) basic_statement -> . single_statement
    (271) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (272) if_statement -> . IF LPAREN cond RPAREN true_statement
    (273) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (274) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (289) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (290) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (291) casez_statement -> . CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (292) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (279) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (287) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (302) event_statement -> . senslist SEMICOLON
    (303) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (306) forever_statement -> . FOREVER basic_statement
    (254) block -> . BEGIN block_statements END
    (255) block -> . BEGIN END
    (259) namedblock -> . BEGIN COLON ID namedblock_statements END
    (260) namedblock -> . BEGIN COLON ID END
    (269) parallelblock -> . FORK block_statements JOIN
    (270) parallelblock -> . FORK JOIN
    (246) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (248) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (410) single_statement -> . DELAY expression SEMICOLON
    (411) single_statement -> . systemcall SEMICOLON
    (412) single_statement -> . disable SEMICOLON
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (209) senslist -> . AT LPAREN edgesigs RPAREN
    (217) senslist -> . empty
    (218) senslist -> . AT levelsig
    (219) senslist -> . AT LPAREN levelsigs RPAREN
    (227) senslist -> . AT TIMES
    (228) senslist -> . AT LPAREN TIMES RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (409) disable -> . DISABLE ID
    (413) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    END             shift and go to state 508
    IF              shift and go to state 196
    CASE            shift and go to state 198
    CASEX           shift and go to state 199
    CASEZ           shift and go to state 200
    UNIQUE          shift and go to state 201
    FOR             shift and go to state 202
    WHILE           shift and go to state 203
    WAIT            shift and go to state 205
    FOREVER         shift and go to state 206
    BEGIN           shift and go to state 207
    FORK            shift and go to state 208
    DELAY           shift and go to state 209
    AT              shift and go to state 173
    DOLLER          shift and go to state 109
    DISABLE         shift and go to state 213
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    SEMICOLON       reduce using rule 413 (empty -> .)

  ! IF              [ reduce using rule 413 (empty -> .) ]

    block_statement                shift and go to state 509
    basic_statement                shift and go to state 365
    if_statement                   shift and go to state 180
    case_statement                 shift and go to state 181
    casex_statement                shift and go to state 182
    casez_statement                shift and go to state 183
    unique_case_statement          shift and go to state 184
    for_statement                  shift and go to state 185
    while_statement                shift and go to state 186
    event_statement                shift and go to state 187
    wait_statement                 shift and go to state 188
    forever_statement              shift and go to state 189
    block                          shift and go to state 190
    namedblock                     shift and go to state 191
    parallelblock                  shift and go to state 192
    blocking_substitution          shift and go to state 193
    nonblocking_substitution       shift and go to state 194
    single_statement               shift and go to state 195
    delays                         shift and go to state 197
    senslist                       shift and go to state 204
    systemcall                     shift and go to state 210
    disable                        shift and go to state 211
    empty                          shift and go to state 212

state 362

    (255) block -> BEGIN END .

    ENDMODULE       reduce using rule 255 (block -> BEGIN END .)
    GENERATE        reduce using rule 255 (block -> BEGIN END .)
    INTEGER         reduce using rule 255 (block -> BEGIN END .)
    REAL            reduce using rule 255 (block -> BEGIN END .)
    PARAMETER       reduce using rule 255 (block -> BEGIN END .)
    LOCALPARAM      reduce using rule 255 (block -> BEGIN END .)
    GENVAR          reduce using rule 255 (block -> BEGIN END .)
    ASSIGN          reduce using rule 255 (block -> BEGIN END .)
    ALWAYS          reduce using rule 255 (block -> BEGIN END .)
    ALWAYS_FF       reduce using rule 255 (block -> BEGIN END .)
    ALWAYS_COMB     reduce using rule 255 (block -> BEGIN END .)
    ALWAYS_LATCH    reduce using rule 255 (block -> BEGIN END .)
    INITIAL         reduce using rule 255 (block -> BEGIN END .)
    ID              reduce using rule 255 (block -> BEGIN END .)
    SENS_OR         reduce using rule 255 (block -> BEGIN END .)
    FUNCTION        reduce using rule 255 (block -> BEGIN END .)
    TASK            reduce using rule 255 (block -> BEGIN END .)
    LPAREN          reduce using rule 255 (block -> BEGIN END .)
    INPUT           reduce using rule 255 (block -> BEGIN END .)
    OUTPUT          reduce using rule 255 (block -> BEGIN END .)
    INOUT           reduce using rule 255 (block -> BEGIN END .)
    TRI             reduce using rule 255 (block -> BEGIN END .)
    REG             reduce using rule 255 (block -> BEGIN END .)
    LOGIC           reduce using rule 255 (block -> BEGIN END .)
    WIRE            reduce using rule 255 (block -> BEGIN END .)
    SIGNED          reduce using rule 255 (block -> BEGIN END .)
    SUPPLY0         reduce using rule 255 (block -> BEGIN END .)
    SUPPLY1         reduce using rule 255 (block -> BEGIN END .)
    ENDGENERATE     reduce using rule 255 (block -> BEGIN END .)
    IF              reduce using rule 255 (block -> BEGIN END .)
    FOR             reduce using rule 255 (block -> BEGIN END .)
    ELSE            reduce using rule 255 (block -> BEGIN END .)
    END             reduce using rule 255 (block -> BEGIN END .)
    CASE            reduce using rule 255 (block -> BEGIN END .)
    CASEX           reduce using rule 255 (block -> BEGIN END .)
    CASEZ           reduce using rule 255 (block -> BEGIN END .)
    UNIQUE          reduce using rule 255 (block -> BEGIN END .)
    WHILE           reduce using rule 255 (block -> BEGIN END .)
    WAIT            reduce using rule 255 (block -> BEGIN END .)
    FOREVER         reduce using rule 255 (block -> BEGIN END .)
    BEGIN           reduce using rule 255 (block -> BEGIN END .)
    FORK            reduce using rule 255 (block -> BEGIN END .)
    DELAY           reduce using rule 255 (block -> BEGIN END .)
    AT              reduce using rule 255 (block -> BEGIN END .)
    DOLLER          reduce using rule 255 (block -> BEGIN END .)
    DISABLE         reduce using rule 255 (block -> BEGIN END .)
    LBRACE          reduce using rule 255 (block -> BEGIN END .)
    SEMICOLON       reduce using rule 255 (block -> BEGIN END .)
    JOIN            reduce using rule 255 (block -> BEGIN END .)
    ENDFUNCTION     reduce using rule 255 (block -> BEGIN END .)
    ENDTASK         reduce using rule 255 (block -> BEGIN END .)
    ENDCASE         reduce using rule 255 (block -> BEGIN END .)
    DEFAULT         reduce using rule 255 (block -> BEGIN END .)
    MINUS           reduce using rule 255 (block -> BEGIN END .)
    PLUS            reduce using rule 255 (block -> BEGIN END .)
    LNOT            reduce using rule 255 (block -> BEGIN END .)
    NOT             reduce using rule 255 (block -> BEGIN END .)
    AND             reduce using rule 255 (block -> BEGIN END .)
    NAND            reduce using rule 255 (block -> BEGIN END .)
    NOR             reduce using rule 255 (block -> BEGIN END .)
    OR              reduce using rule 255 (block -> BEGIN END .)
    XOR             reduce using rule 255 (block -> BEGIN END .)
    XNOR            reduce using rule 255 (block -> BEGIN END .)
    INTNUMBER_DEC   reduce using rule 255 (block -> BEGIN END .)
    SIGNED_INTNUMBER_DEC reduce using rule 255 (block -> BEGIN END .)
    INTNUMBER_BIN   reduce using rule 255 (block -> BEGIN END .)
    SIGNED_INTNUMBER_BIN reduce using rule 255 (block -> BEGIN END .)
    INTNUMBER_OCT   reduce using rule 255 (block -> BEGIN END .)
    SIGNED_INTNUMBER_OCT reduce using rule 255 (block -> BEGIN END .)
    INTNUMBER_HEX   reduce using rule 255 (block -> BEGIN END .)
    SIGNED_INTNUMBER_HEX reduce using rule 255 (block -> BEGIN END .)
    FLOATNUMBER     reduce using rule 255 (block -> BEGIN END .)
    STRING_LITERAL  reduce using rule 255 (block -> BEGIN END .)


state 363

    (259) namedblock -> BEGIN COLON . ID namedblock_statements END
    (260) namedblock -> BEGIN COLON . ID END

    ID              shift and go to state 510


state 364

    (257) block_statements -> block_statement .

    END             reduce using rule 257 (block_statements -> block_statement .)
    IF              reduce using rule 257 (block_statements -> block_statement .)
    CASE            reduce using rule 257 (block_statements -> block_statement .)
    CASEX           reduce using rule 257 (block_statements -> block_statement .)
    CASEZ           reduce using rule 257 (block_statements -> block_statement .)
    UNIQUE          reduce using rule 257 (block_statements -> block_statement .)
    FOR             reduce using rule 257 (block_statements -> block_statement .)
    WHILE           reduce using rule 257 (block_statements -> block_statement .)
    WAIT            reduce using rule 257 (block_statements -> block_statement .)
    FOREVER         reduce using rule 257 (block_statements -> block_statement .)
    BEGIN           reduce using rule 257 (block_statements -> block_statement .)
    FORK            reduce using rule 257 (block_statements -> block_statement .)
    DELAY           reduce using rule 257 (block_statements -> block_statement .)
    AT              reduce using rule 257 (block_statements -> block_statement .)
    DOLLER          reduce using rule 257 (block_statements -> block_statement .)
    DISABLE         reduce using rule 257 (block_statements -> block_statement .)
    LBRACE          reduce using rule 257 (block_statements -> block_statement .)
    ID              reduce using rule 257 (block_statements -> block_statement .)
    SEMICOLON       reduce using rule 257 (block_statements -> block_statement .)
    JOIN            reduce using rule 257 (block_statements -> block_statement .)


state 365

    (258) block_statement -> basic_statement .

    END             reduce using rule 258 (block_statement -> basic_statement .)
    IF              reduce using rule 258 (block_statement -> basic_statement .)
    CASE            reduce using rule 258 (block_statement -> basic_statement .)
    CASEX           reduce using rule 258 (block_statement -> basic_statement .)
    CASEZ           reduce using rule 258 (block_statement -> basic_statement .)
    UNIQUE          reduce using rule 258 (block_statement -> basic_statement .)
    FOR             reduce using rule 258 (block_statement -> basic_statement .)
    WHILE           reduce using rule 258 (block_statement -> basic_statement .)
    WAIT            reduce using rule 258 (block_statement -> basic_statement .)
    FOREVER         reduce using rule 258 (block_statement -> basic_statement .)
    BEGIN           reduce using rule 258 (block_statement -> basic_statement .)
    FORK            reduce using rule 258 (block_statement -> basic_statement .)
    DELAY           reduce using rule 258 (block_statement -> basic_statement .)
    AT              reduce using rule 258 (block_statement -> basic_statement .)
    DOLLER          reduce using rule 258 (block_statement -> basic_statement .)
    DISABLE         reduce using rule 258 (block_statement -> basic_statement .)
    LBRACE          reduce using rule 258 (block_statement -> basic_statement .)
    ID              reduce using rule 258 (block_statement -> basic_statement .)
    SEMICOLON       reduce using rule 258 (block_statement -> basic_statement .)
    JOIN            reduce using rule 258 (block_statement -> basic_statement .)


state 366

    (269) parallelblock -> FORK block_statements . JOIN
    (256) block_statements -> block_statements . block_statement
    (258) block_statement -> . basic_statement
    (229) basic_statement -> . if_statement
    (230) basic_statement -> . case_statement
    (231) basic_statement -> . casex_statement
    (232) basic_statement -> . casez_statement
    (233) basic_statement -> . unique_case_statement
    (234) basic_statement -> . for_statement
    (235) basic_statement -> . while_statement
    (236) basic_statement -> . event_statement
    (237) basic_statement -> . wait_statement
    (238) basic_statement -> . forever_statement
    (239) basic_statement -> . block
    (240) basic_statement -> . namedblock
    (241) basic_statement -> . parallelblock
    (242) basic_statement -> . blocking_substitution
    (243) basic_statement -> . nonblocking_substitution
    (244) basic_statement -> . single_statement
    (271) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (272) if_statement -> . IF LPAREN cond RPAREN true_statement
    (273) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (274) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (289) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (290) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (291) casez_statement -> . CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (292) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (279) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (287) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (302) event_statement -> . senslist SEMICOLON
    (303) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (306) forever_statement -> . FOREVER basic_statement
    (254) block -> . BEGIN block_statements END
    (255) block -> . BEGIN END
    (259) namedblock -> . BEGIN COLON ID namedblock_statements END
    (260) namedblock -> . BEGIN COLON ID END
    (269) parallelblock -> . FORK block_statements JOIN
    (270) parallelblock -> . FORK JOIN
    (246) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (248) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (410) single_statement -> . DELAY expression SEMICOLON
    (411) single_statement -> . systemcall SEMICOLON
    (412) single_statement -> . disable SEMICOLON
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (209) senslist -> . AT LPAREN edgesigs RPAREN
    (217) senslist -> . empty
    (218) senslist -> . AT levelsig
    (219) senslist -> . AT LPAREN levelsigs RPAREN
    (227) senslist -> . AT TIMES
    (228) senslist -> . AT LPAREN TIMES RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (409) disable -> . DISABLE ID
    (413) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    JOIN            shift and go to state 511
    IF              shift and go to state 196
    CASE            shift and go to state 198
    CASEX           shift and go to state 199
    CASEZ           shift and go to state 200
    UNIQUE          shift and go to state 201
    FOR             shift and go to state 202
    WHILE           shift and go to state 203
    WAIT            shift and go to state 205
    FOREVER         shift and go to state 206
    BEGIN           shift and go to state 207
    FORK            shift and go to state 208
    DELAY           shift and go to state 209
    AT              shift and go to state 173
    DOLLER          shift and go to state 109
    DISABLE         shift and go to state 213
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    SEMICOLON       reduce using rule 413 (empty -> .)

  ! IF              [ reduce using rule 413 (empty -> .) ]

    block_statement                shift and go to state 509
    basic_statement                shift and go to state 365
    if_statement                   shift and go to state 180
    case_statement                 shift and go to state 181
    casex_statement                shift and go to state 182
    casez_statement                shift and go to state 183
    unique_case_statement          shift and go to state 184
    for_statement                  shift and go to state 185
    while_statement                shift and go to state 186
    event_statement                shift and go to state 187
    wait_statement                 shift and go to state 188
    forever_statement              shift and go to state 189
    block                          shift and go to state 190
    namedblock                     shift and go to state 191
    parallelblock                  shift and go to state 192
    blocking_substitution          shift and go to state 193
    nonblocking_substitution       shift and go to state 194
    single_statement               shift and go to state 195
    delays                         shift and go to state 197
    senslist                       shift and go to state 204
    systemcall                     shift and go to state 210
    disable                        shift and go to state 211
    empty                          shift and go to state 212

state 367

    (270) parallelblock -> FORK JOIN .

    ENDMODULE       reduce using rule 270 (parallelblock -> FORK JOIN .)
    GENERATE        reduce using rule 270 (parallelblock -> FORK JOIN .)
    INTEGER         reduce using rule 270 (parallelblock -> FORK JOIN .)
    REAL            reduce using rule 270 (parallelblock -> FORK JOIN .)
    PARAMETER       reduce using rule 270 (parallelblock -> FORK JOIN .)
    LOCALPARAM      reduce using rule 270 (parallelblock -> FORK JOIN .)
    GENVAR          reduce using rule 270 (parallelblock -> FORK JOIN .)
    ASSIGN          reduce using rule 270 (parallelblock -> FORK JOIN .)
    ALWAYS          reduce using rule 270 (parallelblock -> FORK JOIN .)
    ALWAYS_FF       reduce using rule 270 (parallelblock -> FORK JOIN .)
    ALWAYS_COMB     reduce using rule 270 (parallelblock -> FORK JOIN .)
    ALWAYS_LATCH    reduce using rule 270 (parallelblock -> FORK JOIN .)
    INITIAL         reduce using rule 270 (parallelblock -> FORK JOIN .)
    ID              reduce using rule 270 (parallelblock -> FORK JOIN .)
    SENS_OR         reduce using rule 270 (parallelblock -> FORK JOIN .)
    FUNCTION        reduce using rule 270 (parallelblock -> FORK JOIN .)
    TASK            reduce using rule 270 (parallelblock -> FORK JOIN .)
    LPAREN          reduce using rule 270 (parallelblock -> FORK JOIN .)
    INPUT           reduce using rule 270 (parallelblock -> FORK JOIN .)
    OUTPUT          reduce using rule 270 (parallelblock -> FORK JOIN .)
    INOUT           reduce using rule 270 (parallelblock -> FORK JOIN .)
    TRI             reduce using rule 270 (parallelblock -> FORK JOIN .)
    REG             reduce using rule 270 (parallelblock -> FORK JOIN .)
    LOGIC           reduce using rule 270 (parallelblock -> FORK JOIN .)
    WIRE            reduce using rule 270 (parallelblock -> FORK JOIN .)
    SIGNED          reduce using rule 270 (parallelblock -> FORK JOIN .)
    SUPPLY0         reduce using rule 270 (parallelblock -> FORK JOIN .)
    SUPPLY1         reduce using rule 270 (parallelblock -> FORK JOIN .)
    ENDGENERATE     reduce using rule 270 (parallelblock -> FORK JOIN .)
    IF              reduce using rule 270 (parallelblock -> FORK JOIN .)
    FOR             reduce using rule 270 (parallelblock -> FORK JOIN .)
    ELSE            reduce using rule 270 (parallelblock -> FORK JOIN .)
    END             reduce using rule 270 (parallelblock -> FORK JOIN .)
    CASE            reduce using rule 270 (parallelblock -> FORK JOIN .)
    CASEX           reduce using rule 270 (parallelblock -> FORK JOIN .)
    CASEZ           reduce using rule 270 (parallelblock -> FORK JOIN .)
    UNIQUE          reduce using rule 270 (parallelblock -> FORK JOIN .)
    WHILE           reduce using rule 270 (parallelblock -> FORK JOIN .)
    WAIT            reduce using rule 270 (parallelblock -> FORK JOIN .)
    FOREVER         reduce using rule 270 (parallelblock -> FORK JOIN .)
    BEGIN           reduce using rule 270 (parallelblock -> FORK JOIN .)
    FORK            reduce using rule 270 (parallelblock -> FORK JOIN .)
    DELAY           reduce using rule 270 (parallelblock -> FORK JOIN .)
    AT              reduce using rule 270 (parallelblock -> FORK JOIN .)
    DOLLER          reduce using rule 270 (parallelblock -> FORK JOIN .)
    DISABLE         reduce using rule 270 (parallelblock -> FORK JOIN .)
    LBRACE          reduce using rule 270 (parallelblock -> FORK JOIN .)
    SEMICOLON       reduce using rule 270 (parallelblock -> FORK JOIN .)
    JOIN            reduce using rule 270 (parallelblock -> FORK JOIN .)
    ENDFUNCTION     reduce using rule 270 (parallelblock -> FORK JOIN .)
    ENDTASK         reduce using rule 270 (parallelblock -> FORK JOIN .)
    ENDCASE         reduce using rule 270 (parallelblock -> FORK JOIN .)
    DEFAULT         reduce using rule 270 (parallelblock -> FORK JOIN .)
    MINUS           reduce using rule 270 (parallelblock -> FORK JOIN .)
    PLUS            reduce using rule 270 (parallelblock -> FORK JOIN .)
    LNOT            reduce using rule 270 (parallelblock -> FORK JOIN .)
    NOT             reduce using rule 270 (parallelblock -> FORK JOIN .)
    AND             reduce using rule 270 (parallelblock -> FORK JOIN .)
    NAND            reduce using rule 270 (parallelblock -> FORK JOIN .)
    NOR             reduce using rule 270 (parallelblock -> FORK JOIN .)
    OR              reduce using rule 270 (parallelblock -> FORK JOIN .)
    XOR             reduce using rule 270 (parallelblock -> FORK JOIN .)
    XNOR            reduce using rule 270 (parallelblock -> FORK JOIN .)
    INTNUMBER_DEC   reduce using rule 270 (parallelblock -> FORK JOIN .)
    SIGNED_INTNUMBER_DEC reduce using rule 270 (parallelblock -> FORK JOIN .)
    INTNUMBER_BIN   reduce using rule 270 (parallelblock -> FORK JOIN .)
    SIGNED_INTNUMBER_BIN reduce using rule 270 (parallelblock -> FORK JOIN .)
    INTNUMBER_OCT   reduce using rule 270 (parallelblock -> FORK JOIN .)
    SIGNED_INTNUMBER_OCT reduce using rule 270 (parallelblock -> FORK JOIN .)
    INTNUMBER_HEX   reduce using rule 270 (parallelblock -> FORK JOIN .)
    SIGNED_INTNUMBER_HEX reduce using rule 270 (parallelblock -> FORK JOIN .)
    FLOATNUMBER     reduce using rule 270 (parallelblock -> FORK JOIN .)
    STRING_LITERAL  reduce using rule 270 (parallelblock -> FORK JOIN .)


state 368

    (410) single_statement -> DELAY expression . SEMICOLON
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    SEMICOLON       shift and go to state 512
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 369

    (249) delays -> DELAY LPAREN . expression RPAREN
    (171) expression -> LPAREN . expression RPAREN
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 513
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 370

    (250) delays -> DELAY identifier .
    (178) expression -> identifier .
    (184) partselect -> identifier . LBRACKET expression COLON expression RBRACKET
    (185) partselect -> identifier . LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> identifier . LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> identifier . LBRACKET expression RBRACKET
    (385) functioncall -> identifier . LPAREN func_args RPAREN
    (407) scope -> identifier . DOT

    IF              reduce using rule 250 (delays -> DELAY identifier .)
    LBRACE          reduce using rule 250 (delays -> DELAY identifier .)
    ID              reduce using rule 250 (delays -> DELAY identifier .)
    SEMICOLON       reduce using rule 178 (expression -> identifier .)
    POWER           reduce using rule 178 (expression -> identifier .)
    TIMES           reduce using rule 178 (expression -> identifier .)
    DIVIDE          reduce using rule 178 (expression -> identifier .)
    MOD             reduce using rule 178 (expression -> identifier .)
    PLUS            reduce using rule 178 (expression -> identifier .)
    MINUS           reduce using rule 178 (expression -> identifier .)
    LSHIFT          reduce using rule 178 (expression -> identifier .)
    RSHIFT          reduce using rule 178 (expression -> identifier .)
    LSHIFTA         reduce using rule 178 (expression -> identifier .)
    RSHIFTA         reduce using rule 178 (expression -> identifier .)
    LT              reduce using rule 178 (expression -> identifier .)
    GT              reduce using rule 178 (expression -> identifier .)
    LE              reduce using rule 178 (expression -> identifier .)
    GE              reduce using rule 178 (expression -> identifier .)
    EQ              reduce using rule 178 (expression -> identifier .)
    NE              reduce using rule 178 (expression -> identifier .)
    EQL             reduce using rule 178 (expression -> identifier .)
    NEL             reduce using rule 178 (expression -> identifier .)
    AND             reduce using rule 178 (expression -> identifier .)
    XOR             reduce using rule 178 (expression -> identifier .)
    XNOR            reduce using rule 178 (expression -> identifier .)
    OR              reduce using rule 178 (expression -> identifier .)
    LAND            reduce using rule 178 (expression -> identifier .)
    LOR             reduce using rule 178 (expression -> identifier .)
    COND            reduce using rule 178 (expression -> identifier .)
    LBRACKET        shift and go to state 278
    LPAREN          shift and go to state 279
    DOT             shift and go to state 280


state 371

    (251) delays -> DELAY intnumber .
    (192) const_expression -> intnumber .

    IF              reduce using rule 251 (delays -> DELAY intnumber .)
    LBRACE          reduce using rule 251 (delays -> DELAY intnumber .)
    ID              reduce using rule 251 (delays -> DELAY intnumber .)
    SEMICOLON       reduce using rule 192 (const_expression -> intnumber .)
    POWER           reduce using rule 192 (const_expression -> intnumber .)
    TIMES           reduce using rule 192 (const_expression -> intnumber .)
    DIVIDE          reduce using rule 192 (const_expression -> intnumber .)
    MOD             reduce using rule 192 (const_expression -> intnumber .)
    PLUS            reduce using rule 192 (const_expression -> intnumber .)
    MINUS           reduce using rule 192 (const_expression -> intnumber .)
    LSHIFT          reduce using rule 192 (const_expression -> intnumber .)
    RSHIFT          reduce using rule 192 (const_expression -> intnumber .)
    LSHIFTA         reduce using rule 192 (const_expression -> intnumber .)
    RSHIFTA         reduce using rule 192 (const_expression -> intnumber .)
    LT              reduce using rule 192 (const_expression -> intnumber .)
    GT              reduce using rule 192 (const_expression -> intnumber .)
    LE              reduce using rule 192 (const_expression -> intnumber .)
    GE              reduce using rule 192 (const_expression -> intnumber .)
    EQ              reduce using rule 192 (const_expression -> intnumber .)
    NE              reduce using rule 192 (const_expression -> intnumber .)
    EQL             reduce using rule 192 (const_expression -> intnumber .)
    NEL             reduce using rule 192 (const_expression -> intnumber .)
    AND             reduce using rule 192 (const_expression -> intnumber .)
    XOR             reduce using rule 192 (const_expression -> intnumber .)
    XNOR            reduce using rule 192 (const_expression -> intnumber .)
    OR              reduce using rule 192 (const_expression -> intnumber .)
    LAND            reduce using rule 192 (const_expression -> intnumber .)
    LOR             reduce using rule 192 (const_expression -> intnumber .)
    COND            reduce using rule 192 (const_expression -> intnumber .)


state 372

    (252) delays -> DELAY floatnumber .
    (193) const_expression -> floatnumber .

    IF              reduce using rule 252 (delays -> DELAY floatnumber .)
    LBRACE          reduce using rule 252 (delays -> DELAY floatnumber .)
    ID              reduce using rule 252 (delays -> DELAY floatnumber .)
    SEMICOLON       reduce using rule 193 (const_expression -> floatnumber .)
    POWER           reduce using rule 193 (const_expression -> floatnumber .)
    TIMES           reduce using rule 193 (const_expression -> floatnumber .)
    DIVIDE          reduce using rule 193 (const_expression -> floatnumber .)
    MOD             reduce using rule 193 (const_expression -> floatnumber .)
    PLUS            reduce using rule 193 (const_expression -> floatnumber .)
    MINUS           reduce using rule 193 (const_expression -> floatnumber .)
    LSHIFT          reduce using rule 193 (const_expression -> floatnumber .)
    RSHIFT          reduce using rule 193 (const_expression -> floatnumber .)
    LSHIFTA         reduce using rule 193 (const_expression -> floatnumber .)
    RSHIFTA         reduce using rule 193 (const_expression -> floatnumber .)
    LT              reduce using rule 193 (const_expression -> floatnumber .)
    GT              reduce using rule 193 (const_expression -> floatnumber .)
    LE              reduce using rule 193 (const_expression -> floatnumber .)
    GE              reduce using rule 193 (const_expression -> floatnumber .)
    EQ              reduce using rule 193 (const_expression -> floatnumber .)
    NE              reduce using rule 193 (const_expression -> floatnumber .)
    EQL             reduce using rule 193 (const_expression -> floatnumber .)
    NEL             reduce using rule 193 (const_expression -> floatnumber .)
    AND             reduce using rule 193 (const_expression -> floatnumber .)
    XOR             reduce using rule 193 (const_expression -> floatnumber .)
    XNOR            reduce using rule 193 (const_expression -> floatnumber .)
    OR              reduce using rule 193 (const_expression -> floatnumber .)
    LAND            reduce using rule 193 (const_expression -> floatnumber .)
    LOR             reduce using rule 193 (const_expression -> floatnumber .)
    COND            reduce using rule 193 (const_expression -> floatnumber .)


state 373

    (411) single_statement -> systemcall SEMICOLON .

    ENDMODULE       reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    GENERATE        reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    INTEGER         reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    REAL            reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    PARAMETER       reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    LOCALPARAM      reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    GENVAR          reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    ASSIGN          reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    ALWAYS          reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    ALWAYS_FF       reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    ALWAYS_COMB     reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    INITIAL         reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    ID              reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    SENS_OR         reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    FUNCTION        reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    TASK            reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    LPAREN          reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    INPUT           reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    OUTPUT          reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    INOUT           reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    TRI             reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    REG             reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    LOGIC           reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    WIRE            reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    SIGNED          reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    SUPPLY0         reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    SUPPLY1         reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    ENDGENERATE     reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    IF              reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    FOR             reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    ELSE            reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    END             reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    CASE            reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    CASEX           reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    CASEZ           reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    UNIQUE          reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    WHILE           reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    WAIT            reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    FOREVER         reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    BEGIN           reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    FORK            reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    DELAY           reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    AT              reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    DOLLER          reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    DISABLE         reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    LBRACE          reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    SEMICOLON       reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    JOIN            reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    ENDFUNCTION     reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    ENDTASK         reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    ENDCASE         reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    DEFAULT         reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    MINUS           reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    PLUS            reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    LNOT            reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    NOT             reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    AND             reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    NAND            reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    NOR             reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    OR              reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    XOR             reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    XNOR            reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    INTNUMBER_DEC   reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    SIGNED_INTNUMBER_DEC reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    INTNUMBER_BIN   reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    SIGNED_INTNUMBER_BIN reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    INTNUMBER_OCT   reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    SIGNED_INTNUMBER_OCT reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    INTNUMBER_HEX   reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    SIGNED_INTNUMBER_HEX reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    FLOATNUMBER     reduce using rule 411 (single_statement -> systemcall SEMICOLON .)
    STRING_LITERAL  reduce using rule 411 (single_statement -> systemcall SEMICOLON .)


state 374

    (412) single_statement -> disable SEMICOLON .

    ENDMODULE       reduce using rule 412 (single_statement -> disable SEMICOLON .)
    GENERATE        reduce using rule 412 (single_statement -> disable SEMICOLON .)
    INTEGER         reduce using rule 412 (single_statement -> disable SEMICOLON .)
    REAL            reduce using rule 412 (single_statement -> disable SEMICOLON .)
    PARAMETER       reduce using rule 412 (single_statement -> disable SEMICOLON .)
    LOCALPARAM      reduce using rule 412 (single_statement -> disable SEMICOLON .)
    GENVAR          reduce using rule 412 (single_statement -> disable SEMICOLON .)
    ASSIGN          reduce using rule 412 (single_statement -> disable SEMICOLON .)
    ALWAYS          reduce using rule 412 (single_statement -> disable SEMICOLON .)
    ALWAYS_FF       reduce using rule 412 (single_statement -> disable SEMICOLON .)
    ALWAYS_COMB     reduce using rule 412 (single_statement -> disable SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 412 (single_statement -> disable SEMICOLON .)
    INITIAL         reduce using rule 412 (single_statement -> disable SEMICOLON .)
    ID              reduce using rule 412 (single_statement -> disable SEMICOLON .)
    SENS_OR         reduce using rule 412 (single_statement -> disable SEMICOLON .)
    FUNCTION        reduce using rule 412 (single_statement -> disable SEMICOLON .)
    TASK            reduce using rule 412 (single_statement -> disable SEMICOLON .)
    LPAREN          reduce using rule 412 (single_statement -> disable SEMICOLON .)
    INPUT           reduce using rule 412 (single_statement -> disable SEMICOLON .)
    OUTPUT          reduce using rule 412 (single_statement -> disable SEMICOLON .)
    INOUT           reduce using rule 412 (single_statement -> disable SEMICOLON .)
    TRI             reduce using rule 412 (single_statement -> disable SEMICOLON .)
    REG             reduce using rule 412 (single_statement -> disable SEMICOLON .)
    LOGIC           reduce using rule 412 (single_statement -> disable SEMICOLON .)
    WIRE            reduce using rule 412 (single_statement -> disable SEMICOLON .)
    SIGNED          reduce using rule 412 (single_statement -> disable SEMICOLON .)
    SUPPLY0         reduce using rule 412 (single_statement -> disable SEMICOLON .)
    SUPPLY1         reduce using rule 412 (single_statement -> disable SEMICOLON .)
    ENDGENERATE     reduce using rule 412 (single_statement -> disable SEMICOLON .)
    IF              reduce using rule 412 (single_statement -> disable SEMICOLON .)
    FOR             reduce using rule 412 (single_statement -> disable SEMICOLON .)
    ELSE            reduce using rule 412 (single_statement -> disable SEMICOLON .)
    END             reduce using rule 412 (single_statement -> disable SEMICOLON .)
    CASE            reduce using rule 412 (single_statement -> disable SEMICOLON .)
    CASEX           reduce using rule 412 (single_statement -> disable SEMICOLON .)
    CASEZ           reduce using rule 412 (single_statement -> disable SEMICOLON .)
    UNIQUE          reduce using rule 412 (single_statement -> disable SEMICOLON .)
    WHILE           reduce using rule 412 (single_statement -> disable SEMICOLON .)
    WAIT            reduce using rule 412 (single_statement -> disable SEMICOLON .)
    FOREVER         reduce using rule 412 (single_statement -> disable SEMICOLON .)
    BEGIN           reduce using rule 412 (single_statement -> disable SEMICOLON .)
    FORK            reduce using rule 412 (single_statement -> disable SEMICOLON .)
    DELAY           reduce using rule 412 (single_statement -> disable SEMICOLON .)
    AT              reduce using rule 412 (single_statement -> disable SEMICOLON .)
    DOLLER          reduce using rule 412 (single_statement -> disable SEMICOLON .)
    DISABLE         reduce using rule 412 (single_statement -> disable SEMICOLON .)
    LBRACE          reduce using rule 412 (single_statement -> disable SEMICOLON .)
    SEMICOLON       reduce using rule 412 (single_statement -> disable SEMICOLON .)
    JOIN            reduce using rule 412 (single_statement -> disable SEMICOLON .)
    ENDFUNCTION     reduce using rule 412 (single_statement -> disable SEMICOLON .)
    ENDTASK         reduce using rule 412 (single_statement -> disable SEMICOLON .)
    ENDCASE         reduce using rule 412 (single_statement -> disable SEMICOLON .)
    DEFAULT         reduce using rule 412 (single_statement -> disable SEMICOLON .)
    MINUS           reduce using rule 412 (single_statement -> disable SEMICOLON .)
    PLUS            reduce using rule 412 (single_statement -> disable SEMICOLON .)
    LNOT            reduce using rule 412 (single_statement -> disable SEMICOLON .)
    NOT             reduce using rule 412 (single_statement -> disable SEMICOLON .)
    AND             reduce using rule 412 (single_statement -> disable SEMICOLON .)
    NAND            reduce using rule 412 (single_statement -> disable SEMICOLON .)
    NOR             reduce using rule 412 (single_statement -> disable SEMICOLON .)
    OR              reduce using rule 412 (single_statement -> disable SEMICOLON .)
    XOR             reduce using rule 412 (single_statement -> disable SEMICOLON .)
    XNOR            reduce using rule 412 (single_statement -> disable SEMICOLON .)
    INTNUMBER_DEC   reduce using rule 412 (single_statement -> disable SEMICOLON .)
    SIGNED_INTNUMBER_DEC reduce using rule 412 (single_statement -> disable SEMICOLON .)
    INTNUMBER_BIN   reduce using rule 412 (single_statement -> disable SEMICOLON .)
    SIGNED_INTNUMBER_BIN reduce using rule 412 (single_statement -> disable SEMICOLON .)
    INTNUMBER_OCT   reduce using rule 412 (single_statement -> disable SEMICOLON .)
    SIGNED_INTNUMBER_OCT reduce using rule 412 (single_statement -> disable SEMICOLON .)
    INTNUMBER_HEX   reduce using rule 412 (single_statement -> disable SEMICOLON .)
    SIGNED_INTNUMBER_HEX reduce using rule 412 (single_statement -> disable SEMICOLON .)
    FLOATNUMBER     reduce using rule 412 (single_statement -> disable SEMICOLON .)
    STRING_LITERAL  reduce using rule 412 (single_statement -> disable SEMICOLON .)


state 375

    (409) disable -> DISABLE ID .

    SEMICOLON       reduce using rule 409 (disable -> DISABLE ID .)


state 376

    (311) instance_body -> ID . LPAREN instance_ports RPAREN
    (312) instance_body -> ID . width LPAREN instance_ports RPAREN
    (56) width -> . LBRACKET expression COLON expression RBRACKET

    LPAREN          shift and go to state 514
    LBRACKET        shift and go to state 139

    width                          shift and go to state 515

state 377

    (307) instance -> ID parameterlist instance_bodylist . SEMICOLON
    (309) instance_bodylist -> instance_bodylist . COMMA instance_body

    SEMICOLON       shift and go to state 516
    COMMA           shift and go to state 517


state 378

    (310) instance_bodylist -> instance_body .

    SEMICOLON       reduce using rule 310 (instance_bodylist -> instance_body .)
    COMMA           reduce using rule 310 (instance_bodylist -> instance_body .)


state 379

    (313) instance -> ID instance_bodylist_noname SEMICOLON .

    ENDMODULE       reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    GENERATE        reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    INTEGER         reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    REAL            reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    PARAMETER       reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    LOCALPARAM      reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    GENVAR          reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    ASSIGN          reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    ALWAYS          reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    ALWAYS_FF       reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    ALWAYS_COMB     reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    INITIAL         reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    ID              reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    SENS_OR         reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    FUNCTION        reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    TASK            reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    LPAREN          reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    INPUT           reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    OUTPUT          reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    INOUT           reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    TRI             reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    REG             reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    LOGIC           reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    WIRE            reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    SIGNED          reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    SUPPLY0         reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    SUPPLY1         reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    ENDGENERATE     reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    IF              reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    FOR             reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    ELSE            reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)
    END             reduce using rule 313 (instance -> ID instance_bodylist_noname SEMICOLON .)


state 380

    (315) instance_bodylist_noname -> instance_bodylist_noname COMMA . instance_body_noname
    (317) instance_body_noname -> . LPAREN instance_ports RPAREN

    LPAREN          shift and go to state 217

    instance_body_noname           shift and go to state 518

state 381

    (318) parameterlist -> DELAY LPAREN . param_args RPAREN
    (319) parameterlist -> DELAY LPAREN . param_args_noname RPAREN
    (323) param_args -> . param_args COMMA param_arg
    (324) param_args -> . param_arg
    (325) param_args -> . empty
    (321) param_args_noname -> . param_args_noname COMMA param_arg_noname
    (322) param_args_noname -> . param_arg_noname
    (327) param_arg -> . DOT ID LPAREN expression RPAREN
    (413) empty -> .
    (326) param_arg_noname -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    DOT             shift and go to state 524
    RPAREN          reduce using rule 413 (empty -> .)
    COMMA           reduce using rule 413 (empty -> .)
    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    param_args                     shift and go to state 519
    param_args_noname              shift and go to state 520
    param_arg                      shift and go to state 521
    empty                          shift and go to state 522
    param_arg_noname               shift and go to state 523
    expression                     shift and go to state 525
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 382

    (317) instance_body_noname -> LPAREN instance_ports . RPAREN

    RPAREN          shift and go to state 526


state 383

    (328) instance_ports -> instance_ports_list .
    (330) instance_ports_list -> instance_ports_list . COMMA instance_port_list

    RPAREN          reduce using rule 328 (instance_ports -> instance_ports_list .)
    COMMA           shift and go to state 527


state 384

    (329) instance_ports -> instance_ports_arg .
    (334) instance_ports_arg -> instance_ports_arg . COMMA instance_port_arg

    RPAREN          reduce using rule 329 (instance_ports -> instance_ports_arg .)
    COMMA           shift and go to state 528


state 385

    (331) instance_ports_list -> instance_port_list .

    COMMA           reduce using rule 331 (instance_ports_list -> instance_port_list .)
    RPAREN          reduce using rule 331 (instance_ports_list -> instance_port_list .)


state 386

    (332) instance_ports_list -> empty .

    COMMA           reduce using rule 332 (instance_ports_list -> empty .)
    RPAREN          reduce using rule 332 (instance_ports_list -> empty .)


state 387

    (335) instance_ports_arg -> instance_port_arg .

    COMMA           reduce using rule 335 (instance_ports_arg -> instance_port_arg .)
    RPAREN          reduce using rule 335 (instance_ports_arg -> instance_port_arg .)


state 388

    (333) instance_port_list -> expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    COMMA           reduce using rule 333 (instance_port_list -> expression .)
    RPAREN          reduce using rule 333 (instance_port_list -> expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 389

    (336) instance_port_arg -> DOT . ID LPAREN identifier RPAREN
    (337) instance_port_arg -> DOT . ID LPAREN expression RPAREN
    (338) instance_port_arg -> DOT . ID LPAREN RPAREN

    ID              shift and go to state 529


state 390

    (308) instance -> SENS_OR parameterlist instance_bodylist . SEMICOLON
    (309) instance_bodylist -> instance_bodylist . COMMA instance_body

    SEMICOLON       shift and go to state 530
    COMMA           shift and go to state 517


state 391

    (314) instance -> SENS_OR instance_bodylist_noname SEMICOLON .

    ENDMODULE       reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    GENERATE        reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    INTEGER         reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    REAL            reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    PARAMETER       reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    LOCALPARAM      reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    GENVAR          reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    ASSIGN          reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    ALWAYS          reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    ALWAYS_FF       reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    ALWAYS_COMB     reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    INITIAL         reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    ID              reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    SENS_OR         reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    FUNCTION        reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    TASK            reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    LPAREN          reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    INPUT           reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    OUTPUT          reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    INOUT           reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    TRI             reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    REG             reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    LOGIC           reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    WIRE            reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    SIGNED          reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    SUPPLY0         reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    SUPPLY1         reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    ENDGENERATE     reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    IF              reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    FOR             reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    ELSE            reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    END             reduce using rule 314 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)


state 392

    (368) function -> FUNCTION width ID . SEMICOLON function_statement ENDFUNCTION

    SEMICOLON       shift and go to state 531


state 393

    (369) function -> FUNCTION ID SEMICOLON . function_statement ENDFUNCTION
    (371) function_statement -> . funcvardecls function_calc
    (372) funcvardecls -> . funcvardecls funcvardecl
    (373) funcvardecls -> . funcvardecl
    (374) funcvardecl -> . decl
    (375) funcvardecl -> . integerdecl
    (82) decl -> . sigtypes declnamelist SEMICOLON
    (83) decl -> . sigtypes width declnamelist SEMICOLON
    (92) integerdecl -> . INTEGER integernamelist SEMICOLON
    (93) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

    INTEGER         shift and go to state 48
    INPUT           shift and go to state 65
    OUTPUT          shift and go to state 66
    INOUT           shift and go to state 67
    TRI             shift and go to state 68
    REG             shift and go to state 69
    LOGIC           shift and go to state 70
    WIRE            shift and go to state 71
    SIGNED          shift and go to state 49
    SUPPLY0         shift and go to state 72
    SUPPLY1         shift and go to state 73

    function_statement             shift and go to state 532
    funcvardecls                   shift and go to state 533
    funcvardecl                    shift and go to state 534
    decl                           shift and go to state 535
    integerdecl                    shift and go to state 536
    sigtypes                       shift and go to state 537
    sigtype                        shift and go to state 64

state 394

    (370) function -> FUNCTION INTEGER ID . SEMICOLON function_statement ENDFUNCTION

    SEMICOLON       shift and go to state 538


state 395

    (389) task -> TASK ID SEMICOLON . task_statement ENDTASK
    (390) task_statement -> . taskvardecls task_calc
    (391) taskvardecls -> . taskvardecls taskvardecl
    (392) taskvardecls -> . taskvardecl
    (393) taskvardecls -> . empty
    (394) taskvardecl -> . decl
    (395) taskvardecl -> . integerdecl
    (413) empty -> .
    (82) decl -> . sigtypes declnamelist SEMICOLON
    (83) decl -> . sigtypes width declnamelist SEMICOLON
    (92) integerdecl -> . INTEGER integernamelist SEMICOLON
    (93) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for INOUT resolved as shift
  ! shift/reduce conflict for TRI resolved as shift
  ! shift/reduce conflict for REG resolved as shift
  ! shift/reduce conflict for LOGIC resolved as shift
  ! shift/reduce conflict for WIRE resolved as shift
  ! shift/reduce conflict for SIGNED resolved as shift
  ! shift/reduce conflict for SUPPLY0 resolved as shift
  ! shift/reduce conflict for SUPPLY1 resolved as shift
    IF              reduce using rule 413 (empty -> .)
    FOR             reduce using rule 413 (empty -> .)
    WHILE           reduce using rule 413 (empty -> .)
    CASE            reduce using rule 413 (empty -> .)
    CASEX           reduce using rule 413 (empty -> .)
    CASEZ           reduce using rule 413 (empty -> .)
    BEGIN           reduce using rule 413 (empty -> .)
    DELAY           reduce using rule 413 (empty -> .)
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    INTEGER         shift and go to state 48
    INPUT           shift and go to state 65
    OUTPUT          shift and go to state 66
    INOUT           shift and go to state 67
    TRI             shift and go to state 68
    REG             shift and go to state 69
    LOGIC           shift and go to state 70
    WIRE            shift and go to state 71
    SIGNED          shift and go to state 49
    SUPPLY0         shift and go to state 72
    SUPPLY1         shift and go to state 73

  ! INTEGER         [ reduce using rule 413 (empty -> .) ]
  ! INPUT           [ reduce using rule 413 (empty -> .) ]
  ! OUTPUT          [ reduce using rule 413 (empty -> .) ]
  ! INOUT           [ reduce using rule 413 (empty -> .) ]
  ! TRI             [ reduce using rule 413 (empty -> .) ]
  ! REG             [ reduce using rule 413 (empty -> .) ]
  ! LOGIC           [ reduce using rule 413 (empty -> .) ]
  ! WIRE            [ reduce using rule 413 (empty -> .) ]
  ! SIGNED          [ reduce using rule 413 (empty -> .) ]
  ! SUPPLY0         [ reduce using rule 413 (empty -> .) ]
  ! SUPPLY1         [ reduce using rule 413 (empty -> .) ]

    task_statement                 shift and go to state 539
    taskvardecls                   shift and go to state 540
    taskvardecl                    shift and go to state 541
    empty                          shift and go to state 542
    decl                           shift and go to state 543
    integerdecl                    shift and go to state 544
    sigtypes                       shift and go to state 537
    sigtype                        shift and go to state 64

state 396

    (28) portlist -> LPAREN ports RPAREN SEMICOLON .

    GENERATE        reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    INTEGER         reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    REAL            reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    PARAMETER       reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    LOCALPARAM      reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    GENVAR          reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    ASSIGN          reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    ALWAYS          reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    ALWAYS_FF       reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    ALWAYS_COMB     reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    INITIAL         reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    ID              reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    SENS_OR         reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    TASK            reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    LPAREN          reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    INPUT           reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    OUTPUT          reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    INOUT           reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    TRI             reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    REG             reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    LOGIC           reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    WIRE            reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    SIGNED          reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    SUPPLY0         reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    SUPPLY1         reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    ENDMODULE       reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)


state 397

    (32) ports -> ports COMMA portname .

    RPAREN          reduce using rule 32 (ports -> ports COMMA portname .)
    COMMA           reduce using rule 32 (ports -> ports COMMA portname .)


state 398

    (29) portlist -> LPAREN ioports RPAREN SEMICOLON .

    GENERATE        reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    INTEGER         reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    REAL            reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    PARAMETER       reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    LOCALPARAM      reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    GENVAR          reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    ASSIGN          reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    ALWAYS          reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    ALWAYS_FF       reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    ALWAYS_COMB     reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    INITIAL         reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    ID              reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    SENS_OR         reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    TASK            reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    LPAREN          reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    INPUT           reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    OUTPUT          reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    INOUT           reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    TRI             reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    REG             reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    LOGIC           reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    WIRE            reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    SIGNED          reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    SUPPLY0         reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    SUPPLY1         reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    ENDMODULE       reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)


state 399

    (47) ioports -> ioports COMMA ioport .

    RPAREN          reduce using rule 47 (ioports -> ioports COMMA ioport .)
    COMMA           reduce using rule 47 (ioports -> ioports COMMA ioport .)


state 400

    (49) ioport -> sigtypes . portname
    (50) ioport -> sigtypes . width portname
    (51) ioport -> sigtypes . width portname dimensions
    (35) sigtypes -> sigtypes . sigtype
    (34) portname -> . ID
    (56) width -> . LBRACKET expression COLON expression RBRACKET
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

    ID              shift and go to state 79
    LBRACKET        shift and go to state 139
    INPUT           shift and go to state 65
    OUTPUT          shift and go to state 66
    INOUT           shift and go to state 67
    TRI             shift and go to state 68
    REG             shift and go to state 69
    LOGIC           shift and go to state 70
    WIRE            shift and go to state 71
    SIGNED          shift and go to state 49
    SUPPLY0         shift and go to state 72
    SUPPLY1         shift and go to state 73

    portname                       shift and go to state 545
    width                          shift and go to state 546
    sigtype                        shift and go to state 137

state 401

    (55) ioport -> portname .

    RPAREN          reduce using rule 55 (ioport -> portname .)
    COMMA           reduce using rule 55 (ioport -> portname .)


state 402

    (53) ioport_head -> sigtypes width portname .
    (54) ioport_head -> sigtypes width portname . dimensions
    (58) dimensions -> . dimensions length
    (59) dimensions -> . length
    (57) length -> . LBRACKET expression COLON expression RBRACKET

    RPAREN          reduce using rule 53 (ioport_head -> sigtypes width portname .)
    COMMA           reduce using rule 53 (ioport_head -> sigtypes width portname .)
    LBRACKET        shift and go to state 299

    dimensions                     shift and go to state 547
    length                         shift and go to state 298

state 403

    (18) param -> PARAMETER param_substitution_list COMMA .
    (112) param_substitution_list -> param_substitution_list COMMA . param_substitution
    (114) param_substitution -> . ID EQUALS rvalue

    PARAMETER       reduce using rule 18 (param -> PARAMETER param_substitution_list COMMA .)
    ID              shift and go to state 156

    param_substitution             shift and go to state 470

state 404

    (24) param_end -> PARAMETER SIGNED param_substitution_list .
    (19) param -> PARAMETER SIGNED param_substitution_list . COMMA
    (112) param_substitution_list -> param_substitution_list . COMMA param_substitution

    RPAREN          reduce using rule 24 (param_end -> PARAMETER SIGNED param_substitution_list .)
    COMMA           shift and go to state 548


state 405

    (26) param_end -> PARAMETER SIGNED width . param_substitution_list
    (21) param -> PARAMETER SIGNED width . param_substitution_list COMMA
    (112) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (113) param_substitution_list -> . param_substitution
    (114) param_substitution -> . ID EQUALS rvalue

    ID              shift and go to state 156

    param_substitution_list        shift and go to state 549
    param_substitution             shift and go to state 155

state 406

    (25) param_end -> PARAMETER width param_substitution_list .
    (20) param -> PARAMETER width param_substitution_list . COMMA
    (112) param_substitution_list -> param_substitution_list . COMMA param_substitution

    RPAREN          reduce using rule 25 (param_end -> PARAMETER width param_substitution_list .)
    COMMA           shift and go to state 550


state 407

    (27) param_end -> PARAMETER INTEGER param_substitution_list .
    (22) param -> PARAMETER INTEGER param_substitution_list . COMMA
    (112) param_substitution_list -> param_substitution_list . COMMA param_substitution

    RPAREN          reduce using rule 27 (param_end -> PARAMETER INTEGER param_substitution_list .)
    COMMA           shift and go to state 551


state 408

    (171) expression -> LPAREN expression RPAREN .

    TIMES           reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    LSHIFTA         reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    RSHIFTA         reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    EQL             reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    NEL             reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    XNOR            reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    COND            reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    PLUSCOLON       reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    MINUSCOLON      reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 171 (expression -> LPAREN expression RPAREN .)


state 409

    (147) expression -> expression TIMES . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 410
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 410

    (147) expression -> expression TIMES expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 147 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 147 (expression -> expression TIMES expression .)
    MOD             reduce using rule 147 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 147 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 147 (expression -> expression TIMES expression .)
    LSHIFT          reduce using rule 147 (expression -> expression TIMES expression .)
    RSHIFT          reduce using rule 147 (expression -> expression TIMES expression .)
    LSHIFTA         reduce using rule 147 (expression -> expression TIMES expression .)
    RSHIFTA         reduce using rule 147 (expression -> expression TIMES expression .)
    LT              reduce using rule 147 (expression -> expression TIMES expression .)
    GT              reduce using rule 147 (expression -> expression TIMES expression .)
    LE              reduce using rule 147 (expression -> expression TIMES expression .)
    GE              reduce using rule 147 (expression -> expression TIMES expression .)
    EQ              reduce using rule 147 (expression -> expression TIMES expression .)
    NE              reduce using rule 147 (expression -> expression TIMES expression .)
    EQL             reduce using rule 147 (expression -> expression TIMES expression .)
    NEL             reduce using rule 147 (expression -> expression TIMES expression .)
    AND             reduce using rule 147 (expression -> expression TIMES expression .)
    XOR             reduce using rule 147 (expression -> expression TIMES expression .)
    XNOR            reduce using rule 147 (expression -> expression TIMES expression .)
    OR              reduce using rule 147 (expression -> expression TIMES expression .)
    LAND            reduce using rule 147 (expression -> expression TIMES expression .)
    LOR             reduce using rule 147 (expression -> expression TIMES expression .)
    COND            reduce using rule 147 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 147 (expression -> expression TIMES expression .)
    LBRACE          reduce using rule 147 (expression -> expression TIMES expression .)
    RBRACE          reduce using rule 147 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 147 (expression -> expression TIMES expression .)
    COLON           reduce using rule 147 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 147 (expression -> expression TIMES expression .)
    PLUSCOLON       reduce using rule 147 (expression -> expression TIMES expression .)
    MINUSCOLON      reduce using rule 147 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 147 (expression -> expression TIMES expression .)
    POWER           shift and go to state 242

  ! POWER           [ reduce using rule 147 (expression -> expression TIMES expression .) ]
  ! TIMES           [ shift and go to state 409 ]
  ! DIVIDE          [ shift and go to state 243 ]
  ! MOD             [ shift and go to state 244 ]
  ! PLUS            [ shift and go to state 245 ]
  ! MINUS           [ shift and go to state 246 ]
  ! LSHIFT          [ shift and go to state 247 ]
  ! RSHIFT          [ shift and go to state 248 ]
  ! LSHIFTA         [ shift and go to state 249 ]
  ! RSHIFTA         [ shift and go to state 250 ]
  ! LT              [ shift and go to state 251 ]
  ! GT              [ shift and go to state 252 ]
  ! LE              [ shift and go to state 253 ]
  ! GE              [ shift and go to state 254 ]
  ! EQ              [ shift and go to state 255 ]
  ! NE              [ shift and go to state 256 ]
  ! EQL             [ shift and go to state 257 ]
  ! NEL             [ shift and go to state 258 ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 411

    (7) pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .

    MODULE          reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    LPAREN          reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    $end            reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    ENDMODULE       reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    GENERATE        reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    INTEGER         reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    REAL            reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    PARAMETER       reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    LOCALPARAM      reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    GENVAR          reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    ASSIGN          reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    ALWAYS          reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    ALWAYS_FF       reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    ALWAYS_COMB     reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    ALWAYS_LATCH    reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    INITIAL         reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    ID              reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    SENS_OR         reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    FUNCTION        reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    TASK            reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    INPUT           reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    OUTPUT          reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    INOUT           reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    TRI             reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    REG             reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    LOGIC           reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    WIRE            reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    SIGNED          reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    SUPPLY0         reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    SUPPLY1         reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    ENDGENERATE     reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    IF              reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    FOR             reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    ELSE            reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    END             reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)


state 412

    (146) expression -> expression POWER expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 146 (expression -> expression POWER expression .)
    POWER           reduce using rule 146 (expression -> expression POWER expression .)
    DIVIDE          reduce using rule 146 (expression -> expression POWER expression .)
    MOD             reduce using rule 146 (expression -> expression POWER expression .)
    PLUS            reduce using rule 146 (expression -> expression POWER expression .)
    MINUS           reduce using rule 146 (expression -> expression POWER expression .)
    LSHIFT          reduce using rule 146 (expression -> expression POWER expression .)
    RSHIFT          reduce using rule 146 (expression -> expression POWER expression .)
    LSHIFTA         reduce using rule 146 (expression -> expression POWER expression .)
    RSHIFTA         reduce using rule 146 (expression -> expression POWER expression .)
    LT              reduce using rule 146 (expression -> expression POWER expression .)
    GT              reduce using rule 146 (expression -> expression POWER expression .)
    LE              reduce using rule 146 (expression -> expression POWER expression .)
    GE              reduce using rule 146 (expression -> expression POWER expression .)
    EQ              reduce using rule 146 (expression -> expression POWER expression .)
    NE              reduce using rule 146 (expression -> expression POWER expression .)
    EQL             reduce using rule 146 (expression -> expression POWER expression .)
    NEL             reduce using rule 146 (expression -> expression POWER expression .)
    AND             reduce using rule 146 (expression -> expression POWER expression .)
    XOR             reduce using rule 146 (expression -> expression POWER expression .)
    XNOR            reduce using rule 146 (expression -> expression POWER expression .)
    OR              reduce using rule 146 (expression -> expression POWER expression .)
    LAND            reduce using rule 146 (expression -> expression POWER expression .)
    LOR             reduce using rule 146 (expression -> expression POWER expression .)
    COND            reduce using rule 146 (expression -> expression POWER expression .)
    RPAREN          reduce using rule 146 (expression -> expression POWER expression .)
    LBRACE          reduce using rule 146 (expression -> expression POWER expression .)
    RBRACE          reduce using rule 146 (expression -> expression POWER expression .)
    COMMA           reduce using rule 146 (expression -> expression POWER expression .)
    COLON           reduce using rule 146 (expression -> expression POWER expression .)
    SEMICOLON       reduce using rule 146 (expression -> expression POWER expression .)
    PLUSCOLON       reduce using rule 146 (expression -> expression POWER expression .)
    MINUSCOLON      reduce using rule 146 (expression -> expression POWER expression .)
    RBRACKET        reduce using rule 146 (expression -> expression POWER expression .)

  ! POWER           [ shift and go to state 242 ]
  ! TIMES           [ shift and go to state 409 ]
  ! DIVIDE          [ shift and go to state 243 ]
  ! MOD             [ shift and go to state 244 ]
  ! PLUS            [ shift and go to state 245 ]
  ! MINUS           [ shift and go to state 246 ]
  ! LSHIFT          [ shift and go to state 247 ]
  ! RSHIFT          [ shift and go to state 248 ]
  ! LSHIFTA         [ shift and go to state 249 ]
  ! RSHIFTA         [ shift and go to state 250 ]
  ! LT              [ shift and go to state 251 ]
  ! GT              [ shift and go to state 252 ]
  ! LE              [ shift and go to state 253 ]
  ! GE              [ shift and go to state 254 ]
  ! EQ              [ shift and go to state 255 ]
  ! NE              [ shift and go to state 256 ]
  ! EQL             [ shift and go to state 257 ]
  ! NEL             [ shift and go to state 258 ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 413

    (148) expression -> expression DIVIDE expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 148 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 148 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 148 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 148 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 148 (expression -> expression DIVIDE expression .)
    LSHIFT          reduce using rule 148 (expression -> expression DIVIDE expression .)
    RSHIFT          reduce using rule 148 (expression -> expression DIVIDE expression .)
    LSHIFTA         reduce using rule 148 (expression -> expression DIVIDE expression .)
    RSHIFTA         reduce using rule 148 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 148 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 148 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 148 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 148 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 148 (expression -> expression DIVIDE expression .)
    NE              reduce using rule 148 (expression -> expression DIVIDE expression .)
    EQL             reduce using rule 148 (expression -> expression DIVIDE expression .)
    NEL             reduce using rule 148 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 148 (expression -> expression DIVIDE expression .)
    XOR             reduce using rule 148 (expression -> expression DIVIDE expression .)
    XNOR            reduce using rule 148 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 148 (expression -> expression DIVIDE expression .)
    LAND            reduce using rule 148 (expression -> expression DIVIDE expression .)
    LOR             reduce using rule 148 (expression -> expression DIVIDE expression .)
    COND            reduce using rule 148 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 148 (expression -> expression DIVIDE expression .)
    LBRACE          reduce using rule 148 (expression -> expression DIVIDE expression .)
    RBRACE          reduce using rule 148 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 148 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 148 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 148 (expression -> expression DIVIDE expression .)
    PLUSCOLON       reduce using rule 148 (expression -> expression DIVIDE expression .)
    MINUSCOLON      reduce using rule 148 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 148 (expression -> expression DIVIDE expression .)
    POWER           shift and go to state 242

  ! POWER           [ reduce using rule 148 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ shift and go to state 409 ]
  ! DIVIDE          [ shift and go to state 243 ]
  ! MOD             [ shift and go to state 244 ]
  ! PLUS            [ shift and go to state 245 ]
  ! MINUS           [ shift and go to state 246 ]
  ! LSHIFT          [ shift and go to state 247 ]
  ! RSHIFT          [ shift and go to state 248 ]
  ! LSHIFTA         [ shift and go to state 249 ]
  ! RSHIFTA         [ shift and go to state 250 ]
  ! LT              [ shift and go to state 251 ]
  ! GT              [ shift and go to state 252 ]
  ! LE              [ shift and go to state 253 ]
  ! GE              [ shift and go to state 254 ]
  ! EQ              [ shift and go to state 255 ]
  ! NE              [ shift and go to state 256 ]
  ! EQL             [ shift and go to state 257 ]
  ! NEL             [ shift and go to state 258 ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 414

    (149) expression -> expression MOD expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 149 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 149 (expression -> expression MOD expression .)
    MOD             reduce using rule 149 (expression -> expression MOD expression .)
    PLUS            reduce using rule 149 (expression -> expression MOD expression .)
    MINUS           reduce using rule 149 (expression -> expression MOD expression .)
    LSHIFT          reduce using rule 149 (expression -> expression MOD expression .)
    RSHIFT          reduce using rule 149 (expression -> expression MOD expression .)
    LSHIFTA         reduce using rule 149 (expression -> expression MOD expression .)
    RSHIFTA         reduce using rule 149 (expression -> expression MOD expression .)
    LT              reduce using rule 149 (expression -> expression MOD expression .)
    GT              reduce using rule 149 (expression -> expression MOD expression .)
    LE              reduce using rule 149 (expression -> expression MOD expression .)
    GE              reduce using rule 149 (expression -> expression MOD expression .)
    EQ              reduce using rule 149 (expression -> expression MOD expression .)
    NE              reduce using rule 149 (expression -> expression MOD expression .)
    EQL             reduce using rule 149 (expression -> expression MOD expression .)
    NEL             reduce using rule 149 (expression -> expression MOD expression .)
    AND             reduce using rule 149 (expression -> expression MOD expression .)
    XOR             reduce using rule 149 (expression -> expression MOD expression .)
    XNOR            reduce using rule 149 (expression -> expression MOD expression .)
    OR              reduce using rule 149 (expression -> expression MOD expression .)
    LAND            reduce using rule 149 (expression -> expression MOD expression .)
    LOR             reduce using rule 149 (expression -> expression MOD expression .)
    COND            reduce using rule 149 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 149 (expression -> expression MOD expression .)
    LBRACE          reduce using rule 149 (expression -> expression MOD expression .)
    RBRACE          reduce using rule 149 (expression -> expression MOD expression .)
    COMMA           reduce using rule 149 (expression -> expression MOD expression .)
    COLON           reduce using rule 149 (expression -> expression MOD expression .)
    SEMICOLON       reduce using rule 149 (expression -> expression MOD expression .)
    PLUSCOLON       reduce using rule 149 (expression -> expression MOD expression .)
    MINUSCOLON      reduce using rule 149 (expression -> expression MOD expression .)
    RBRACKET        reduce using rule 149 (expression -> expression MOD expression .)
    POWER           shift and go to state 242

  ! POWER           [ reduce using rule 149 (expression -> expression MOD expression .) ]
  ! TIMES           [ shift and go to state 409 ]
  ! DIVIDE          [ shift and go to state 243 ]
  ! MOD             [ shift and go to state 244 ]
  ! PLUS            [ shift and go to state 245 ]
  ! MINUS           [ shift and go to state 246 ]
  ! LSHIFT          [ shift and go to state 247 ]
  ! RSHIFT          [ shift and go to state 248 ]
  ! LSHIFTA         [ shift and go to state 249 ]
  ! RSHIFTA         [ shift and go to state 250 ]
  ! LT              [ shift and go to state 251 ]
  ! GT              [ shift and go to state 252 ]
  ! LE              [ shift and go to state 253 ]
  ! GE              [ shift and go to state 254 ]
  ! EQ              [ shift and go to state 255 ]
  ! NE              [ shift and go to state 256 ]
  ! EQL             [ shift and go to state 257 ]
  ! NEL             [ shift and go to state 258 ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 415

    (150) expression -> expression PLUS expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    PLUS            reduce using rule 150 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 150 (expression -> expression PLUS expression .)
    LSHIFT          reduce using rule 150 (expression -> expression PLUS expression .)
    RSHIFT          reduce using rule 150 (expression -> expression PLUS expression .)
    LSHIFTA         reduce using rule 150 (expression -> expression PLUS expression .)
    RSHIFTA         reduce using rule 150 (expression -> expression PLUS expression .)
    LT              reduce using rule 150 (expression -> expression PLUS expression .)
    GT              reduce using rule 150 (expression -> expression PLUS expression .)
    LE              reduce using rule 150 (expression -> expression PLUS expression .)
    GE              reduce using rule 150 (expression -> expression PLUS expression .)
    EQ              reduce using rule 150 (expression -> expression PLUS expression .)
    NE              reduce using rule 150 (expression -> expression PLUS expression .)
    EQL             reduce using rule 150 (expression -> expression PLUS expression .)
    NEL             reduce using rule 150 (expression -> expression PLUS expression .)
    AND             reduce using rule 150 (expression -> expression PLUS expression .)
    XOR             reduce using rule 150 (expression -> expression PLUS expression .)
    XNOR            reduce using rule 150 (expression -> expression PLUS expression .)
    OR              reduce using rule 150 (expression -> expression PLUS expression .)
    LAND            reduce using rule 150 (expression -> expression PLUS expression .)
    LOR             reduce using rule 150 (expression -> expression PLUS expression .)
    COND            reduce using rule 150 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 150 (expression -> expression PLUS expression .)
    LBRACE          reduce using rule 150 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 150 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 150 (expression -> expression PLUS expression .)
    COLON           reduce using rule 150 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 150 (expression -> expression PLUS expression .)
    PLUSCOLON       reduce using rule 150 (expression -> expression PLUS expression .)
    MINUSCOLON      reduce using rule 150 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 150 (expression -> expression PLUS expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244

  ! TIMES           [ reduce using rule 150 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 150 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 150 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 150 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 245 ]
  ! MINUS           [ shift and go to state 246 ]
  ! LSHIFT          [ shift and go to state 247 ]
  ! RSHIFT          [ shift and go to state 248 ]
  ! LSHIFTA         [ shift and go to state 249 ]
  ! RSHIFTA         [ shift and go to state 250 ]
  ! LT              [ shift and go to state 251 ]
  ! GT              [ shift and go to state 252 ]
  ! LE              [ shift and go to state 253 ]
  ! GE              [ shift and go to state 254 ]
  ! EQ              [ shift and go to state 255 ]
  ! NE              [ shift and go to state 256 ]
  ! EQL             [ shift and go to state 257 ]
  ! NEL             [ shift and go to state 258 ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 416

    (151) expression -> expression MINUS expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    PLUS            reduce using rule 151 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 151 (expression -> expression MINUS expression .)
    LSHIFT          reduce using rule 151 (expression -> expression MINUS expression .)
    RSHIFT          reduce using rule 151 (expression -> expression MINUS expression .)
    LSHIFTA         reduce using rule 151 (expression -> expression MINUS expression .)
    RSHIFTA         reduce using rule 151 (expression -> expression MINUS expression .)
    LT              reduce using rule 151 (expression -> expression MINUS expression .)
    GT              reduce using rule 151 (expression -> expression MINUS expression .)
    LE              reduce using rule 151 (expression -> expression MINUS expression .)
    GE              reduce using rule 151 (expression -> expression MINUS expression .)
    EQ              reduce using rule 151 (expression -> expression MINUS expression .)
    NE              reduce using rule 151 (expression -> expression MINUS expression .)
    EQL             reduce using rule 151 (expression -> expression MINUS expression .)
    NEL             reduce using rule 151 (expression -> expression MINUS expression .)
    AND             reduce using rule 151 (expression -> expression MINUS expression .)
    XOR             reduce using rule 151 (expression -> expression MINUS expression .)
    XNOR            reduce using rule 151 (expression -> expression MINUS expression .)
    OR              reduce using rule 151 (expression -> expression MINUS expression .)
    LAND            reduce using rule 151 (expression -> expression MINUS expression .)
    LOR             reduce using rule 151 (expression -> expression MINUS expression .)
    COND            reduce using rule 151 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 151 (expression -> expression MINUS expression .)
    LBRACE          reduce using rule 151 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 151 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 151 (expression -> expression MINUS expression .)
    COLON           reduce using rule 151 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 151 (expression -> expression MINUS expression .)
    PLUSCOLON       reduce using rule 151 (expression -> expression MINUS expression .)
    MINUSCOLON      reduce using rule 151 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 151 (expression -> expression MINUS expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244

  ! TIMES           [ reduce using rule 151 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 151 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 151 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 151 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 245 ]
  ! MINUS           [ shift and go to state 246 ]
  ! LSHIFT          [ shift and go to state 247 ]
  ! RSHIFT          [ shift and go to state 248 ]
  ! LSHIFTA         [ shift and go to state 249 ]
  ! RSHIFTA         [ shift and go to state 250 ]
  ! LT              [ shift and go to state 251 ]
  ! GT              [ shift and go to state 252 ]
  ! LE              [ shift and go to state 253 ]
  ! GE              [ shift and go to state 254 ]
  ! EQ              [ shift and go to state 255 ]
  ! NE              [ shift and go to state 256 ]
  ! EQL             [ shift and go to state 257 ]
  ! NEL             [ shift and go to state 258 ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 417

    (152) expression -> expression LSHIFT expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    LSHIFT          reduce using rule 152 (expression -> expression LSHIFT expression .)
    RSHIFT          reduce using rule 152 (expression -> expression LSHIFT expression .)
    LSHIFTA         reduce using rule 152 (expression -> expression LSHIFT expression .)
    RSHIFTA         reduce using rule 152 (expression -> expression LSHIFT expression .)
    LT              reduce using rule 152 (expression -> expression LSHIFT expression .)
    GT              reduce using rule 152 (expression -> expression LSHIFT expression .)
    LE              reduce using rule 152 (expression -> expression LSHIFT expression .)
    GE              reduce using rule 152 (expression -> expression LSHIFT expression .)
    EQ              reduce using rule 152 (expression -> expression LSHIFT expression .)
    NE              reduce using rule 152 (expression -> expression LSHIFT expression .)
    EQL             reduce using rule 152 (expression -> expression LSHIFT expression .)
    NEL             reduce using rule 152 (expression -> expression LSHIFT expression .)
    AND             reduce using rule 152 (expression -> expression LSHIFT expression .)
    XOR             reduce using rule 152 (expression -> expression LSHIFT expression .)
    XNOR            reduce using rule 152 (expression -> expression LSHIFT expression .)
    OR              reduce using rule 152 (expression -> expression LSHIFT expression .)
    LAND            reduce using rule 152 (expression -> expression LSHIFT expression .)
    LOR             reduce using rule 152 (expression -> expression LSHIFT expression .)
    COND            reduce using rule 152 (expression -> expression LSHIFT expression .)
    RPAREN          reduce using rule 152 (expression -> expression LSHIFT expression .)
    LBRACE          reduce using rule 152 (expression -> expression LSHIFT expression .)
    RBRACE          reduce using rule 152 (expression -> expression LSHIFT expression .)
    COMMA           reduce using rule 152 (expression -> expression LSHIFT expression .)
    COLON           reduce using rule 152 (expression -> expression LSHIFT expression .)
    SEMICOLON       reduce using rule 152 (expression -> expression LSHIFT expression .)
    PLUSCOLON       reduce using rule 152 (expression -> expression LSHIFT expression .)
    MINUSCOLON      reduce using rule 152 (expression -> expression LSHIFT expression .)
    RBRACKET        reduce using rule 152 (expression -> expression LSHIFT expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246

  ! TIMES           [ reduce using rule 152 (expression -> expression LSHIFT expression .) ]
  ! POWER           [ reduce using rule 152 (expression -> expression LSHIFT expression .) ]
  ! DIVIDE          [ reduce using rule 152 (expression -> expression LSHIFT expression .) ]
  ! MOD             [ reduce using rule 152 (expression -> expression LSHIFT expression .) ]
  ! PLUS            [ reduce using rule 152 (expression -> expression LSHIFT expression .) ]
  ! MINUS           [ reduce using rule 152 (expression -> expression LSHIFT expression .) ]
  ! LSHIFT          [ shift and go to state 247 ]
  ! RSHIFT          [ shift and go to state 248 ]
  ! LSHIFTA         [ shift and go to state 249 ]
  ! RSHIFTA         [ shift and go to state 250 ]
  ! LT              [ shift and go to state 251 ]
  ! GT              [ shift and go to state 252 ]
  ! LE              [ shift and go to state 253 ]
  ! GE              [ shift and go to state 254 ]
  ! EQ              [ shift and go to state 255 ]
  ! NE              [ shift and go to state 256 ]
  ! EQL             [ shift and go to state 257 ]
  ! NEL             [ shift and go to state 258 ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 418

    (153) expression -> expression RSHIFT expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    LSHIFT          reduce using rule 153 (expression -> expression RSHIFT expression .)
    RSHIFT          reduce using rule 153 (expression -> expression RSHIFT expression .)
    LSHIFTA         reduce using rule 153 (expression -> expression RSHIFT expression .)
    RSHIFTA         reduce using rule 153 (expression -> expression RSHIFT expression .)
    LT              reduce using rule 153 (expression -> expression RSHIFT expression .)
    GT              reduce using rule 153 (expression -> expression RSHIFT expression .)
    LE              reduce using rule 153 (expression -> expression RSHIFT expression .)
    GE              reduce using rule 153 (expression -> expression RSHIFT expression .)
    EQ              reduce using rule 153 (expression -> expression RSHIFT expression .)
    NE              reduce using rule 153 (expression -> expression RSHIFT expression .)
    EQL             reduce using rule 153 (expression -> expression RSHIFT expression .)
    NEL             reduce using rule 153 (expression -> expression RSHIFT expression .)
    AND             reduce using rule 153 (expression -> expression RSHIFT expression .)
    XOR             reduce using rule 153 (expression -> expression RSHIFT expression .)
    XNOR            reduce using rule 153 (expression -> expression RSHIFT expression .)
    OR              reduce using rule 153 (expression -> expression RSHIFT expression .)
    LAND            reduce using rule 153 (expression -> expression RSHIFT expression .)
    LOR             reduce using rule 153 (expression -> expression RSHIFT expression .)
    COND            reduce using rule 153 (expression -> expression RSHIFT expression .)
    RPAREN          reduce using rule 153 (expression -> expression RSHIFT expression .)
    LBRACE          reduce using rule 153 (expression -> expression RSHIFT expression .)
    RBRACE          reduce using rule 153 (expression -> expression RSHIFT expression .)
    COMMA           reduce using rule 153 (expression -> expression RSHIFT expression .)
    COLON           reduce using rule 153 (expression -> expression RSHIFT expression .)
    SEMICOLON       reduce using rule 153 (expression -> expression RSHIFT expression .)
    PLUSCOLON       reduce using rule 153 (expression -> expression RSHIFT expression .)
    MINUSCOLON      reduce using rule 153 (expression -> expression RSHIFT expression .)
    RBRACKET        reduce using rule 153 (expression -> expression RSHIFT expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246

  ! TIMES           [ reduce using rule 153 (expression -> expression RSHIFT expression .) ]
  ! POWER           [ reduce using rule 153 (expression -> expression RSHIFT expression .) ]
  ! DIVIDE          [ reduce using rule 153 (expression -> expression RSHIFT expression .) ]
  ! MOD             [ reduce using rule 153 (expression -> expression RSHIFT expression .) ]
  ! PLUS            [ reduce using rule 153 (expression -> expression RSHIFT expression .) ]
  ! MINUS           [ reduce using rule 153 (expression -> expression RSHIFT expression .) ]
  ! LSHIFT          [ shift and go to state 247 ]
  ! RSHIFT          [ shift and go to state 248 ]
  ! LSHIFTA         [ shift and go to state 249 ]
  ! RSHIFTA         [ shift and go to state 250 ]
  ! LT              [ shift and go to state 251 ]
  ! GT              [ shift and go to state 252 ]
  ! LE              [ shift and go to state 253 ]
  ! GE              [ shift and go to state 254 ]
  ! EQ              [ shift and go to state 255 ]
  ! NE              [ shift and go to state 256 ]
  ! EQL             [ shift and go to state 257 ]
  ! NEL             [ shift and go to state 258 ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 419

    (154) expression -> expression LSHIFTA expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    LSHIFT          reduce using rule 154 (expression -> expression LSHIFTA expression .)
    RSHIFT          reduce using rule 154 (expression -> expression LSHIFTA expression .)
    LSHIFTA         reduce using rule 154 (expression -> expression LSHIFTA expression .)
    RSHIFTA         reduce using rule 154 (expression -> expression LSHIFTA expression .)
    LT              reduce using rule 154 (expression -> expression LSHIFTA expression .)
    GT              reduce using rule 154 (expression -> expression LSHIFTA expression .)
    LE              reduce using rule 154 (expression -> expression LSHIFTA expression .)
    GE              reduce using rule 154 (expression -> expression LSHIFTA expression .)
    EQ              reduce using rule 154 (expression -> expression LSHIFTA expression .)
    NE              reduce using rule 154 (expression -> expression LSHIFTA expression .)
    EQL             reduce using rule 154 (expression -> expression LSHIFTA expression .)
    NEL             reduce using rule 154 (expression -> expression LSHIFTA expression .)
    AND             reduce using rule 154 (expression -> expression LSHIFTA expression .)
    XOR             reduce using rule 154 (expression -> expression LSHIFTA expression .)
    XNOR            reduce using rule 154 (expression -> expression LSHIFTA expression .)
    OR              reduce using rule 154 (expression -> expression LSHIFTA expression .)
    LAND            reduce using rule 154 (expression -> expression LSHIFTA expression .)
    LOR             reduce using rule 154 (expression -> expression LSHIFTA expression .)
    COND            reduce using rule 154 (expression -> expression LSHIFTA expression .)
    RPAREN          reduce using rule 154 (expression -> expression LSHIFTA expression .)
    LBRACE          reduce using rule 154 (expression -> expression LSHIFTA expression .)
    RBRACE          reduce using rule 154 (expression -> expression LSHIFTA expression .)
    COMMA           reduce using rule 154 (expression -> expression LSHIFTA expression .)
    COLON           reduce using rule 154 (expression -> expression LSHIFTA expression .)
    SEMICOLON       reduce using rule 154 (expression -> expression LSHIFTA expression .)
    PLUSCOLON       reduce using rule 154 (expression -> expression LSHIFTA expression .)
    MINUSCOLON      reduce using rule 154 (expression -> expression LSHIFTA expression .)
    RBRACKET        reduce using rule 154 (expression -> expression LSHIFTA expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246

  ! TIMES           [ reduce using rule 154 (expression -> expression LSHIFTA expression .) ]
  ! POWER           [ reduce using rule 154 (expression -> expression LSHIFTA expression .) ]
  ! DIVIDE          [ reduce using rule 154 (expression -> expression LSHIFTA expression .) ]
  ! MOD             [ reduce using rule 154 (expression -> expression LSHIFTA expression .) ]
  ! PLUS            [ reduce using rule 154 (expression -> expression LSHIFTA expression .) ]
  ! MINUS           [ reduce using rule 154 (expression -> expression LSHIFTA expression .) ]
  ! LSHIFT          [ shift and go to state 247 ]
  ! RSHIFT          [ shift and go to state 248 ]
  ! LSHIFTA         [ shift and go to state 249 ]
  ! RSHIFTA         [ shift and go to state 250 ]
  ! LT              [ shift and go to state 251 ]
  ! GT              [ shift and go to state 252 ]
  ! LE              [ shift and go to state 253 ]
  ! GE              [ shift and go to state 254 ]
  ! EQ              [ shift and go to state 255 ]
  ! NE              [ shift and go to state 256 ]
  ! EQL             [ shift and go to state 257 ]
  ! NEL             [ shift and go to state 258 ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 420

    (155) expression -> expression RSHIFTA expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    LSHIFT          reduce using rule 155 (expression -> expression RSHIFTA expression .)
    RSHIFT          reduce using rule 155 (expression -> expression RSHIFTA expression .)
    LSHIFTA         reduce using rule 155 (expression -> expression RSHIFTA expression .)
    RSHIFTA         reduce using rule 155 (expression -> expression RSHIFTA expression .)
    LT              reduce using rule 155 (expression -> expression RSHIFTA expression .)
    GT              reduce using rule 155 (expression -> expression RSHIFTA expression .)
    LE              reduce using rule 155 (expression -> expression RSHIFTA expression .)
    GE              reduce using rule 155 (expression -> expression RSHIFTA expression .)
    EQ              reduce using rule 155 (expression -> expression RSHIFTA expression .)
    NE              reduce using rule 155 (expression -> expression RSHIFTA expression .)
    EQL             reduce using rule 155 (expression -> expression RSHIFTA expression .)
    NEL             reduce using rule 155 (expression -> expression RSHIFTA expression .)
    AND             reduce using rule 155 (expression -> expression RSHIFTA expression .)
    XOR             reduce using rule 155 (expression -> expression RSHIFTA expression .)
    XNOR            reduce using rule 155 (expression -> expression RSHIFTA expression .)
    OR              reduce using rule 155 (expression -> expression RSHIFTA expression .)
    LAND            reduce using rule 155 (expression -> expression RSHIFTA expression .)
    LOR             reduce using rule 155 (expression -> expression RSHIFTA expression .)
    COND            reduce using rule 155 (expression -> expression RSHIFTA expression .)
    RPAREN          reduce using rule 155 (expression -> expression RSHIFTA expression .)
    LBRACE          reduce using rule 155 (expression -> expression RSHIFTA expression .)
    RBRACE          reduce using rule 155 (expression -> expression RSHIFTA expression .)
    COMMA           reduce using rule 155 (expression -> expression RSHIFTA expression .)
    COLON           reduce using rule 155 (expression -> expression RSHIFTA expression .)
    SEMICOLON       reduce using rule 155 (expression -> expression RSHIFTA expression .)
    PLUSCOLON       reduce using rule 155 (expression -> expression RSHIFTA expression .)
    MINUSCOLON      reduce using rule 155 (expression -> expression RSHIFTA expression .)
    RBRACKET        reduce using rule 155 (expression -> expression RSHIFTA expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246

  ! TIMES           [ reduce using rule 155 (expression -> expression RSHIFTA expression .) ]
  ! POWER           [ reduce using rule 155 (expression -> expression RSHIFTA expression .) ]
  ! DIVIDE          [ reduce using rule 155 (expression -> expression RSHIFTA expression .) ]
  ! MOD             [ reduce using rule 155 (expression -> expression RSHIFTA expression .) ]
  ! PLUS            [ reduce using rule 155 (expression -> expression RSHIFTA expression .) ]
  ! MINUS           [ reduce using rule 155 (expression -> expression RSHIFTA expression .) ]
  ! LSHIFT          [ shift and go to state 247 ]
  ! RSHIFT          [ shift and go to state 248 ]
  ! LSHIFTA         [ shift and go to state 249 ]
  ! RSHIFTA         [ shift and go to state 250 ]
  ! LT              [ shift and go to state 251 ]
  ! GT              [ shift and go to state 252 ]
  ! LE              [ shift and go to state 253 ]
  ! GE              [ shift and go to state 254 ]
  ! EQ              [ shift and go to state 255 ]
  ! NE              [ shift and go to state 256 ]
  ! EQL             [ shift and go to state 257 ]
  ! NEL             [ shift and go to state 258 ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 421

    (156) expression -> expression LT expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    LT              reduce using rule 156 (expression -> expression LT expression .)
    GT              reduce using rule 156 (expression -> expression LT expression .)
    LE              reduce using rule 156 (expression -> expression LT expression .)
    GE              reduce using rule 156 (expression -> expression LT expression .)
    EQ              reduce using rule 156 (expression -> expression LT expression .)
    NE              reduce using rule 156 (expression -> expression LT expression .)
    EQL             reduce using rule 156 (expression -> expression LT expression .)
    NEL             reduce using rule 156 (expression -> expression LT expression .)
    AND             reduce using rule 156 (expression -> expression LT expression .)
    XOR             reduce using rule 156 (expression -> expression LT expression .)
    XNOR            reduce using rule 156 (expression -> expression LT expression .)
    OR              reduce using rule 156 (expression -> expression LT expression .)
    LAND            reduce using rule 156 (expression -> expression LT expression .)
    LOR             reduce using rule 156 (expression -> expression LT expression .)
    COND            reduce using rule 156 (expression -> expression LT expression .)
    RPAREN          reduce using rule 156 (expression -> expression LT expression .)
    LBRACE          reduce using rule 156 (expression -> expression LT expression .)
    RBRACE          reduce using rule 156 (expression -> expression LT expression .)
    COMMA           reduce using rule 156 (expression -> expression LT expression .)
    COLON           reduce using rule 156 (expression -> expression LT expression .)
    SEMICOLON       reduce using rule 156 (expression -> expression LT expression .)
    PLUSCOLON       reduce using rule 156 (expression -> expression LT expression .)
    MINUSCOLON      reduce using rule 156 (expression -> expression LT expression .)
    RBRACKET        reduce using rule 156 (expression -> expression LT expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250

  ! TIMES           [ reduce using rule 156 (expression -> expression LT expression .) ]
  ! POWER           [ reduce using rule 156 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 156 (expression -> expression LT expression .) ]
  ! MOD             [ reduce using rule 156 (expression -> expression LT expression .) ]
  ! PLUS            [ reduce using rule 156 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 156 (expression -> expression LT expression .) ]
  ! LSHIFT          [ reduce using rule 156 (expression -> expression LT expression .) ]
  ! RSHIFT          [ reduce using rule 156 (expression -> expression LT expression .) ]
  ! LSHIFTA         [ reduce using rule 156 (expression -> expression LT expression .) ]
  ! RSHIFTA         [ reduce using rule 156 (expression -> expression LT expression .) ]
  ! LT              [ shift and go to state 251 ]
  ! GT              [ shift and go to state 252 ]
  ! LE              [ shift and go to state 253 ]
  ! GE              [ shift and go to state 254 ]
  ! EQ              [ shift and go to state 255 ]
  ! NE              [ shift and go to state 256 ]
  ! EQL             [ shift and go to state 257 ]
  ! NEL             [ shift and go to state 258 ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 422

    (157) expression -> expression GT expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    LT              reduce using rule 157 (expression -> expression GT expression .)
    GT              reduce using rule 157 (expression -> expression GT expression .)
    LE              reduce using rule 157 (expression -> expression GT expression .)
    GE              reduce using rule 157 (expression -> expression GT expression .)
    EQ              reduce using rule 157 (expression -> expression GT expression .)
    NE              reduce using rule 157 (expression -> expression GT expression .)
    EQL             reduce using rule 157 (expression -> expression GT expression .)
    NEL             reduce using rule 157 (expression -> expression GT expression .)
    AND             reduce using rule 157 (expression -> expression GT expression .)
    XOR             reduce using rule 157 (expression -> expression GT expression .)
    XNOR            reduce using rule 157 (expression -> expression GT expression .)
    OR              reduce using rule 157 (expression -> expression GT expression .)
    LAND            reduce using rule 157 (expression -> expression GT expression .)
    LOR             reduce using rule 157 (expression -> expression GT expression .)
    COND            reduce using rule 157 (expression -> expression GT expression .)
    RPAREN          reduce using rule 157 (expression -> expression GT expression .)
    LBRACE          reduce using rule 157 (expression -> expression GT expression .)
    RBRACE          reduce using rule 157 (expression -> expression GT expression .)
    COMMA           reduce using rule 157 (expression -> expression GT expression .)
    COLON           reduce using rule 157 (expression -> expression GT expression .)
    SEMICOLON       reduce using rule 157 (expression -> expression GT expression .)
    PLUSCOLON       reduce using rule 157 (expression -> expression GT expression .)
    MINUSCOLON      reduce using rule 157 (expression -> expression GT expression .)
    RBRACKET        reduce using rule 157 (expression -> expression GT expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250

  ! TIMES           [ reduce using rule 157 (expression -> expression GT expression .) ]
  ! POWER           [ reduce using rule 157 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 157 (expression -> expression GT expression .) ]
  ! MOD             [ reduce using rule 157 (expression -> expression GT expression .) ]
  ! PLUS            [ reduce using rule 157 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 157 (expression -> expression GT expression .) ]
  ! LSHIFT          [ reduce using rule 157 (expression -> expression GT expression .) ]
  ! RSHIFT          [ reduce using rule 157 (expression -> expression GT expression .) ]
  ! LSHIFTA         [ reduce using rule 157 (expression -> expression GT expression .) ]
  ! RSHIFTA         [ reduce using rule 157 (expression -> expression GT expression .) ]
  ! LT              [ shift and go to state 251 ]
  ! GT              [ shift and go to state 252 ]
  ! LE              [ shift and go to state 253 ]
  ! GE              [ shift and go to state 254 ]
  ! EQ              [ shift and go to state 255 ]
  ! NE              [ shift and go to state 256 ]
  ! EQL             [ shift and go to state 257 ]
  ! NEL             [ shift and go to state 258 ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 423

    (158) expression -> expression LE expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    LT              reduce using rule 158 (expression -> expression LE expression .)
    GT              reduce using rule 158 (expression -> expression LE expression .)
    LE              reduce using rule 158 (expression -> expression LE expression .)
    GE              reduce using rule 158 (expression -> expression LE expression .)
    EQ              reduce using rule 158 (expression -> expression LE expression .)
    NE              reduce using rule 158 (expression -> expression LE expression .)
    EQL             reduce using rule 158 (expression -> expression LE expression .)
    NEL             reduce using rule 158 (expression -> expression LE expression .)
    AND             reduce using rule 158 (expression -> expression LE expression .)
    XOR             reduce using rule 158 (expression -> expression LE expression .)
    XNOR            reduce using rule 158 (expression -> expression LE expression .)
    OR              reduce using rule 158 (expression -> expression LE expression .)
    LAND            reduce using rule 158 (expression -> expression LE expression .)
    LOR             reduce using rule 158 (expression -> expression LE expression .)
    COND            reduce using rule 158 (expression -> expression LE expression .)
    RPAREN          reduce using rule 158 (expression -> expression LE expression .)
    LBRACE          reduce using rule 158 (expression -> expression LE expression .)
    RBRACE          reduce using rule 158 (expression -> expression LE expression .)
    COMMA           reduce using rule 158 (expression -> expression LE expression .)
    COLON           reduce using rule 158 (expression -> expression LE expression .)
    SEMICOLON       reduce using rule 158 (expression -> expression LE expression .)
    PLUSCOLON       reduce using rule 158 (expression -> expression LE expression .)
    MINUSCOLON      reduce using rule 158 (expression -> expression LE expression .)
    RBRACKET        reduce using rule 158 (expression -> expression LE expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250

  ! TIMES           [ reduce using rule 158 (expression -> expression LE expression .) ]
  ! POWER           [ reduce using rule 158 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 158 (expression -> expression LE expression .) ]
  ! MOD             [ reduce using rule 158 (expression -> expression LE expression .) ]
  ! PLUS            [ reduce using rule 158 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 158 (expression -> expression LE expression .) ]
  ! LSHIFT          [ reduce using rule 158 (expression -> expression LE expression .) ]
  ! RSHIFT          [ reduce using rule 158 (expression -> expression LE expression .) ]
  ! LSHIFTA         [ reduce using rule 158 (expression -> expression LE expression .) ]
  ! RSHIFTA         [ reduce using rule 158 (expression -> expression LE expression .) ]
  ! LT              [ shift and go to state 251 ]
  ! GT              [ shift and go to state 252 ]
  ! LE              [ shift and go to state 253 ]
  ! GE              [ shift and go to state 254 ]
  ! EQ              [ shift and go to state 255 ]
  ! NE              [ shift and go to state 256 ]
  ! EQL             [ shift and go to state 257 ]
  ! NEL             [ shift and go to state 258 ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 424

    (159) expression -> expression GE expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    LT              reduce using rule 159 (expression -> expression GE expression .)
    GT              reduce using rule 159 (expression -> expression GE expression .)
    LE              reduce using rule 159 (expression -> expression GE expression .)
    GE              reduce using rule 159 (expression -> expression GE expression .)
    EQ              reduce using rule 159 (expression -> expression GE expression .)
    NE              reduce using rule 159 (expression -> expression GE expression .)
    EQL             reduce using rule 159 (expression -> expression GE expression .)
    NEL             reduce using rule 159 (expression -> expression GE expression .)
    AND             reduce using rule 159 (expression -> expression GE expression .)
    XOR             reduce using rule 159 (expression -> expression GE expression .)
    XNOR            reduce using rule 159 (expression -> expression GE expression .)
    OR              reduce using rule 159 (expression -> expression GE expression .)
    LAND            reduce using rule 159 (expression -> expression GE expression .)
    LOR             reduce using rule 159 (expression -> expression GE expression .)
    COND            reduce using rule 159 (expression -> expression GE expression .)
    RPAREN          reduce using rule 159 (expression -> expression GE expression .)
    LBRACE          reduce using rule 159 (expression -> expression GE expression .)
    RBRACE          reduce using rule 159 (expression -> expression GE expression .)
    COMMA           reduce using rule 159 (expression -> expression GE expression .)
    COLON           reduce using rule 159 (expression -> expression GE expression .)
    SEMICOLON       reduce using rule 159 (expression -> expression GE expression .)
    PLUSCOLON       reduce using rule 159 (expression -> expression GE expression .)
    MINUSCOLON      reduce using rule 159 (expression -> expression GE expression .)
    RBRACKET        reduce using rule 159 (expression -> expression GE expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250

  ! TIMES           [ reduce using rule 159 (expression -> expression GE expression .) ]
  ! POWER           [ reduce using rule 159 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 159 (expression -> expression GE expression .) ]
  ! MOD             [ reduce using rule 159 (expression -> expression GE expression .) ]
  ! PLUS            [ reduce using rule 159 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 159 (expression -> expression GE expression .) ]
  ! LSHIFT          [ reduce using rule 159 (expression -> expression GE expression .) ]
  ! RSHIFT          [ reduce using rule 159 (expression -> expression GE expression .) ]
  ! LSHIFTA         [ reduce using rule 159 (expression -> expression GE expression .) ]
  ! RSHIFTA         [ reduce using rule 159 (expression -> expression GE expression .) ]
  ! LT              [ shift and go to state 251 ]
  ! GT              [ shift and go to state 252 ]
  ! LE              [ shift and go to state 253 ]
  ! GE              [ shift and go to state 254 ]
  ! EQ              [ shift and go to state 255 ]
  ! NE              [ shift and go to state 256 ]
  ! EQL             [ shift and go to state 257 ]
  ! NEL             [ shift and go to state 258 ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 425

    (160) expression -> expression EQ expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    EQ              reduce using rule 160 (expression -> expression EQ expression .)
    NE              reduce using rule 160 (expression -> expression EQ expression .)
    EQL             reduce using rule 160 (expression -> expression EQ expression .)
    NEL             reduce using rule 160 (expression -> expression EQ expression .)
    AND             reduce using rule 160 (expression -> expression EQ expression .)
    XOR             reduce using rule 160 (expression -> expression EQ expression .)
    XNOR            reduce using rule 160 (expression -> expression EQ expression .)
    OR              reduce using rule 160 (expression -> expression EQ expression .)
    LAND            reduce using rule 160 (expression -> expression EQ expression .)
    LOR             reduce using rule 160 (expression -> expression EQ expression .)
    COND            reduce using rule 160 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 160 (expression -> expression EQ expression .)
    LBRACE          reduce using rule 160 (expression -> expression EQ expression .)
    RBRACE          reduce using rule 160 (expression -> expression EQ expression .)
    COMMA           reduce using rule 160 (expression -> expression EQ expression .)
    COLON           reduce using rule 160 (expression -> expression EQ expression .)
    SEMICOLON       reduce using rule 160 (expression -> expression EQ expression .)
    PLUSCOLON       reduce using rule 160 (expression -> expression EQ expression .)
    MINUSCOLON      reduce using rule 160 (expression -> expression EQ expression .)
    RBRACKET        reduce using rule 160 (expression -> expression EQ expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254

  ! TIMES           [ reduce using rule 160 (expression -> expression EQ expression .) ]
  ! POWER           [ reduce using rule 160 (expression -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 160 (expression -> expression EQ expression .) ]
  ! MOD             [ reduce using rule 160 (expression -> expression EQ expression .) ]
  ! PLUS            [ reduce using rule 160 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 160 (expression -> expression EQ expression .) ]
  ! LSHIFT          [ reduce using rule 160 (expression -> expression EQ expression .) ]
  ! RSHIFT          [ reduce using rule 160 (expression -> expression EQ expression .) ]
  ! LSHIFTA         [ reduce using rule 160 (expression -> expression EQ expression .) ]
  ! RSHIFTA         [ reduce using rule 160 (expression -> expression EQ expression .) ]
  ! LT              [ reduce using rule 160 (expression -> expression EQ expression .) ]
  ! GT              [ reduce using rule 160 (expression -> expression EQ expression .) ]
  ! LE              [ reduce using rule 160 (expression -> expression EQ expression .) ]
  ! GE              [ reduce using rule 160 (expression -> expression EQ expression .) ]
  ! EQ              [ shift and go to state 255 ]
  ! NE              [ shift and go to state 256 ]
  ! EQL             [ shift and go to state 257 ]
  ! NEL             [ shift and go to state 258 ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 426

    (161) expression -> expression NE expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    EQ              reduce using rule 161 (expression -> expression NE expression .)
    NE              reduce using rule 161 (expression -> expression NE expression .)
    EQL             reduce using rule 161 (expression -> expression NE expression .)
    NEL             reduce using rule 161 (expression -> expression NE expression .)
    AND             reduce using rule 161 (expression -> expression NE expression .)
    XOR             reduce using rule 161 (expression -> expression NE expression .)
    XNOR            reduce using rule 161 (expression -> expression NE expression .)
    OR              reduce using rule 161 (expression -> expression NE expression .)
    LAND            reduce using rule 161 (expression -> expression NE expression .)
    LOR             reduce using rule 161 (expression -> expression NE expression .)
    COND            reduce using rule 161 (expression -> expression NE expression .)
    RPAREN          reduce using rule 161 (expression -> expression NE expression .)
    LBRACE          reduce using rule 161 (expression -> expression NE expression .)
    RBRACE          reduce using rule 161 (expression -> expression NE expression .)
    COMMA           reduce using rule 161 (expression -> expression NE expression .)
    COLON           reduce using rule 161 (expression -> expression NE expression .)
    SEMICOLON       reduce using rule 161 (expression -> expression NE expression .)
    PLUSCOLON       reduce using rule 161 (expression -> expression NE expression .)
    MINUSCOLON      reduce using rule 161 (expression -> expression NE expression .)
    RBRACKET        reduce using rule 161 (expression -> expression NE expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254

  ! TIMES           [ reduce using rule 161 (expression -> expression NE expression .) ]
  ! POWER           [ reduce using rule 161 (expression -> expression NE expression .) ]
  ! DIVIDE          [ reduce using rule 161 (expression -> expression NE expression .) ]
  ! MOD             [ reduce using rule 161 (expression -> expression NE expression .) ]
  ! PLUS            [ reduce using rule 161 (expression -> expression NE expression .) ]
  ! MINUS           [ reduce using rule 161 (expression -> expression NE expression .) ]
  ! LSHIFT          [ reduce using rule 161 (expression -> expression NE expression .) ]
  ! RSHIFT          [ reduce using rule 161 (expression -> expression NE expression .) ]
  ! LSHIFTA         [ reduce using rule 161 (expression -> expression NE expression .) ]
  ! RSHIFTA         [ reduce using rule 161 (expression -> expression NE expression .) ]
  ! LT              [ reduce using rule 161 (expression -> expression NE expression .) ]
  ! GT              [ reduce using rule 161 (expression -> expression NE expression .) ]
  ! LE              [ reduce using rule 161 (expression -> expression NE expression .) ]
  ! GE              [ reduce using rule 161 (expression -> expression NE expression .) ]
  ! EQ              [ shift and go to state 255 ]
  ! NE              [ shift and go to state 256 ]
  ! EQL             [ shift and go to state 257 ]
  ! NEL             [ shift and go to state 258 ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 427

    (162) expression -> expression EQL expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    EQ              reduce using rule 162 (expression -> expression EQL expression .)
    NE              reduce using rule 162 (expression -> expression EQL expression .)
    EQL             reduce using rule 162 (expression -> expression EQL expression .)
    NEL             reduce using rule 162 (expression -> expression EQL expression .)
    AND             reduce using rule 162 (expression -> expression EQL expression .)
    XOR             reduce using rule 162 (expression -> expression EQL expression .)
    XNOR            reduce using rule 162 (expression -> expression EQL expression .)
    OR              reduce using rule 162 (expression -> expression EQL expression .)
    LAND            reduce using rule 162 (expression -> expression EQL expression .)
    LOR             reduce using rule 162 (expression -> expression EQL expression .)
    COND            reduce using rule 162 (expression -> expression EQL expression .)
    RPAREN          reduce using rule 162 (expression -> expression EQL expression .)
    LBRACE          reduce using rule 162 (expression -> expression EQL expression .)
    RBRACE          reduce using rule 162 (expression -> expression EQL expression .)
    COMMA           reduce using rule 162 (expression -> expression EQL expression .)
    COLON           reduce using rule 162 (expression -> expression EQL expression .)
    SEMICOLON       reduce using rule 162 (expression -> expression EQL expression .)
    PLUSCOLON       reduce using rule 162 (expression -> expression EQL expression .)
    MINUSCOLON      reduce using rule 162 (expression -> expression EQL expression .)
    RBRACKET        reduce using rule 162 (expression -> expression EQL expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254

  ! TIMES           [ reduce using rule 162 (expression -> expression EQL expression .) ]
  ! POWER           [ reduce using rule 162 (expression -> expression EQL expression .) ]
  ! DIVIDE          [ reduce using rule 162 (expression -> expression EQL expression .) ]
  ! MOD             [ reduce using rule 162 (expression -> expression EQL expression .) ]
  ! PLUS            [ reduce using rule 162 (expression -> expression EQL expression .) ]
  ! MINUS           [ reduce using rule 162 (expression -> expression EQL expression .) ]
  ! LSHIFT          [ reduce using rule 162 (expression -> expression EQL expression .) ]
  ! RSHIFT          [ reduce using rule 162 (expression -> expression EQL expression .) ]
  ! LSHIFTA         [ reduce using rule 162 (expression -> expression EQL expression .) ]
  ! RSHIFTA         [ reduce using rule 162 (expression -> expression EQL expression .) ]
  ! LT              [ reduce using rule 162 (expression -> expression EQL expression .) ]
  ! GT              [ reduce using rule 162 (expression -> expression EQL expression .) ]
  ! LE              [ reduce using rule 162 (expression -> expression EQL expression .) ]
  ! GE              [ reduce using rule 162 (expression -> expression EQL expression .) ]
  ! EQ              [ shift and go to state 255 ]
  ! NE              [ shift and go to state 256 ]
  ! EQL             [ shift and go to state 257 ]
  ! NEL             [ shift and go to state 258 ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 428

    (163) expression -> expression NEL expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    EQ              reduce using rule 163 (expression -> expression NEL expression .)
    NE              reduce using rule 163 (expression -> expression NEL expression .)
    EQL             reduce using rule 163 (expression -> expression NEL expression .)
    NEL             reduce using rule 163 (expression -> expression NEL expression .)
    AND             reduce using rule 163 (expression -> expression NEL expression .)
    XOR             reduce using rule 163 (expression -> expression NEL expression .)
    XNOR            reduce using rule 163 (expression -> expression NEL expression .)
    OR              reduce using rule 163 (expression -> expression NEL expression .)
    LAND            reduce using rule 163 (expression -> expression NEL expression .)
    LOR             reduce using rule 163 (expression -> expression NEL expression .)
    COND            reduce using rule 163 (expression -> expression NEL expression .)
    RPAREN          reduce using rule 163 (expression -> expression NEL expression .)
    LBRACE          reduce using rule 163 (expression -> expression NEL expression .)
    RBRACE          reduce using rule 163 (expression -> expression NEL expression .)
    COMMA           reduce using rule 163 (expression -> expression NEL expression .)
    COLON           reduce using rule 163 (expression -> expression NEL expression .)
    SEMICOLON       reduce using rule 163 (expression -> expression NEL expression .)
    PLUSCOLON       reduce using rule 163 (expression -> expression NEL expression .)
    MINUSCOLON      reduce using rule 163 (expression -> expression NEL expression .)
    RBRACKET        reduce using rule 163 (expression -> expression NEL expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254

  ! TIMES           [ reduce using rule 163 (expression -> expression NEL expression .) ]
  ! POWER           [ reduce using rule 163 (expression -> expression NEL expression .) ]
  ! DIVIDE          [ reduce using rule 163 (expression -> expression NEL expression .) ]
  ! MOD             [ reduce using rule 163 (expression -> expression NEL expression .) ]
  ! PLUS            [ reduce using rule 163 (expression -> expression NEL expression .) ]
  ! MINUS           [ reduce using rule 163 (expression -> expression NEL expression .) ]
  ! LSHIFT          [ reduce using rule 163 (expression -> expression NEL expression .) ]
  ! RSHIFT          [ reduce using rule 163 (expression -> expression NEL expression .) ]
  ! LSHIFTA         [ reduce using rule 163 (expression -> expression NEL expression .) ]
  ! RSHIFTA         [ reduce using rule 163 (expression -> expression NEL expression .) ]
  ! LT              [ reduce using rule 163 (expression -> expression NEL expression .) ]
  ! GT              [ reduce using rule 163 (expression -> expression NEL expression .) ]
  ! LE              [ reduce using rule 163 (expression -> expression NEL expression .) ]
  ! GE              [ reduce using rule 163 (expression -> expression NEL expression .) ]
  ! EQ              [ shift and go to state 255 ]
  ! NE              [ shift and go to state 256 ]
  ! EQL             [ shift and go to state 257 ]
  ! NEL             [ shift and go to state 258 ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 429

    (164) expression -> expression AND expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    AND             reduce using rule 164 (expression -> expression AND expression .)
    XOR             reduce using rule 164 (expression -> expression AND expression .)
    XNOR            reduce using rule 164 (expression -> expression AND expression .)
    OR              reduce using rule 164 (expression -> expression AND expression .)
    LAND            reduce using rule 164 (expression -> expression AND expression .)
    LOR             reduce using rule 164 (expression -> expression AND expression .)
    COND            reduce using rule 164 (expression -> expression AND expression .)
    RPAREN          reduce using rule 164 (expression -> expression AND expression .)
    LBRACE          reduce using rule 164 (expression -> expression AND expression .)
    RBRACE          reduce using rule 164 (expression -> expression AND expression .)
    COMMA           reduce using rule 164 (expression -> expression AND expression .)
    COLON           reduce using rule 164 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 164 (expression -> expression AND expression .)
    PLUSCOLON       reduce using rule 164 (expression -> expression AND expression .)
    MINUSCOLON      reduce using rule 164 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 164 (expression -> expression AND expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258

  ! TIMES           [ reduce using rule 164 (expression -> expression AND expression .) ]
  ! POWER           [ reduce using rule 164 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 164 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 164 (expression -> expression AND expression .) ]
  ! PLUS            [ reduce using rule 164 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 164 (expression -> expression AND expression .) ]
  ! LSHIFT          [ reduce using rule 164 (expression -> expression AND expression .) ]
  ! RSHIFT          [ reduce using rule 164 (expression -> expression AND expression .) ]
  ! LSHIFTA         [ reduce using rule 164 (expression -> expression AND expression .) ]
  ! RSHIFTA         [ reduce using rule 164 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 164 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 164 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 164 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 164 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 164 (expression -> expression AND expression .) ]
  ! NE              [ reduce using rule 164 (expression -> expression AND expression .) ]
  ! EQL             [ reduce using rule 164 (expression -> expression AND expression .) ]
  ! NEL             [ reduce using rule 164 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 259 ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 430

    (165) expression -> expression XOR expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    XOR             reduce using rule 165 (expression -> expression XOR expression .)
    XNOR            reduce using rule 165 (expression -> expression XOR expression .)
    OR              reduce using rule 165 (expression -> expression XOR expression .)
    LAND            reduce using rule 165 (expression -> expression XOR expression .)
    LOR             reduce using rule 165 (expression -> expression XOR expression .)
    COND            reduce using rule 165 (expression -> expression XOR expression .)
    RPAREN          reduce using rule 165 (expression -> expression XOR expression .)
    LBRACE          reduce using rule 165 (expression -> expression XOR expression .)
    RBRACE          reduce using rule 165 (expression -> expression XOR expression .)
    COMMA           reduce using rule 165 (expression -> expression XOR expression .)
    COLON           reduce using rule 165 (expression -> expression XOR expression .)
    SEMICOLON       reduce using rule 165 (expression -> expression XOR expression .)
    PLUSCOLON       reduce using rule 165 (expression -> expression XOR expression .)
    MINUSCOLON      reduce using rule 165 (expression -> expression XOR expression .)
    RBRACKET        reduce using rule 165 (expression -> expression XOR expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259

  ! TIMES           [ reduce using rule 165 (expression -> expression XOR expression .) ]
  ! POWER           [ reduce using rule 165 (expression -> expression XOR expression .) ]
  ! DIVIDE          [ reduce using rule 165 (expression -> expression XOR expression .) ]
  ! MOD             [ reduce using rule 165 (expression -> expression XOR expression .) ]
  ! PLUS            [ reduce using rule 165 (expression -> expression XOR expression .) ]
  ! MINUS           [ reduce using rule 165 (expression -> expression XOR expression .) ]
  ! LSHIFT          [ reduce using rule 165 (expression -> expression XOR expression .) ]
  ! RSHIFT          [ reduce using rule 165 (expression -> expression XOR expression .) ]
  ! LSHIFTA         [ reduce using rule 165 (expression -> expression XOR expression .) ]
  ! RSHIFTA         [ reduce using rule 165 (expression -> expression XOR expression .) ]
  ! LT              [ reduce using rule 165 (expression -> expression XOR expression .) ]
  ! GT              [ reduce using rule 165 (expression -> expression XOR expression .) ]
  ! LE              [ reduce using rule 165 (expression -> expression XOR expression .) ]
  ! GE              [ reduce using rule 165 (expression -> expression XOR expression .) ]
  ! EQ              [ reduce using rule 165 (expression -> expression XOR expression .) ]
  ! NE              [ reduce using rule 165 (expression -> expression XOR expression .) ]
  ! EQL             [ reduce using rule 165 (expression -> expression XOR expression .) ]
  ! NEL             [ reduce using rule 165 (expression -> expression XOR expression .) ]
  ! AND             [ reduce using rule 165 (expression -> expression XOR expression .) ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 431

    (166) expression -> expression XNOR expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    XOR             reduce using rule 166 (expression -> expression XNOR expression .)
    XNOR            reduce using rule 166 (expression -> expression XNOR expression .)
    OR              reduce using rule 166 (expression -> expression XNOR expression .)
    LAND            reduce using rule 166 (expression -> expression XNOR expression .)
    LOR             reduce using rule 166 (expression -> expression XNOR expression .)
    COND            reduce using rule 166 (expression -> expression XNOR expression .)
    RPAREN          reduce using rule 166 (expression -> expression XNOR expression .)
    LBRACE          reduce using rule 166 (expression -> expression XNOR expression .)
    RBRACE          reduce using rule 166 (expression -> expression XNOR expression .)
    COMMA           reduce using rule 166 (expression -> expression XNOR expression .)
    COLON           reduce using rule 166 (expression -> expression XNOR expression .)
    SEMICOLON       reduce using rule 166 (expression -> expression XNOR expression .)
    PLUSCOLON       reduce using rule 166 (expression -> expression XNOR expression .)
    MINUSCOLON      reduce using rule 166 (expression -> expression XNOR expression .)
    RBRACKET        reduce using rule 166 (expression -> expression XNOR expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259

  ! TIMES           [ reduce using rule 166 (expression -> expression XNOR expression .) ]
  ! POWER           [ reduce using rule 166 (expression -> expression XNOR expression .) ]
  ! DIVIDE          [ reduce using rule 166 (expression -> expression XNOR expression .) ]
  ! MOD             [ reduce using rule 166 (expression -> expression XNOR expression .) ]
  ! PLUS            [ reduce using rule 166 (expression -> expression XNOR expression .) ]
  ! MINUS           [ reduce using rule 166 (expression -> expression XNOR expression .) ]
  ! LSHIFT          [ reduce using rule 166 (expression -> expression XNOR expression .) ]
  ! RSHIFT          [ reduce using rule 166 (expression -> expression XNOR expression .) ]
  ! LSHIFTA         [ reduce using rule 166 (expression -> expression XNOR expression .) ]
  ! RSHIFTA         [ reduce using rule 166 (expression -> expression XNOR expression .) ]
  ! LT              [ reduce using rule 166 (expression -> expression XNOR expression .) ]
  ! GT              [ reduce using rule 166 (expression -> expression XNOR expression .) ]
  ! LE              [ reduce using rule 166 (expression -> expression XNOR expression .) ]
  ! GE              [ reduce using rule 166 (expression -> expression XNOR expression .) ]
  ! EQ              [ reduce using rule 166 (expression -> expression XNOR expression .) ]
  ! NE              [ reduce using rule 166 (expression -> expression XNOR expression .) ]
  ! EQL             [ reduce using rule 166 (expression -> expression XNOR expression .) ]
  ! NEL             [ reduce using rule 166 (expression -> expression XNOR expression .) ]
  ! AND             [ reduce using rule 166 (expression -> expression XNOR expression .) ]
  ! XOR             [ shift and go to state 260 ]
  ! XNOR            [ shift and go to state 261 ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 432

    (167) expression -> expression OR expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    OR              reduce using rule 167 (expression -> expression OR expression .)
    LAND            reduce using rule 167 (expression -> expression OR expression .)
    LOR             reduce using rule 167 (expression -> expression OR expression .)
    COND            reduce using rule 167 (expression -> expression OR expression .)
    RPAREN          reduce using rule 167 (expression -> expression OR expression .)
    LBRACE          reduce using rule 167 (expression -> expression OR expression .)
    RBRACE          reduce using rule 167 (expression -> expression OR expression .)
    COMMA           reduce using rule 167 (expression -> expression OR expression .)
    COLON           reduce using rule 167 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 167 (expression -> expression OR expression .)
    PLUSCOLON       reduce using rule 167 (expression -> expression OR expression .)
    MINUSCOLON      reduce using rule 167 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 167 (expression -> expression OR expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261

  ! TIMES           [ reduce using rule 167 (expression -> expression OR expression .) ]
  ! POWER           [ reduce using rule 167 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 167 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 167 (expression -> expression OR expression .) ]
  ! PLUS            [ reduce using rule 167 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 167 (expression -> expression OR expression .) ]
  ! LSHIFT          [ reduce using rule 167 (expression -> expression OR expression .) ]
  ! RSHIFT          [ reduce using rule 167 (expression -> expression OR expression .) ]
  ! LSHIFTA         [ reduce using rule 167 (expression -> expression OR expression .) ]
  ! RSHIFTA         [ reduce using rule 167 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 167 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 167 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 167 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 167 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 167 (expression -> expression OR expression .) ]
  ! NE              [ reduce using rule 167 (expression -> expression OR expression .) ]
  ! EQL             [ reduce using rule 167 (expression -> expression OR expression .) ]
  ! NEL             [ reduce using rule 167 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 167 (expression -> expression OR expression .) ]
  ! XOR             [ reduce using rule 167 (expression -> expression OR expression .) ]
  ! XNOR            [ reduce using rule 167 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 262 ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 433

    (168) expression -> expression LAND expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    LAND            reduce using rule 168 (expression -> expression LAND expression .)
    LOR             reduce using rule 168 (expression -> expression LAND expression .)
    COND            reduce using rule 168 (expression -> expression LAND expression .)
    RPAREN          reduce using rule 168 (expression -> expression LAND expression .)
    LBRACE          reduce using rule 168 (expression -> expression LAND expression .)
    RBRACE          reduce using rule 168 (expression -> expression LAND expression .)
    COMMA           reduce using rule 168 (expression -> expression LAND expression .)
    COLON           reduce using rule 168 (expression -> expression LAND expression .)
    SEMICOLON       reduce using rule 168 (expression -> expression LAND expression .)
    PLUSCOLON       reduce using rule 168 (expression -> expression LAND expression .)
    MINUSCOLON      reduce using rule 168 (expression -> expression LAND expression .)
    RBRACKET        reduce using rule 168 (expression -> expression LAND expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262

  ! TIMES           [ reduce using rule 168 (expression -> expression LAND expression .) ]
  ! POWER           [ reduce using rule 168 (expression -> expression LAND expression .) ]
  ! DIVIDE          [ reduce using rule 168 (expression -> expression LAND expression .) ]
  ! MOD             [ reduce using rule 168 (expression -> expression LAND expression .) ]
  ! PLUS            [ reduce using rule 168 (expression -> expression LAND expression .) ]
  ! MINUS           [ reduce using rule 168 (expression -> expression LAND expression .) ]
  ! LSHIFT          [ reduce using rule 168 (expression -> expression LAND expression .) ]
  ! RSHIFT          [ reduce using rule 168 (expression -> expression LAND expression .) ]
  ! LSHIFTA         [ reduce using rule 168 (expression -> expression LAND expression .) ]
  ! RSHIFTA         [ reduce using rule 168 (expression -> expression LAND expression .) ]
  ! LT              [ reduce using rule 168 (expression -> expression LAND expression .) ]
  ! GT              [ reduce using rule 168 (expression -> expression LAND expression .) ]
  ! LE              [ reduce using rule 168 (expression -> expression LAND expression .) ]
  ! GE              [ reduce using rule 168 (expression -> expression LAND expression .) ]
  ! EQ              [ reduce using rule 168 (expression -> expression LAND expression .) ]
  ! NE              [ reduce using rule 168 (expression -> expression LAND expression .) ]
  ! EQL             [ reduce using rule 168 (expression -> expression LAND expression .) ]
  ! NEL             [ reduce using rule 168 (expression -> expression LAND expression .) ]
  ! AND             [ reduce using rule 168 (expression -> expression LAND expression .) ]
  ! XOR             [ reduce using rule 168 (expression -> expression LAND expression .) ]
  ! XNOR            [ reduce using rule 168 (expression -> expression LAND expression .) ]
  ! OR              [ reduce using rule 168 (expression -> expression LAND expression .) ]
  ! LAND            [ shift and go to state 263 ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 434

    (169) expression -> expression LOR expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    LOR             reduce using rule 169 (expression -> expression LOR expression .)
    COND            reduce using rule 169 (expression -> expression LOR expression .)
    RPAREN          reduce using rule 169 (expression -> expression LOR expression .)
    LBRACE          reduce using rule 169 (expression -> expression LOR expression .)
    RBRACE          reduce using rule 169 (expression -> expression LOR expression .)
    COMMA           reduce using rule 169 (expression -> expression LOR expression .)
    COLON           reduce using rule 169 (expression -> expression LOR expression .)
    SEMICOLON       reduce using rule 169 (expression -> expression LOR expression .)
    PLUSCOLON       reduce using rule 169 (expression -> expression LOR expression .)
    MINUSCOLON      reduce using rule 169 (expression -> expression LOR expression .)
    RBRACKET        reduce using rule 169 (expression -> expression LOR expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263

  ! TIMES           [ reduce using rule 169 (expression -> expression LOR expression .) ]
  ! POWER           [ reduce using rule 169 (expression -> expression LOR expression .) ]
  ! DIVIDE          [ reduce using rule 169 (expression -> expression LOR expression .) ]
  ! MOD             [ reduce using rule 169 (expression -> expression LOR expression .) ]
  ! PLUS            [ reduce using rule 169 (expression -> expression LOR expression .) ]
  ! MINUS           [ reduce using rule 169 (expression -> expression LOR expression .) ]
  ! LSHIFT          [ reduce using rule 169 (expression -> expression LOR expression .) ]
  ! RSHIFT          [ reduce using rule 169 (expression -> expression LOR expression .) ]
  ! LSHIFTA         [ reduce using rule 169 (expression -> expression LOR expression .) ]
  ! RSHIFTA         [ reduce using rule 169 (expression -> expression LOR expression .) ]
  ! LT              [ reduce using rule 169 (expression -> expression LOR expression .) ]
  ! GT              [ reduce using rule 169 (expression -> expression LOR expression .) ]
  ! LE              [ reduce using rule 169 (expression -> expression LOR expression .) ]
  ! GE              [ reduce using rule 169 (expression -> expression LOR expression .) ]
  ! EQ              [ reduce using rule 169 (expression -> expression LOR expression .) ]
  ! NE              [ reduce using rule 169 (expression -> expression LOR expression .) ]
  ! EQL             [ reduce using rule 169 (expression -> expression LOR expression .) ]
  ! NEL             [ reduce using rule 169 (expression -> expression LOR expression .) ]
  ! AND             [ reduce using rule 169 (expression -> expression LOR expression .) ]
  ! XOR             [ reduce using rule 169 (expression -> expression LOR expression .) ]
  ! XNOR            [ reduce using rule 169 (expression -> expression LOR expression .) ]
  ! OR              [ reduce using rule 169 (expression -> expression LOR expression .) ]
  ! LAND            [ reduce using rule 169 (expression -> expression LOR expression .) ]
  ! LOR             [ shift and go to state 264 ]
  ! COND            [ shift and go to state 265 ]


state 435

    (170) expression -> expression COND expression . COLON expression
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    COLON           shift and go to state 552
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 436

    (187) partselect -> pointer LBRACKET expression . COLON expression RBRACKET
    (188) partselect -> pointer LBRACKET expression . PLUSCOLON expression RBRACKET
    (189) partselect -> pointer LBRACKET expression . MINUSCOLON expression RBRACKET
    (191) pointer -> pointer LBRACKET expression . RBRACKET
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    COLON           shift and go to state 553
    PLUSCOLON       shift and go to state 555
    MINUSCOLON      shift and go to state 556
    RBRACKET        shift and go to state 554
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 437

    (184) partselect -> identifier LBRACKET expression . COLON expression RBRACKET
    (185) partselect -> identifier LBRACKET expression . PLUSCOLON expression RBRACKET
    (186) partselect -> identifier LBRACKET expression . MINUSCOLON expression RBRACKET
    (190) pointer -> identifier LBRACKET expression . RBRACKET
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    COLON           shift and go to state 557
    PLUSCOLON       shift and go to state 559
    MINUSCOLON      shift and go to state 560
    RBRACKET        shift and go to state 558
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 438

    (385) functioncall -> identifier LPAREN func_args . RPAREN
    (386) func_args -> func_args . COMMA expression

    RPAREN          shift and go to state 561
    COMMA           shift and go to state 562


state 439

    (387) func_args -> expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RPAREN          reduce using rule 387 (func_args -> expression .)
    COMMA           reduce using rule 387 (func_args -> expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 440

    (388) func_args -> empty .

    RPAREN          reduce using rule 388 (func_args -> empty .)
    COMMA           reduce using rule 388 (func_args -> empty .)


state 441

    (180) concat -> LBRACE concatlist RBRACE .

    TIMES           reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    POWER           reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    DIVIDE          reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    MOD             reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    PLUS            reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    MINUS           reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    LSHIFT          reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    RSHIFT          reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    LSHIFTA         reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    RSHIFTA         reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    LT              reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    GT              reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    LE              reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    GE              reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    EQ              reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    NE              reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    EQL             reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    NEL             reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    AND             reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    XOR             reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    XNOR            reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    OR              reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    LAND            reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    LOR             reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    COND            reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    RPAREN          reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    LBRACE          reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    RBRACE          reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    COMMA           reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    COLON           reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    SEMICOLON       reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    PLUSCOLON       reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    MINUSCOLON      reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)
    RBRACKET        reduce using rule 180 (concat -> LBRACE concatlist RBRACE .)


state 442

    (181) concatlist -> concatlist COMMA . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 563
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 443

    (180) concat -> LBRACE . concatlist RBRACE
    (181) concatlist -> . concatlist COMMA expression
    (182) concatlist -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    concatlist                     shift and go to state 281
    expression                     shift and go to state 564
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 444

    (183) repeat -> LBRACE expression concat . RBRACE

    RBRACE          shift and go to state 565


state 445

    (362) systemcall -> DOLLER ID LPAREN . sysargs RPAREN
    (364) sysargs -> . sysargs COMMA sysarg
    (365) sysargs -> . sysarg
    (366) sysargs -> . empty
    (367) sysarg -> . expression
    (413) empty -> .
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    RPAREN          reduce using rule 413 (empty -> .)
    COMMA           reduce using rule 413 (empty -> .)
    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    sysargs                        shift and go to state 566
    sysarg                         shift and go to state 567
    empty                          shift and go to state 568
    expression                     shift and go to state 569
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 446

    (363) systemcall -> DOLLER SIGNED LPAREN . sysargs RPAREN
    (364) sysargs -> . sysargs COMMA sysarg
    (365) sysargs -> . sysarg
    (366) sysargs -> . empty
    (367) sysarg -> . expression
    (413) empty -> .
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    RPAREN          reduce using rule 413 (empty -> .)
    COMMA           reduce using rule 413 (empty -> .)
    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    sysargs                        shift and go to state 570
    sysarg                         shift and go to state 567
    empty                          shift and go to state 568
    expression                     shift and go to state 569
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 447

    (352) generate_if -> IF LPAREN cond . RPAREN gif_true_item ELSE gif_false_item
    (353) generate_if -> IF LPAREN cond . RPAREN gif_true_item

    RPAREN          shift and go to state 571


state 448

    (275) cond -> expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RPAREN          reduce using rule 275 (cond -> expression .)
    SEMICOLON       reduce using rule 275 (cond -> expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 449

    (358) generate_for -> FOR LPAREN forpre . forcond forpost RPAREN generate_forcontent
    (282) forcond -> . cond SEMICOLON
    (283) forcond -> . SEMICOLON
    (275) cond -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    SEMICOLON       shift and go to state 574
    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    forcond                        shift and go to state 572
    cond                           shift and go to state 573
    expression                     shift and go to state 448
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 450

    (280) forpre -> blocking_substitution .

    SEMICOLON       reduce using rule 280 (forpre -> blocking_substitution .)
    MINUS           reduce using rule 280 (forpre -> blocking_substitution .)
    PLUS            reduce using rule 280 (forpre -> blocking_substitution .)
    LNOT            reduce using rule 280 (forpre -> blocking_substitution .)
    NOT             reduce using rule 280 (forpre -> blocking_substitution .)
    AND             reduce using rule 280 (forpre -> blocking_substitution .)
    NAND            reduce using rule 280 (forpre -> blocking_substitution .)
    NOR             reduce using rule 280 (forpre -> blocking_substitution .)
    OR              reduce using rule 280 (forpre -> blocking_substitution .)
    XOR             reduce using rule 280 (forpre -> blocking_substitution .)
    XNOR            reduce using rule 280 (forpre -> blocking_substitution .)
    LPAREN          reduce using rule 280 (forpre -> blocking_substitution .)
    LBRACE          reduce using rule 280 (forpre -> blocking_substitution .)
    DOLLER          reduce using rule 280 (forpre -> blocking_substitution .)
    ID              reduce using rule 280 (forpre -> blocking_substitution .)
    INTNUMBER_DEC   reduce using rule 280 (forpre -> blocking_substitution .)
    SIGNED_INTNUMBER_DEC reduce using rule 280 (forpre -> blocking_substitution .)
    INTNUMBER_BIN   reduce using rule 280 (forpre -> blocking_substitution .)
    SIGNED_INTNUMBER_BIN reduce using rule 280 (forpre -> blocking_substitution .)
    INTNUMBER_OCT   reduce using rule 280 (forpre -> blocking_substitution .)
    SIGNED_INTNUMBER_OCT reduce using rule 280 (forpre -> blocking_substitution .)
    INTNUMBER_HEX   reduce using rule 280 (forpre -> blocking_substitution .)
    SIGNED_INTNUMBER_HEX reduce using rule 280 (forpre -> blocking_substitution .)
    FLOATNUMBER     reduce using rule 280 (forpre -> blocking_substitution .)
    STRING_LITERAL  reduce using rule 280 (forpre -> blocking_substitution .)


state 451

    (281) forpre -> SEMICOLON .

    SEMICOLON       reduce using rule 281 (forpre -> SEMICOLON .)
    MINUS           reduce using rule 281 (forpre -> SEMICOLON .)
    PLUS            reduce using rule 281 (forpre -> SEMICOLON .)
    LNOT            reduce using rule 281 (forpre -> SEMICOLON .)
    NOT             reduce using rule 281 (forpre -> SEMICOLON .)
    AND             reduce using rule 281 (forpre -> SEMICOLON .)
    NAND            reduce using rule 281 (forpre -> SEMICOLON .)
    NOR             reduce using rule 281 (forpre -> SEMICOLON .)
    OR              reduce using rule 281 (forpre -> SEMICOLON .)
    XOR             reduce using rule 281 (forpre -> SEMICOLON .)
    XNOR            reduce using rule 281 (forpre -> SEMICOLON .)
    LPAREN          reduce using rule 281 (forpre -> SEMICOLON .)
    LBRACE          reduce using rule 281 (forpre -> SEMICOLON .)
    DOLLER          reduce using rule 281 (forpre -> SEMICOLON .)
    ID              reduce using rule 281 (forpre -> SEMICOLON .)
    INTNUMBER_DEC   reduce using rule 281 (forpre -> SEMICOLON .)
    SIGNED_INTNUMBER_DEC reduce using rule 281 (forpre -> SEMICOLON .)
    INTNUMBER_BIN   reduce using rule 281 (forpre -> SEMICOLON .)
    SIGNED_INTNUMBER_BIN reduce using rule 281 (forpre -> SEMICOLON .)
    INTNUMBER_OCT   reduce using rule 281 (forpre -> SEMICOLON .)
    SIGNED_INTNUMBER_OCT reduce using rule 281 (forpre -> SEMICOLON .)
    INTNUMBER_HEX   reduce using rule 281 (forpre -> SEMICOLON .)
    SIGNED_INTNUMBER_HEX reduce using rule 281 (forpre -> SEMICOLON .)
    FLOATNUMBER     reduce using rule 281 (forpre -> SEMICOLON .)
    STRING_LITERAL  reduce using rule 281 (forpre -> SEMICOLON .)


state 452

    (246) blocking_substitution -> delays . lvalue EQUALS delays rvalue SEMICOLON
    (131) lvalue -> . lpartselect
    (132) lvalue -> . lpointer
    (133) lvalue -> . lconcat
    (134) lvalue -> . identifier
    (117) lpartselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (118) lpartselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (119) lpartselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (120) lpartselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (121) lpartselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (122) lpartselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (123) lpointer -> . pointer
    (124) lconcat -> . LBRACE lconcatlist RBRACE
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT

    LBRACE          shift and go to state 171
    ID              shift and go to state 88

    lvalue                         shift and go to state 575
    lpartselect                    shift and go to state 166
    lpointer                       shift and go to state 167
    lconcat                        shift and go to state 168
    identifier                     shift and go to state 169
    pointer                        shift and go to state 170
    scope                          shift and go to state 110

state 453

    (84) declnamelist -> declnamelist COMMA declname .

    SEMICOLON       reduce using rule 84 (declnamelist -> declnamelist COMMA declname .)
    COMMA           reduce using rule 84 (declnamelist -> declnamelist COMMA declname .)


state 454

    (86) declname -> ID .
    (87) declname -> ID . dimensions
    (58) dimensions -> . dimensions length
    (59) dimensions -> . length
    (57) length -> . LBRACKET expression COLON expression RBRACKET

    SEMICOLON       reduce using rule 86 (declname -> ID .)
    COMMA           reduce using rule 86 (declname -> ID .)
    LBRACKET        shift and go to state 299

    dimensions                     shift and go to state 297
    length                         shift and go to state 298

state 455

    (83) decl -> sigtypes width declnamelist SEMICOLON .

    ENDMODULE       reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    GENERATE        reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    INTEGER         reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    REAL            reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    PARAMETER       reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    LOCALPARAM      reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    GENVAR          reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    ASSIGN          reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    ALWAYS          reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    ALWAYS_FF       reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    ALWAYS_COMB     reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    INITIAL         reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    ID              reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    SENS_OR         reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    FUNCTION        reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    TASK            reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    LPAREN          reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    INPUT           reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    OUTPUT          reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    INOUT           reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    TRI             reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    REG             reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    LOGIC           reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    WIRE            reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    SIGNED          reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    SUPPLY0         reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    SUPPLY1         reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    ENDGENERATE     reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    IF              reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    FOR             reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    WHILE           reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    CASE            reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    CASEX           reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    CASEZ           reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    BEGIN           reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    DELAY           reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    LBRACE          reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    END             reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    UNIQUE          reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    WAIT            reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    FOREVER         reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    FORK            reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    AT              reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    DOLLER          reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    DISABLE         reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    SEMICOLON       reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)
    ELSE            reduce using rule 83 (decl -> sigtypes width declnamelist SEMICOLON .)


state 456

    (89) declassign -> sigtypes width declassign_element SEMICOLON .

    ENDMODULE       reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    GENERATE        reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    INTEGER         reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    REAL            reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    PARAMETER       reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    LOCALPARAM      reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    GENVAR          reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    ASSIGN          reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    ALWAYS          reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    ALWAYS_FF       reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    ALWAYS_COMB     reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    INITIAL         reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    ID              reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    SENS_OR         reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    FUNCTION        reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    TASK            reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    LPAREN          reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    INPUT           reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    OUTPUT          reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    INOUT           reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    TRI             reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    REG             reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    LOGIC           reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    WIRE            reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    SIGNED          reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    SUPPLY0         reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    SUPPLY1         reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    ENDGENERATE     reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    IF              reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    FOR             reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    ELSE            reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)
    END             reduce using rule 89 (declassign -> sigtypes width declassign_element SEMICOLON .)


state 457

    (56) width -> LBRACKET expression COLON . expression RBRACKET
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 576
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 458

    (90) declassign_element -> ID EQUALS rvalue .

    SEMICOLON       reduce using rule 90 (declassign_element -> ID EQUALS rvalue .)


state 459

    (135) rvalue -> expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    SEMICOLON       reduce using rule 135 (rvalue -> expression .)
    COMMA           reduce using rule 135 (rvalue -> expression .)
    RPAREN          reduce using rule 135 (rvalue -> expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 460

    (58) dimensions -> dimensions length .

    LBRACKET        reduce using rule 58 (dimensions -> dimensions length .)
    SEMICOLON       reduce using rule 58 (dimensions -> dimensions length .)
    COMMA           reduce using rule 58 (dimensions -> dimensions length .)
    RPAREN          reduce using rule 58 (dimensions -> dimensions length .)


state 461

    (57) length -> LBRACKET expression . COLON expression RBRACKET
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    COLON           shift and go to state 577
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 462

    (91) declassign_element -> delays ID EQUALS . delays rvalue
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (413) empty -> .

    DELAY           shift and go to state 142
    MINUS           reduce using rule 413 (empty -> .)
    PLUS            reduce using rule 413 (empty -> .)
    LNOT            reduce using rule 413 (empty -> .)
    NOT             reduce using rule 413 (empty -> .)
    AND             reduce using rule 413 (empty -> .)
    NAND            reduce using rule 413 (empty -> .)
    NOR             reduce using rule 413 (empty -> .)
    OR              reduce using rule 413 (empty -> .)
    XOR             reduce using rule 413 (empty -> .)
    XNOR            reduce using rule 413 (empty -> .)
    LPAREN          reduce using rule 413 (empty -> .)
    LBRACE          reduce using rule 413 (empty -> .)
    DOLLER          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    INTNUMBER_DEC   reduce using rule 413 (empty -> .)
    SIGNED_INTNUMBER_DEC reduce using rule 413 (empty -> .)
    INTNUMBER_BIN   reduce using rule 413 (empty -> .)
    SIGNED_INTNUMBER_BIN reduce using rule 413 (empty -> .)
    INTNUMBER_OCT   reduce using rule 413 (empty -> .)
    SIGNED_INTNUMBER_OCT reduce using rule 413 (empty -> .)
    INTNUMBER_HEX   reduce using rule 413 (empty -> .)
    SIGNED_INTNUMBER_HEX reduce using rule 413 (empty -> .)
    FLOATNUMBER     reduce using rule 413 (empty -> .)
    STRING_LITERAL  reduce using rule 413 (empty -> .)

    delays                         shift and go to state 578
    empty                          shift and go to state 143

state 463

    (249) delays -> DELAY LPAREN expression . RPAREN
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RPAREN          shift and go to state 579
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 464

    (190) pointer -> identifier LBRACKET . expression RBRACKET
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    identifier                     shift and go to state 106
    expression                     shift and go to state 580
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 465

    (191) pointer -> pointer LBRACKET . expression RBRACKET
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    pointer                        shift and go to state 103
    expression                     shift and go to state 581
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 466

    (94) integernamelist -> integernamelist COMMA integername .

    SEMICOLON       reduce using rule 94 (integernamelist -> integernamelist COMMA integername .)
    COMMA           reduce using rule 94 (integernamelist -> integernamelist COMMA integername .)


state 467

    (93) integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .

    ENDMODULE       reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    GENERATE        reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    INTEGER         reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    REAL            reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    PARAMETER       reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    LOCALPARAM      reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    GENVAR          reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    ASSIGN          reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    ALWAYS          reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    ALWAYS_FF       reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    ALWAYS_COMB     reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    INITIAL         reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    ID              reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    SENS_OR         reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    FUNCTION        reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    TASK            reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    LPAREN          reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    INPUT           reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    OUTPUT          reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    INOUT           reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    TRI             reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    REG             reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    LOGIC           reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    WIRE            reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    SIGNED          reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    SUPPLY0         reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    SUPPLY1         reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    ENDGENERATE     reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    IF              reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    FOR             reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    WHILE           reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    CASE            reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    CASEX           reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    CASEZ           reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    BEGIN           reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    DELAY           reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    LBRACE          reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    END             reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    UNIQUE          reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    WAIT            reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    FOREVER         reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    FORK            reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    AT              reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    DOLLER          reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    DISABLE         reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    SEMICOLON       reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    ELSE            reduce using rule 93 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)


state 468

    (96) integername -> ID EQUALS rvalue .

    SEMICOLON       reduce using rule 96 (integername -> ID EQUALS rvalue .)
    COMMA           reduce using rule 96 (integername -> ID EQUALS rvalue .)


state 469

    (99) realnamelist -> realnamelist COMMA realname .

    SEMICOLON       reduce using rule 99 (realnamelist -> realnamelist COMMA realname .)
    COMMA           reduce using rule 99 (realnamelist -> realnamelist COMMA realname .)


state 470

    (112) param_substitution_list -> param_substitution_list COMMA param_substitution .

    SEMICOLON       reduce using rule 112 (param_substitution_list -> param_substitution_list COMMA param_substitution .)
    COMMA           reduce using rule 112 (param_substitution_list -> param_substitution_list COMMA param_substitution .)
    RPAREN          reduce using rule 112 (param_substitution_list -> param_substitution_list COMMA param_substitution .)


state 471

    (103) parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .

    ENDMODULE       reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    GENERATE        reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    INTEGER         reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    REAL            reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    PARAMETER       reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    LOCALPARAM      reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    GENVAR          reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    ASSIGN          reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    ALWAYS          reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    ALWAYS_FF       reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    ALWAYS_COMB     reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    INITIAL         reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    ID              reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    SENS_OR         reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    FUNCTION        reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    TASK            reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    LPAREN          reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    INPUT           reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    OUTPUT          reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    INOUT           reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    TRI             reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    REG             reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    LOGIC           reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    WIRE            reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    SIGNED          reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    SUPPLY0         reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    SUPPLY1         reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    ENDGENERATE     reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    IF              reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    FOR             reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    END             reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    CASE            reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    CASEX           reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    CASEZ           reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    UNIQUE          reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    WHILE           reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    WAIT            reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    FOREVER         reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    BEGIN           reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    FORK            reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    DELAY           reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    AT              reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    DOLLER          reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    DISABLE         reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    LBRACE          reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    SEMICOLON       reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    ELSE            reduce using rule 103 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)


state 472

    (105) parameterdecl -> PARAMETER SIGNED width param_substitution_list . SEMICOLON
    (112) param_substitution_list -> param_substitution_list . COMMA param_substitution

    SEMICOLON       shift and go to state 582
    COMMA           shift and go to state 313


state 473

    (104) parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .

    ENDMODULE       reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    GENERATE        reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    INTEGER         reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    REAL            reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    PARAMETER       reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    LOCALPARAM      reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    GENVAR          reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    ASSIGN          reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    ALWAYS          reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    ALWAYS_FF       reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    ALWAYS_COMB     reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    INITIAL         reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    ID              reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    SENS_OR         reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    FUNCTION        reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    TASK            reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    LPAREN          reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    INPUT           reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    OUTPUT          reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    INOUT           reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    TRI             reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    REG             reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    LOGIC           reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    WIRE            reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    SIGNED          reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    SUPPLY0         reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    SUPPLY1         reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    ENDGENERATE     reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    IF              reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    FOR             reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    END             reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    CASE            reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    CASEX           reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    CASEZ           reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    UNIQUE          reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    WHILE           reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    WAIT            reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    FOREVER         reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    BEGIN           reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    FORK            reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    DELAY           reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    AT              reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    DOLLER          reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    DISABLE         reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    LBRACE          reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    SEMICOLON       reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    ELSE            reduce using rule 104 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)


state 474

    (106) parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .

    ENDMODULE       reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    GENERATE        reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    INTEGER         reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    REAL            reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    PARAMETER       reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    LOCALPARAM      reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    GENVAR          reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    ASSIGN          reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    ALWAYS          reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    ALWAYS_FF       reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    ALWAYS_COMB     reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    INITIAL         reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    ID              reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    SENS_OR         reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    FUNCTION        reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    TASK            reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    LPAREN          reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    INPUT           reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    OUTPUT          reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    INOUT           reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    TRI             reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    REG             reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    LOGIC           reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    WIRE            reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    SIGNED          reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    SUPPLY0         reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    SUPPLY1         reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    ENDGENERATE     reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    IF              reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    FOR             reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    END             reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    CASE            reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    CASEX           reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    CASEZ           reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    UNIQUE          reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    WHILE           reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    WAIT            reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    FOREVER         reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    BEGIN           reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    FORK            reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    DELAY           reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    AT              reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    DOLLER          reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    DISABLE         reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    LBRACE          reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    SEMICOLON       reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    ELSE            reduce using rule 106 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)


state 475

    (114) param_substitution -> ID EQUALS rvalue .

    SEMICOLON       reduce using rule 114 (param_substitution -> ID EQUALS rvalue .)
    COMMA           reduce using rule 114 (param_substitution -> ID EQUALS rvalue .)
    RPAREN          reduce using rule 114 (param_substitution -> ID EQUALS rvalue .)


state 476

    (108) localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .

    ENDMODULE       reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    GENERATE        reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    INTEGER         reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    REAL            reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    PARAMETER       reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    LOCALPARAM      reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    GENVAR          reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    ASSIGN          reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    ALWAYS          reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    ALWAYS_FF       reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    ALWAYS_COMB     reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    INITIAL         reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    ID              reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    SENS_OR         reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    FUNCTION        reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    TASK            reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    LPAREN          reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    INPUT           reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    OUTPUT          reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    INOUT           reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    TRI             reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    REG             reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    LOGIC           reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    WIRE            reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    SIGNED          reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    SUPPLY0         reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    SUPPLY1         reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    ENDGENERATE     reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    IF              reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    FOR             reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    END             reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    CASE            reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    CASEX           reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    CASEZ           reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    UNIQUE          reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    WHILE           reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    WAIT            reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    FOREVER         reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    BEGIN           reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    FORK            reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    DELAY           reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    AT              reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    DOLLER          reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    DISABLE         reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    LBRACE          reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    SEMICOLON       reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    ELSE            reduce using rule 108 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)


state 477

    (110) localparamdecl -> LOCALPARAM SIGNED width param_substitution_list . SEMICOLON
    (112) param_substitution_list -> param_substitution_list . COMMA param_substitution

    SEMICOLON       shift and go to state 583
    COMMA           shift and go to state 313


state 478

    (109) localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .

    ENDMODULE       reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    GENERATE        reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    INTEGER         reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    REAL            reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    PARAMETER       reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    LOCALPARAM      reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    GENVAR          reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    ASSIGN          reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    ALWAYS          reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    ALWAYS_FF       reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    ALWAYS_COMB     reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    INITIAL         reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    ID              reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    SENS_OR         reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    FUNCTION        reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    TASK            reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    LPAREN          reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    INPUT           reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    OUTPUT          reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    INOUT           reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    TRI             reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    REG             reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    LOGIC           reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    WIRE            reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    SIGNED          reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    SUPPLY0         reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    SUPPLY1         reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    ENDGENERATE     reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    IF              reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    FOR             reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    END             reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    CASE            reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    CASEX           reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    CASEZ           reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    UNIQUE          reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    WHILE           reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    WAIT            reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    FOREVER         reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    BEGIN           reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    FORK            reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    DELAY           reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    AT              reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    DOLLER          reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    DISABLE         reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    LBRACE          reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    SEMICOLON       reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    ELSE            reduce using rule 109 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)


state 479

    (111) localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .

    ENDMODULE       reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    GENERATE        reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    INTEGER         reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    REAL            reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    PARAMETER       reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    LOCALPARAM      reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    GENVAR          reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    ASSIGN          reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    ALWAYS          reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    ALWAYS_FF       reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    ALWAYS_COMB     reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    INITIAL         reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    ID              reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    SENS_OR         reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    FUNCTION        reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    TASK            reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    LPAREN          reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    INPUT           reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    OUTPUT          reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    INOUT           reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    TRI             reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    REG             reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    LOGIC           reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    WIRE            reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    SIGNED          reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    SUPPLY0         reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    SUPPLY1         reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    ENDGENERATE     reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    IF              reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    FOR             reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    END             reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    CASE            reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    CASEX           reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    CASEZ           reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    UNIQUE          reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    WHILE           reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    WAIT            reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    FOREVER         reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    BEGIN           reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    FORK            reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    DELAY           reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    AT              reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    DOLLER          reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    DISABLE         reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    LBRACE          reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    SEMICOLON       reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    ELSE            reduce using rule 111 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)


state 480

    (340) genvarlist -> genvarlist COMMA genvar .

    SEMICOLON       reduce using rule 340 (genvarlist -> genvarlist COMMA genvar .)
    COMMA           reduce using rule 340 (genvarlist -> genvarlist COMMA genvar .)


state 481

    (115) assignment -> ASSIGN lvalue EQUALS rvalue . SEMICOLON

    SEMICOLON       shift and go to state 584


state 482

    (116) assignment -> ASSIGN delays lvalue EQUALS . delays rvalue SEMICOLON
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (413) empty -> .

    DELAY           shift and go to state 142
    MINUS           reduce using rule 413 (empty -> .)
    PLUS            reduce using rule 413 (empty -> .)
    LNOT            reduce using rule 413 (empty -> .)
    NOT             reduce using rule 413 (empty -> .)
    AND             reduce using rule 413 (empty -> .)
    NAND            reduce using rule 413 (empty -> .)
    NOR             reduce using rule 413 (empty -> .)
    OR              reduce using rule 413 (empty -> .)
    XOR             reduce using rule 413 (empty -> .)
    XNOR            reduce using rule 413 (empty -> .)
    LPAREN          reduce using rule 413 (empty -> .)
    LBRACE          reduce using rule 413 (empty -> .)
    DOLLER          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    INTNUMBER_DEC   reduce using rule 413 (empty -> .)
    SIGNED_INTNUMBER_DEC reduce using rule 413 (empty -> .)
    INTNUMBER_BIN   reduce using rule 413 (empty -> .)
    SIGNED_INTNUMBER_BIN reduce using rule 413 (empty -> .)
    INTNUMBER_OCT   reduce using rule 413 (empty -> .)
    SIGNED_INTNUMBER_OCT reduce using rule 413 (empty -> .)
    INTNUMBER_HEX   reduce using rule 413 (empty -> .)
    SIGNED_INTNUMBER_HEX reduce using rule 413 (empty -> .)
    FLOATNUMBER     reduce using rule 413 (empty -> .)
    STRING_LITERAL  reduce using rule 413 (empty -> .)

    delays                         shift and go to state 585
    empty                          shift and go to state 143

state 483

    (120) lpartselect -> identifier LBRACKET expression . COLON expression RBRACKET
    (121) lpartselect -> identifier LBRACKET expression . PLUSCOLON expression RBRACKET
    (122) lpartselect -> identifier LBRACKET expression . MINUSCOLON expression RBRACKET
    (190) pointer -> identifier LBRACKET expression . RBRACKET
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    COLON           shift and go to state 586
    PLUSCOLON       shift and go to state 587
    MINUSCOLON      shift and go to state 588
    RBRACKET        shift and go to state 558
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 484

    (117) lpartselect -> pointer LBRACKET expression . COLON expression RBRACKET
    (118) lpartselect -> pointer LBRACKET expression . PLUSCOLON expression RBRACKET
    (119) lpartselect -> pointer LBRACKET expression . MINUSCOLON expression RBRACKET
    (191) pointer -> pointer LBRACKET expression . RBRACKET
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    COLON           shift and go to state 589
    PLUSCOLON       shift and go to state 590
    MINUSCOLON      shift and go to state 591
    RBRACKET        shift and go to state 554
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 485

    (124) lconcat -> LBRACE lconcatlist RBRACE .

    EQUALS          reduce using rule 124 (lconcat -> LBRACE lconcatlist RBRACE .)
    RBRACE          reduce using rule 124 (lconcat -> LBRACE lconcatlist RBRACE .)
    COMMA           reduce using rule 124 (lconcat -> LBRACE lconcatlist RBRACE .)
    LE              reduce using rule 124 (lconcat -> LBRACE lconcatlist RBRACE .)


state 486

    (125) lconcatlist -> lconcatlist COMMA . lconcat_one
    (127) lconcat_one -> . identifier
    (128) lconcat_one -> . lpartselect
    (129) lconcat_one -> . lpointer
    (130) lconcat_one -> . lconcat
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (117) lpartselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (118) lpartselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (119) lpartselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (120) lpartselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (121) lpartselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (122) lpartselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (123) lpointer -> . pointer
    (124) lconcat -> . LBRACE lconcatlist RBRACE
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET

    ID              shift and go to state 88
    LBRACE          shift and go to state 171

    lconcat_one                    shift and go to state 592
    identifier                     shift and go to state 332
    lpartselect                    shift and go to state 333
    lpointer                       shift and go to state 334
    lconcat                        shift and go to state 335
    scope                          shift and go to state 110
    pointer                        shift and go to state 336

state 487

    (209) senslist -> AT LPAREN edgesigs . RPAREN
    (214) edgesigs -> edgesigs . SENS_OR edgesig
    (215) edgesigs -> edgesigs . COMMA edgesig

    RPAREN          shift and go to state 593
    SENS_OR         shift and go to state 594
    COMMA           shift and go to state 595


state 488

    (219) senslist -> AT LPAREN levelsigs . RPAREN
    (224) levelsigs -> levelsigs . SENS_OR levelsig
    (225) levelsigs -> levelsigs . COMMA levelsig

    RPAREN          shift and go to state 596
    SENS_OR         shift and go to state 597
    COMMA           shift and go to state 598


state 489

    (228) senslist -> AT LPAREN TIMES . RPAREN

    RPAREN          shift and go to state 599


state 490

    (216) edgesigs -> edgesig .

    RPAREN          reduce using rule 216 (edgesigs -> edgesig .)
    SENS_OR         reduce using rule 216 (edgesigs -> edgesig .)
    COMMA           reduce using rule 216 (edgesigs -> edgesig .)


state 491

    (226) levelsigs -> levelsig .

    RPAREN          reduce using rule 226 (levelsigs -> levelsig .)
    SENS_OR         reduce using rule 226 (levelsigs -> levelsig .)
    COMMA           reduce using rule 226 (levelsigs -> levelsig .)


state 492

    (210) edgesig -> POSEDGE . edgesig_base
    (212) edgesig_base -> . identifier
    (213) edgesig_base -> . pointer
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT

    ID              shift and go to state 88

    edgesig_base                   shift and go to state 600
    identifier                     shift and go to state 601
    pointer                        shift and go to state 602
    scope                          shift and go to state 110

state 493

    (211) edgesig -> NEGEDGE . edgesig_base
    (212) edgesig_base -> . identifier
    (213) edgesig_base -> . pointer
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT

    ID              shift and go to state 88

    edgesig_base                   shift and go to state 603
    identifier                     shift and go to state 601
    pointer                        shift and go to state 602
    scope                          shift and go to state 110

state 494

    (190) pointer -> identifier LBRACKET . expression RBRACKET
    (184) partselect -> identifier LBRACKET . expression COLON expression RBRACKET
    (185) partselect -> identifier LBRACKET . expression PLUSCOLON expression RBRACKET
    (186) partselect -> identifier LBRACKET . expression MINUSCOLON expression RBRACKET
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    identifier                     shift and go to state 106
    expression                     shift and go to state 604
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 495

    (191) pointer -> pointer LBRACKET . expression RBRACKET
    (187) partselect -> pointer LBRACKET . expression COLON expression RBRACKET
    (188) partselect -> pointer LBRACKET . expression PLUSCOLON expression RBRACKET
    (189) partselect -> pointer LBRACKET . expression MINUSCOLON expression RBRACKET
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    pointer                        shift and go to state 103
    expression                     shift and go to state 605
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 496

    (271) if_statement -> IF LPAREN cond . RPAREN true_statement ELSE else_statement
    (272) if_statement -> IF LPAREN cond . RPAREN true_statement

    RPAREN          shift and go to state 606


state 497

    (273) if_statement -> delays IF LPAREN . cond RPAREN true_statement ELSE else_statement
    (274) if_statement -> delays IF LPAREN . cond RPAREN true_statement
    (275) cond -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    cond                           shift and go to state 607
    expression                     shift and go to state 448
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 498

    (246) blocking_substitution -> delays lvalue EQUALS . delays rvalue SEMICOLON
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (413) empty -> .

    DELAY           shift and go to state 142
    MINUS           reduce using rule 413 (empty -> .)
    PLUS            reduce using rule 413 (empty -> .)
    LNOT            reduce using rule 413 (empty -> .)
    NOT             reduce using rule 413 (empty -> .)
    AND             reduce using rule 413 (empty -> .)
    NAND            reduce using rule 413 (empty -> .)
    NOR             reduce using rule 413 (empty -> .)
    OR              reduce using rule 413 (empty -> .)
    XOR             reduce using rule 413 (empty -> .)
    XNOR            reduce using rule 413 (empty -> .)
    LPAREN          reduce using rule 413 (empty -> .)
    LBRACE          reduce using rule 413 (empty -> .)
    DOLLER          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    INTNUMBER_DEC   reduce using rule 413 (empty -> .)
    SIGNED_INTNUMBER_DEC reduce using rule 413 (empty -> .)
    INTNUMBER_BIN   reduce using rule 413 (empty -> .)
    SIGNED_INTNUMBER_BIN reduce using rule 413 (empty -> .)
    INTNUMBER_OCT   reduce using rule 413 (empty -> .)
    SIGNED_INTNUMBER_OCT reduce using rule 413 (empty -> .)
    INTNUMBER_HEX   reduce using rule 413 (empty -> .)
    SIGNED_INTNUMBER_HEX reduce using rule 413 (empty -> .)
    FLOATNUMBER     reduce using rule 413 (empty -> .)
    STRING_LITERAL  reduce using rule 413 (empty -> .)

    delays                         shift and go to state 608
    empty                          shift and go to state 143

state 499

    (248) nonblocking_substitution -> delays lvalue LE . delays rvalue SEMICOLON
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (413) empty -> .

    DELAY           shift and go to state 142
    MINUS           reduce using rule 413 (empty -> .)
    PLUS            reduce using rule 413 (empty -> .)
    LNOT            reduce using rule 413 (empty -> .)
    NOT             reduce using rule 413 (empty -> .)
    AND             reduce using rule 413 (empty -> .)
    NAND            reduce using rule 413 (empty -> .)
    NOR             reduce using rule 413 (empty -> .)
    OR              reduce using rule 413 (empty -> .)
    XOR             reduce using rule 413 (empty -> .)
    XNOR            reduce using rule 413 (empty -> .)
    LPAREN          reduce using rule 413 (empty -> .)
    LBRACE          reduce using rule 413 (empty -> .)
    DOLLER          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    INTNUMBER_DEC   reduce using rule 413 (empty -> .)
    SIGNED_INTNUMBER_DEC reduce using rule 413 (empty -> .)
    INTNUMBER_BIN   reduce using rule 413 (empty -> .)
    SIGNED_INTNUMBER_BIN reduce using rule 413 (empty -> .)
    INTNUMBER_OCT   reduce using rule 413 (empty -> .)
    SIGNED_INTNUMBER_OCT reduce using rule 413 (empty -> .)
    INTNUMBER_HEX   reduce using rule 413 (empty -> .)
    SIGNED_INTNUMBER_HEX reduce using rule 413 (empty -> .)
    FLOATNUMBER     reduce using rule 413 (empty -> .)
    STRING_LITERAL  reduce using rule 413 (empty -> .)

    delays                         shift and go to state 609
    empty                          shift and go to state 143

state 500

    (289) case_statement -> CASE LPAREN case_comp . RPAREN casecontent_statements ENDCASE

    RPAREN          shift and go to state 610


state 501

    (293) case_comp -> expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RPAREN          reduce using rule 293 (case_comp -> expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 502

    (290) casex_statement -> CASEX LPAREN case_comp . RPAREN casecontent_statements ENDCASE

    RPAREN          shift and go to state 611


state 503

    (291) casez_statement -> CASEZ LPAREN case_comp . RPAREN casecontent_statements ENDCASE

    RPAREN          shift and go to state 612


state 504

    (292) unique_case_statement -> UNIQUE CASE LPAREN . case_comp RPAREN casecontent_statements ENDCASE
    (293) case_comp -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    case_comp                      shift and go to state 613
    expression                     shift and go to state 501
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 505

    (279) for_statement -> FOR LPAREN forpre . forcond forpost RPAREN forcontent_statement
    (282) forcond -> . cond SEMICOLON
    (283) forcond -> . SEMICOLON
    (275) cond -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    SEMICOLON       shift and go to state 574
    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    forcond                        shift and go to state 614
    cond                           shift and go to state 573
    expression                     shift and go to state 448
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 506

    (287) while_statement -> WHILE LPAREN cond . RPAREN whilecontent_statement

    RPAREN          shift and go to state 615


state 507

    (303) wait_statement -> WAIT LPAREN cond . RPAREN waitcontent_statement

    RPAREN          shift and go to state 616


state 508

    (254) block -> BEGIN block_statements END .

    ENDMODULE       reduce using rule 254 (block -> BEGIN block_statements END .)
    GENERATE        reduce using rule 254 (block -> BEGIN block_statements END .)
    INTEGER         reduce using rule 254 (block -> BEGIN block_statements END .)
    REAL            reduce using rule 254 (block -> BEGIN block_statements END .)
    PARAMETER       reduce using rule 254 (block -> BEGIN block_statements END .)
    LOCALPARAM      reduce using rule 254 (block -> BEGIN block_statements END .)
    GENVAR          reduce using rule 254 (block -> BEGIN block_statements END .)
    ASSIGN          reduce using rule 254 (block -> BEGIN block_statements END .)
    ALWAYS          reduce using rule 254 (block -> BEGIN block_statements END .)
    ALWAYS_FF       reduce using rule 254 (block -> BEGIN block_statements END .)
    ALWAYS_COMB     reduce using rule 254 (block -> BEGIN block_statements END .)
    ALWAYS_LATCH    reduce using rule 254 (block -> BEGIN block_statements END .)
    INITIAL         reduce using rule 254 (block -> BEGIN block_statements END .)
    ID              reduce using rule 254 (block -> BEGIN block_statements END .)
    SENS_OR         reduce using rule 254 (block -> BEGIN block_statements END .)
    FUNCTION        reduce using rule 254 (block -> BEGIN block_statements END .)
    TASK            reduce using rule 254 (block -> BEGIN block_statements END .)
    LPAREN          reduce using rule 254 (block -> BEGIN block_statements END .)
    INPUT           reduce using rule 254 (block -> BEGIN block_statements END .)
    OUTPUT          reduce using rule 254 (block -> BEGIN block_statements END .)
    INOUT           reduce using rule 254 (block -> BEGIN block_statements END .)
    TRI             reduce using rule 254 (block -> BEGIN block_statements END .)
    REG             reduce using rule 254 (block -> BEGIN block_statements END .)
    LOGIC           reduce using rule 254 (block -> BEGIN block_statements END .)
    WIRE            reduce using rule 254 (block -> BEGIN block_statements END .)
    SIGNED          reduce using rule 254 (block -> BEGIN block_statements END .)
    SUPPLY0         reduce using rule 254 (block -> BEGIN block_statements END .)
    SUPPLY1         reduce using rule 254 (block -> BEGIN block_statements END .)
    ENDGENERATE     reduce using rule 254 (block -> BEGIN block_statements END .)
    IF              reduce using rule 254 (block -> BEGIN block_statements END .)
    FOR             reduce using rule 254 (block -> BEGIN block_statements END .)
    ELSE            reduce using rule 254 (block -> BEGIN block_statements END .)
    END             reduce using rule 254 (block -> BEGIN block_statements END .)
    CASE            reduce using rule 254 (block -> BEGIN block_statements END .)
    CASEX           reduce using rule 254 (block -> BEGIN block_statements END .)
    CASEZ           reduce using rule 254 (block -> BEGIN block_statements END .)
    UNIQUE          reduce using rule 254 (block -> BEGIN block_statements END .)
    WHILE           reduce using rule 254 (block -> BEGIN block_statements END .)
    WAIT            reduce using rule 254 (block -> BEGIN block_statements END .)
    FOREVER         reduce using rule 254 (block -> BEGIN block_statements END .)
    BEGIN           reduce using rule 254 (block -> BEGIN block_statements END .)
    FORK            reduce using rule 254 (block -> BEGIN block_statements END .)
    DELAY           reduce using rule 254 (block -> BEGIN block_statements END .)
    AT              reduce using rule 254 (block -> BEGIN block_statements END .)
    DOLLER          reduce using rule 254 (block -> BEGIN block_statements END .)
    DISABLE         reduce using rule 254 (block -> BEGIN block_statements END .)
    LBRACE          reduce using rule 254 (block -> BEGIN block_statements END .)
    SEMICOLON       reduce using rule 254 (block -> BEGIN block_statements END .)
    JOIN            reduce using rule 254 (block -> BEGIN block_statements END .)
    ENDFUNCTION     reduce using rule 254 (block -> BEGIN block_statements END .)
    ENDTASK         reduce using rule 254 (block -> BEGIN block_statements END .)
    ENDCASE         reduce using rule 254 (block -> BEGIN block_statements END .)
    DEFAULT         reduce using rule 254 (block -> BEGIN block_statements END .)
    MINUS           reduce using rule 254 (block -> BEGIN block_statements END .)
    PLUS            reduce using rule 254 (block -> BEGIN block_statements END .)
    LNOT            reduce using rule 254 (block -> BEGIN block_statements END .)
    NOT             reduce using rule 254 (block -> BEGIN block_statements END .)
    AND             reduce using rule 254 (block -> BEGIN block_statements END .)
    NAND            reduce using rule 254 (block -> BEGIN block_statements END .)
    NOR             reduce using rule 254 (block -> BEGIN block_statements END .)
    OR              reduce using rule 254 (block -> BEGIN block_statements END .)
    XOR             reduce using rule 254 (block -> BEGIN block_statements END .)
    XNOR            reduce using rule 254 (block -> BEGIN block_statements END .)
    INTNUMBER_DEC   reduce using rule 254 (block -> BEGIN block_statements END .)
    SIGNED_INTNUMBER_DEC reduce using rule 254 (block -> BEGIN block_statements END .)
    INTNUMBER_BIN   reduce using rule 254 (block -> BEGIN block_statements END .)
    SIGNED_INTNUMBER_BIN reduce using rule 254 (block -> BEGIN block_statements END .)
    INTNUMBER_OCT   reduce using rule 254 (block -> BEGIN block_statements END .)
    SIGNED_INTNUMBER_OCT reduce using rule 254 (block -> BEGIN block_statements END .)
    INTNUMBER_HEX   reduce using rule 254 (block -> BEGIN block_statements END .)
    SIGNED_INTNUMBER_HEX reduce using rule 254 (block -> BEGIN block_statements END .)
    FLOATNUMBER     reduce using rule 254 (block -> BEGIN block_statements END .)
    STRING_LITERAL  reduce using rule 254 (block -> BEGIN block_statements END .)


state 509

    (256) block_statements -> block_statements block_statement .

    END             reduce using rule 256 (block_statements -> block_statements block_statement .)
    IF              reduce using rule 256 (block_statements -> block_statements block_statement .)
    CASE            reduce using rule 256 (block_statements -> block_statements block_statement .)
    CASEX           reduce using rule 256 (block_statements -> block_statements block_statement .)
    CASEZ           reduce using rule 256 (block_statements -> block_statements block_statement .)
    UNIQUE          reduce using rule 256 (block_statements -> block_statements block_statement .)
    FOR             reduce using rule 256 (block_statements -> block_statements block_statement .)
    WHILE           reduce using rule 256 (block_statements -> block_statements block_statement .)
    WAIT            reduce using rule 256 (block_statements -> block_statements block_statement .)
    FOREVER         reduce using rule 256 (block_statements -> block_statements block_statement .)
    BEGIN           reduce using rule 256 (block_statements -> block_statements block_statement .)
    FORK            reduce using rule 256 (block_statements -> block_statements block_statement .)
    DELAY           reduce using rule 256 (block_statements -> block_statements block_statement .)
    AT              reduce using rule 256 (block_statements -> block_statements block_statement .)
    DOLLER          reduce using rule 256 (block_statements -> block_statements block_statement .)
    DISABLE         reduce using rule 256 (block_statements -> block_statements block_statement .)
    LBRACE          reduce using rule 256 (block_statements -> block_statements block_statement .)
    ID              reduce using rule 256 (block_statements -> block_statements block_statement .)
    SEMICOLON       reduce using rule 256 (block_statements -> block_statements block_statement .)
    JOIN            reduce using rule 256 (block_statements -> block_statements block_statement .)


state 510

    (259) namedblock -> BEGIN COLON ID . namedblock_statements END
    (260) namedblock -> BEGIN COLON ID . END
    (261) namedblock_statements -> . namedblock_statements namedblock_statement
    (262) namedblock_statements -> . namedblock_statement
    (263) namedblock_statement -> . basic_statement
    (264) namedblock_statement -> . decl
    (265) namedblock_statement -> . integerdecl
    (266) namedblock_statement -> . realdecl
    (267) namedblock_statement -> . parameterdecl
    (268) namedblock_statement -> . localparamdecl
    (229) basic_statement -> . if_statement
    (230) basic_statement -> . case_statement
    (231) basic_statement -> . casex_statement
    (232) basic_statement -> . casez_statement
    (233) basic_statement -> . unique_case_statement
    (234) basic_statement -> . for_statement
    (235) basic_statement -> . while_statement
    (236) basic_statement -> . event_statement
    (237) basic_statement -> . wait_statement
    (238) basic_statement -> . forever_statement
    (239) basic_statement -> . block
    (240) basic_statement -> . namedblock
    (241) basic_statement -> . parallelblock
    (242) basic_statement -> . blocking_substitution
    (243) basic_statement -> . nonblocking_substitution
    (244) basic_statement -> . single_statement
    (82) decl -> . sigtypes declnamelist SEMICOLON
    (83) decl -> . sigtypes width declnamelist SEMICOLON
    (92) integerdecl -> . INTEGER integernamelist SEMICOLON
    (93) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (98) realdecl -> . REAL realnamelist SEMICOLON
    (102) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (103) parameterdecl -> . PARAMETER SIGNED param_substitution_list SEMICOLON
    (104) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (105) parameterdecl -> . PARAMETER SIGNED width param_substitution_list SEMICOLON
    (106) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (107) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (108) localparamdecl -> . LOCALPARAM SIGNED param_substitution_list SEMICOLON
    (109) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (110) localparamdecl -> . LOCALPARAM SIGNED width param_substitution_list SEMICOLON
    (111) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (271) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (272) if_statement -> . IF LPAREN cond RPAREN true_statement
    (273) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (274) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (289) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (290) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (291) casez_statement -> . CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (292) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (279) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (287) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (302) event_statement -> . senslist SEMICOLON
    (303) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (306) forever_statement -> . FOREVER basic_statement
    (254) block -> . BEGIN block_statements END
    (255) block -> . BEGIN END
    (259) namedblock -> . BEGIN COLON ID namedblock_statements END
    (260) namedblock -> . BEGIN COLON ID END
    (269) parallelblock -> . FORK block_statements JOIN
    (270) parallelblock -> . FORK JOIN
    (246) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (248) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (410) single_statement -> . DELAY expression SEMICOLON
    (411) single_statement -> . systemcall SEMICOLON
    (412) single_statement -> . disable SEMICOLON
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (209) senslist -> . AT LPAREN edgesigs RPAREN
    (217) senslist -> . empty
    (218) senslist -> . AT levelsig
    (219) senslist -> . AT LPAREN levelsigs RPAREN
    (227) senslist -> . AT TIMES
    (228) senslist -> . AT LPAREN TIMES RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (409) disable -> . DISABLE ID
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1
    (413) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    END             shift and go to state 618
    INTEGER         shift and go to state 48
    REAL            shift and go to state 50
    PARAMETER       shift and go to state 51
    LOCALPARAM      shift and go to state 52
    IF              shift and go to state 196
    CASE            shift and go to state 198
    CASEX           shift and go to state 199
    CASEZ           shift and go to state 200
    UNIQUE          shift and go to state 201
    FOR             shift and go to state 202
    WHILE           shift and go to state 203
    WAIT            shift and go to state 205
    FOREVER         shift and go to state 206
    BEGIN           shift and go to state 207
    FORK            shift and go to state 208
    DELAY           shift and go to state 209
    AT              shift and go to state 173
    DOLLER          shift and go to state 109
    DISABLE         shift and go to state 213
    INPUT           shift and go to state 65
    OUTPUT          shift and go to state 66
    INOUT           shift and go to state 67
    TRI             shift and go to state 68
    REG             shift and go to state 69
    LOGIC           shift and go to state 70
    WIRE            shift and go to state 71
    SIGNED          shift and go to state 49
    SUPPLY0         shift and go to state 72
    SUPPLY1         shift and go to state 73
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    SEMICOLON       reduce using rule 413 (empty -> .)

  ! IF              [ reduce using rule 413 (empty -> .) ]

    namedblock_statements          shift and go to state 617
    namedblock_statement           shift and go to state 619
    basic_statement                shift and go to state 620
    decl                           shift and go to state 621
    integerdecl                    shift and go to state 622
    realdecl                       shift and go to state 623
    parameterdecl                  shift and go to state 624
    localparamdecl                 shift and go to state 625
    if_statement                   shift and go to state 180
    case_statement                 shift and go to state 181
    casex_statement                shift and go to state 182
    casez_statement                shift and go to state 183
    unique_case_statement          shift and go to state 184
    for_statement                  shift and go to state 185
    while_statement                shift and go to state 186
    event_statement                shift and go to state 187
    wait_statement                 shift and go to state 188
    forever_statement              shift and go to state 189
    block                          shift and go to state 190
    namedblock                     shift and go to state 191
    parallelblock                  shift and go to state 192
    blocking_substitution          shift and go to state 193
    nonblocking_substitution       shift and go to state 194
    single_statement               shift and go to state 195
    sigtypes                       shift and go to state 537
    delays                         shift and go to state 197
    senslist                       shift and go to state 204
    systemcall                     shift and go to state 210
    disable                        shift and go to state 211
    sigtype                        shift and go to state 64
    empty                          shift and go to state 212

state 511

    (269) parallelblock -> FORK block_statements JOIN .

    ENDMODULE       reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    GENERATE        reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    INTEGER         reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    REAL            reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    PARAMETER       reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    LOCALPARAM      reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    GENVAR          reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    ASSIGN          reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    ALWAYS          reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    ALWAYS_FF       reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    ALWAYS_COMB     reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    ALWAYS_LATCH    reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    INITIAL         reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    ID              reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    SENS_OR         reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    FUNCTION        reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    TASK            reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    LPAREN          reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    INPUT           reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    OUTPUT          reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    INOUT           reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    TRI             reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    REG             reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    LOGIC           reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    WIRE            reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    SIGNED          reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    SUPPLY0         reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    SUPPLY1         reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    ENDGENERATE     reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    IF              reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    FOR             reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    ELSE            reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    END             reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    CASE            reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    CASEX           reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    CASEZ           reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    UNIQUE          reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    WHILE           reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    WAIT            reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    FOREVER         reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    BEGIN           reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    FORK            reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    DELAY           reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    AT              reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    DOLLER          reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    DISABLE         reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    LBRACE          reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    SEMICOLON       reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    JOIN            reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    ENDFUNCTION     reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    ENDTASK         reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    ENDCASE         reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    DEFAULT         reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    MINUS           reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    PLUS            reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    LNOT            reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    NOT             reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    AND             reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    NAND            reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    NOR             reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    OR              reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    XOR             reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    XNOR            reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    INTNUMBER_DEC   reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    SIGNED_INTNUMBER_DEC reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    INTNUMBER_BIN   reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    SIGNED_INTNUMBER_BIN reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    INTNUMBER_OCT   reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    SIGNED_INTNUMBER_OCT reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    INTNUMBER_HEX   reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    SIGNED_INTNUMBER_HEX reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    FLOATNUMBER     reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)
    STRING_LITERAL  reduce using rule 269 (parallelblock -> FORK block_statements JOIN .)


state 512

    (410) single_statement -> DELAY expression SEMICOLON .

    ENDMODULE       reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    GENERATE        reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    INTEGER         reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    REAL            reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    PARAMETER       reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    LOCALPARAM      reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    GENVAR          reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    ASSIGN          reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    ALWAYS          reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    ALWAYS_FF       reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    ALWAYS_COMB     reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    INITIAL         reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    ID              reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    SENS_OR         reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    FUNCTION        reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    TASK            reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    LPAREN          reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    INPUT           reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    OUTPUT          reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    INOUT           reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    TRI             reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    REG             reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    LOGIC           reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    WIRE            reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    SIGNED          reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    SUPPLY0         reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    SUPPLY1         reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    ENDGENERATE     reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    IF              reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    FOR             reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    ELSE            reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    END             reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    CASE            reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    CASEX           reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    CASEZ           reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    UNIQUE          reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    WHILE           reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    WAIT            reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    FOREVER         reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    BEGIN           reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    FORK            reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    DELAY           reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    AT              reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    DOLLER          reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    DISABLE         reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    LBRACE          reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    SEMICOLON       reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    JOIN            reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    ENDFUNCTION     reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    ENDTASK         reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    ENDCASE         reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    DEFAULT         reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    MINUS           reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    PLUS            reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    LNOT            reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    NOT             reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    AND             reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    NAND            reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    NOR             reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    OR              reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    XOR             reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    XNOR            reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    INTNUMBER_DEC   reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    SIGNED_INTNUMBER_DEC reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    INTNUMBER_BIN   reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    SIGNED_INTNUMBER_BIN reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    INTNUMBER_OCT   reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    SIGNED_INTNUMBER_OCT reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    INTNUMBER_HEX   reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    SIGNED_INTNUMBER_HEX reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    FLOATNUMBER     reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 410 (single_statement -> DELAY expression SEMICOLON .)


state 513

    (249) delays -> DELAY LPAREN expression . RPAREN
    (171) expression -> LPAREN expression . RPAREN
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RPAREN          shift and go to state 626
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 514

    (311) instance_body -> ID LPAREN . instance_ports RPAREN
    (328) instance_ports -> . instance_ports_list
    (329) instance_ports -> . instance_ports_arg
    (330) instance_ports_list -> . instance_ports_list COMMA instance_port_list
    (331) instance_ports_list -> . instance_port_list
    (332) instance_ports_list -> . empty
    (334) instance_ports_arg -> . instance_ports_arg COMMA instance_port_arg
    (335) instance_ports_arg -> . instance_port_arg
    (333) instance_port_list -> . expression
    (413) empty -> .
    (336) instance_port_arg -> . DOT ID LPAREN identifier RPAREN
    (337) instance_port_arg -> . DOT ID LPAREN expression RPAREN
    (338) instance_port_arg -> . DOT ID LPAREN RPAREN
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    COMMA           reduce using rule 413 (empty -> .)
    RPAREN          reduce using rule 413 (empty -> .)
    DOT             shift and go to state 389
    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    instance_ports                 shift and go to state 627
    instance_ports_list            shift and go to state 383
    instance_ports_arg             shift and go to state 384
    instance_port_list             shift and go to state 385
    empty                          shift and go to state 386
    instance_port_arg              shift and go to state 387
    expression                     shift and go to state 388
    identifier                     shift and go to state 106
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 515

    (312) instance_body -> ID width . LPAREN instance_ports RPAREN

    LPAREN          shift and go to state 628


state 516

    (307) instance -> ID parameterlist instance_bodylist SEMICOLON .

    ENDMODULE       reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    GENERATE        reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    INTEGER         reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    REAL            reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    PARAMETER       reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    LOCALPARAM      reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    GENVAR          reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    ASSIGN          reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    ALWAYS          reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    ALWAYS_FF       reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    ALWAYS_COMB     reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    INITIAL         reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    ID              reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    SENS_OR         reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    FUNCTION        reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    TASK            reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    LPAREN          reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    INPUT           reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    OUTPUT          reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    INOUT           reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    TRI             reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    REG             reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    LOGIC           reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    WIRE            reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    SIGNED          reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    SUPPLY0         reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    SUPPLY1         reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    ENDGENERATE     reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    IF              reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    FOR             reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    ELSE            reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    END             reduce using rule 307 (instance -> ID parameterlist instance_bodylist SEMICOLON .)


state 517

    (309) instance_bodylist -> instance_bodylist COMMA . instance_body
    (311) instance_body -> . ID LPAREN instance_ports RPAREN
    (312) instance_body -> . ID width LPAREN instance_ports RPAREN

    ID              shift and go to state 376

    instance_body                  shift and go to state 629

state 518

    (315) instance_bodylist_noname -> instance_bodylist_noname COMMA instance_body_noname .

    SEMICOLON       reduce using rule 315 (instance_bodylist_noname -> instance_bodylist_noname COMMA instance_body_noname .)
    COMMA           reduce using rule 315 (instance_bodylist_noname -> instance_bodylist_noname COMMA instance_body_noname .)


state 519

    (318) parameterlist -> DELAY LPAREN param_args . RPAREN
    (323) param_args -> param_args . COMMA param_arg

    RPAREN          shift and go to state 630
    COMMA           shift and go to state 631


state 520

    (319) parameterlist -> DELAY LPAREN param_args_noname . RPAREN
    (321) param_args_noname -> param_args_noname . COMMA param_arg_noname

    RPAREN          shift and go to state 632
    COMMA           shift and go to state 633


state 521

    (324) param_args -> param_arg .

    RPAREN          reduce using rule 324 (param_args -> param_arg .)
    COMMA           reduce using rule 324 (param_args -> param_arg .)


state 522

    (325) param_args -> empty .

    RPAREN          reduce using rule 325 (param_args -> empty .)
    COMMA           reduce using rule 325 (param_args -> empty .)


state 523

    (322) param_args_noname -> param_arg_noname .

    RPAREN          reduce using rule 322 (param_args_noname -> param_arg_noname .)
    COMMA           reduce using rule 322 (param_args_noname -> param_arg_noname .)


state 524

    (327) param_arg -> DOT . ID LPAREN expression RPAREN

    ID              shift and go to state 634


state 525

    (326) param_arg_noname -> expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RPAREN          reduce using rule 326 (param_arg_noname -> expression .)
    COMMA           reduce using rule 326 (param_arg_noname -> expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 526

    (317) instance_body_noname -> LPAREN instance_ports RPAREN .

    SEMICOLON       reduce using rule 317 (instance_body_noname -> LPAREN instance_ports RPAREN .)
    COMMA           reduce using rule 317 (instance_body_noname -> LPAREN instance_ports RPAREN .)


state 527

    (330) instance_ports_list -> instance_ports_list COMMA . instance_port_list
    (333) instance_port_list -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    instance_port_list             shift and go to state 635
    expression                     shift and go to state 388
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 528

    (334) instance_ports_arg -> instance_ports_arg COMMA . instance_port_arg
    (336) instance_port_arg -> . DOT ID LPAREN identifier RPAREN
    (337) instance_port_arg -> . DOT ID LPAREN expression RPAREN
    (338) instance_port_arg -> . DOT ID LPAREN RPAREN

    DOT             shift and go to state 389

    instance_port_arg              shift and go to state 636

state 529

    (336) instance_port_arg -> DOT ID . LPAREN identifier RPAREN
    (337) instance_port_arg -> DOT ID . LPAREN expression RPAREN
    (338) instance_port_arg -> DOT ID . LPAREN RPAREN

    LPAREN          shift and go to state 637


state 530

    (308) instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .

    ENDMODULE       reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    GENERATE        reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    INTEGER         reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    REAL            reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    PARAMETER       reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    LOCALPARAM      reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    GENVAR          reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    ASSIGN          reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    ALWAYS          reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    ALWAYS_FF       reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    ALWAYS_COMB     reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    INITIAL         reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    ID              reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    SENS_OR         reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    FUNCTION        reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    TASK            reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    LPAREN          reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    INPUT           reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    OUTPUT          reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    INOUT           reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    TRI             reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    REG             reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    LOGIC           reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    WIRE            reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    SIGNED          reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    SUPPLY0         reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    SUPPLY1         reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    ENDGENERATE     reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    IF              reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    FOR             reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    ELSE            reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    END             reduce using rule 308 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)


state 531

    (368) function -> FUNCTION width ID SEMICOLON . function_statement ENDFUNCTION
    (371) function_statement -> . funcvardecls function_calc
    (372) funcvardecls -> . funcvardecls funcvardecl
    (373) funcvardecls -> . funcvardecl
    (374) funcvardecl -> . decl
    (375) funcvardecl -> . integerdecl
    (82) decl -> . sigtypes declnamelist SEMICOLON
    (83) decl -> . sigtypes width declnamelist SEMICOLON
    (92) integerdecl -> . INTEGER integernamelist SEMICOLON
    (93) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

    INTEGER         shift and go to state 48
    INPUT           shift and go to state 65
    OUTPUT          shift and go to state 66
    INOUT           shift and go to state 67
    TRI             shift and go to state 68
    REG             shift and go to state 69
    LOGIC           shift and go to state 70
    WIRE            shift and go to state 71
    SIGNED          shift and go to state 49
    SUPPLY0         shift and go to state 72
    SUPPLY1         shift and go to state 73

    function_statement             shift and go to state 638
    funcvardecls                   shift and go to state 533
    funcvardecl                    shift and go to state 534
    decl                           shift and go to state 535
    integerdecl                    shift and go to state 536
    sigtypes                       shift and go to state 537
    sigtype                        shift and go to state 64

state 532

    (369) function -> FUNCTION ID SEMICOLON function_statement . ENDFUNCTION

    ENDFUNCTION     shift and go to state 639


state 533

    (371) function_statement -> funcvardecls . function_calc
    (372) funcvardecls -> funcvardecls . funcvardecl
    (376) function_calc -> . blocking_substitution
    (377) function_calc -> . if_statement
    (378) function_calc -> . for_statement
    (379) function_calc -> . while_statement
    (380) function_calc -> . case_statement
    (381) function_calc -> . casex_statement
    (382) function_calc -> . casez_statement
    (383) function_calc -> . block
    (384) function_calc -> . namedblock
    (374) funcvardecl -> . decl
    (375) funcvardecl -> . integerdecl
    (246) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (271) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (272) if_statement -> . IF LPAREN cond RPAREN true_statement
    (273) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (274) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (279) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (287) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (289) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (290) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (291) casez_statement -> . CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (254) block -> . BEGIN block_statements END
    (255) block -> . BEGIN END
    (259) namedblock -> . BEGIN COLON ID namedblock_statements END
    (260) namedblock -> . BEGIN COLON ID END
    (82) decl -> . sigtypes declnamelist SEMICOLON
    (83) decl -> . sigtypes width declnamelist SEMICOLON
    (92) integerdecl -> . INTEGER integernamelist SEMICOLON
    (93) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (413) empty -> .
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 196
    FOR             shift and go to state 202
    WHILE           shift and go to state 203
    CASE            shift and go to state 198
    CASEX           shift and go to state 199
    CASEZ           shift and go to state 200
    BEGIN           shift and go to state 207
    INTEGER         shift and go to state 48
    DELAY           shift and go to state 142
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    INPUT           shift and go to state 65
    OUTPUT          shift and go to state 66
    INOUT           shift and go to state 67
    TRI             shift and go to state 68
    REG             shift and go to state 69
    LOGIC           shift and go to state 70
    WIRE            shift and go to state 71
    SIGNED          shift and go to state 49
    SUPPLY0         shift and go to state 72
    SUPPLY1         shift and go to state 73

  ! IF              [ reduce using rule 413 (empty -> .) ]

    function_calc                  shift and go to state 640
    funcvardecl                    shift and go to state 641
    blocking_substitution          shift and go to state 642
    if_statement                   shift and go to state 643
    for_statement                  shift and go to state 644
    while_statement                shift and go to state 645
    case_statement                 shift and go to state 646
    casex_statement                shift and go to state 647
    casez_statement                shift and go to state 648
    block                          shift and go to state 649
    namedblock                     shift and go to state 650
    decl                           shift and go to state 535
    integerdecl                    shift and go to state 536
    delays                         shift and go to state 651
    sigtypes                       shift and go to state 537
    empty                          shift and go to state 143
    sigtype                        shift and go to state 64

state 534

    (373) funcvardecls -> funcvardecl .

    IF              reduce using rule 373 (funcvardecls -> funcvardecl .)
    FOR             reduce using rule 373 (funcvardecls -> funcvardecl .)
    WHILE           reduce using rule 373 (funcvardecls -> funcvardecl .)
    CASE            reduce using rule 373 (funcvardecls -> funcvardecl .)
    CASEX           reduce using rule 373 (funcvardecls -> funcvardecl .)
    CASEZ           reduce using rule 373 (funcvardecls -> funcvardecl .)
    BEGIN           reduce using rule 373 (funcvardecls -> funcvardecl .)
    INTEGER         reduce using rule 373 (funcvardecls -> funcvardecl .)
    DELAY           reduce using rule 373 (funcvardecls -> funcvardecl .)
    INPUT           reduce using rule 373 (funcvardecls -> funcvardecl .)
    OUTPUT          reduce using rule 373 (funcvardecls -> funcvardecl .)
    INOUT           reduce using rule 373 (funcvardecls -> funcvardecl .)
    TRI             reduce using rule 373 (funcvardecls -> funcvardecl .)
    REG             reduce using rule 373 (funcvardecls -> funcvardecl .)
    LOGIC           reduce using rule 373 (funcvardecls -> funcvardecl .)
    WIRE            reduce using rule 373 (funcvardecls -> funcvardecl .)
    SIGNED          reduce using rule 373 (funcvardecls -> funcvardecl .)
    SUPPLY0         reduce using rule 373 (funcvardecls -> funcvardecl .)
    SUPPLY1         reduce using rule 373 (funcvardecls -> funcvardecl .)
    LBRACE          reduce using rule 373 (funcvardecls -> funcvardecl .)
    ID              reduce using rule 373 (funcvardecls -> funcvardecl .)


state 535

    (374) funcvardecl -> decl .

    IF              reduce using rule 374 (funcvardecl -> decl .)
    FOR             reduce using rule 374 (funcvardecl -> decl .)
    WHILE           reduce using rule 374 (funcvardecl -> decl .)
    CASE            reduce using rule 374 (funcvardecl -> decl .)
    CASEX           reduce using rule 374 (funcvardecl -> decl .)
    CASEZ           reduce using rule 374 (funcvardecl -> decl .)
    BEGIN           reduce using rule 374 (funcvardecl -> decl .)
    INTEGER         reduce using rule 374 (funcvardecl -> decl .)
    DELAY           reduce using rule 374 (funcvardecl -> decl .)
    INPUT           reduce using rule 374 (funcvardecl -> decl .)
    OUTPUT          reduce using rule 374 (funcvardecl -> decl .)
    INOUT           reduce using rule 374 (funcvardecl -> decl .)
    TRI             reduce using rule 374 (funcvardecl -> decl .)
    REG             reduce using rule 374 (funcvardecl -> decl .)
    LOGIC           reduce using rule 374 (funcvardecl -> decl .)
    WIRE            reduce using rule 374 (funcvardecl -> decl .)
    SIGNED          reduce using rule 374 (funcvardecl -> decl .)
    SUPPLY0         reduce using rule 374 (funcvardecl -> decl .)
    SUPPLY1         reduce using rule 374 (funcvardecl -> decl .)
    LBRACE          reduce using rule 374 (funcvardecl -> decl .)
    ID              reduce using rule 374 (funcvardecl -> decl .)


state 536

    (375) funcvardecl -> integerdecl .

    IF              reduce using rule 375 (funcvardecl -> integerdecl .)
    FOR             reduce using rule 375 (funcvardecl -> integerdecl .)
    WHILE           reduce using rule 375 (funcvardecl -> integerdecl .)
    CASE            reduce using rule 375 (funcvardecl -> integerdecl .)
    CASEX           reduce using rule 375 (funcvardecl -> integerdecl .)
    CASEZ           reduce using rule 375 (funcvardecl -> integerdecl .)
    BEGIN           reduce using rule 375 (funcvardecl -> integerdecl .)
    INTEGER         reduce using rule 375 (funcvardecl -> integerdecl .)
    DELAY           reduce using rule 375 (funcvardecl -> integerdecl .)
    INPUT           reduce using rule 375 (funcvardecl -> integerdecl .)
    OUTPUT          reduce using rule 375 (funcvardecl -> integerdecl .)
    INOUT           reduce using rule 375 (funcvardecl -> integerdecl .)
    TRI             reduce using rule 375 (funcvardecl -> integerdecl .)
    REG             reduce using rule 375 (funcvardecl -> integerdecl .)
    LOGIC           reduce using rule 375 (funcvardecl -> integerdecl .)
    WIRE            reduce using rule 375 (funcvardecl -> integerdecl .)
    SIGNED          reduce using rule 375 (funcvardecl -> integerdecl .)
    SUPPLY0         reduce using rule 375 (funcvardecl -> integerdecl .)
    SUPPLY1         reduce using rule 375 (funcvardecl -> integerdecl .)
    LBRACE          reduce using rule 375 (funcvardecl -> integerdecl .)
    ID              reduce using rule 375 (funcvardecl -> integerdecl .)


state 537

    (82) decl -> sigtypes . declnamelist SEMICOLON
    (83) decl -> sigtypes . width declnamelist SEMICOLON
    (35) sigtypes -> sigtypes . sigtype
    (84) declnamelist -> . declnamelist COMMA declname
    (85) declnamelist -> . declname
    (56) width -> . LBRACKET expression COLON expression RBRACKET
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1
    (86) declname -> . ID
    (87) declname -> . ID dimensions

    LBRACKET        shift and go to state 139
    INPUT           shift and go to state 65
    OUTPUT          shift and go to state 66
    INOUT           shift and go to state 67
    TRI             shift and go to state 68
    REG             shift and go to state 69
    LOGIC           shift and go to state 70
    WIRE            shift and go to state 71
    SIGNED          shift and go to state 49
    SUPPLY0         shift and go to state 72
    SUPPLY1         shift and go to state 73
    ID              shift and go to state 454

    declnamelist                   shift and go to state 134
    width                          shift and go to state 652
    sigtype                        shift and go to state 137
    declname                       shift and go to state 138

state 538

    (370) function -> FUNCTION INTEGER ID SEMICOLON . function_statement ENDFUNCTION
    (371) function_statement -> . funcvardecls function_calc
    (372) funcvardecls -> . funcvardecls funcvardecl
    (373) funcvardecls -> . funcvardecl
    (374) funcvardecl -> . decl
    (375) funcvardecl -> . integerdecl
    (82) decl -> . sigtypes declnamelist SEMICOLON
    (83) decl -> . sigtypes width declnamelist SEMICOLON
    (92) integerdecl -> . INTEGER integernamelist SEMICOLON
    (93) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

    INTEGER         shift and go to state 48
    INPUT           shift and go to state 65
    OUTPUT          shift and go to state 66
    INOUT           shift and go to state 67
    TRI             shift and go to state 68
    REG             shift and go to state 69
    LOGIC           shift and go to state 70
    WIRE            shift and go to state 71
    SIGNED          shift and go to state 49
    SUPPLY0         shift and go to state 72
    SUPPLY1         shift and go to state 73

    function_statement             shift and go to state 653
    funcvardecls                   shift and go to state 533
    funcvardecl                    shift and go to state 534
    decl                           shift and go to state 535
    integerdecl                    shift and go to state 536
    sigtypes                       shift and go to state 537
    sigtype                        shift and go to state 64

state 539

    (389) task -> TASK ID SEMICOLON task_statement . ENDTASK

    ENDTASK         shift and go to state 654


state 540

    (390) task_statement -> taskvardecls . task_calc
    (391) taskvardecls -> taskvardecls . taskvardecl
    (396) task_calc -> . blocking_substitution
    (397) task_calc -> . if_statement
    (398) task_calc -> . for_statement
    (399) task_calc -> . while_statement
    (400) task_calc -> . case_statement
    (401) task_calc -> . casex_statement
    (402) task_calc -> . casez_statement
    (403) task_calc -> . block
    (404) task_calc -> . namedblock
    (394) taskvardecl -> . decl
    (395) taskvardecl -> . integerdecl
    (246) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (271) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (272) if_statement -> . IF LPAREN cond RPAREN true_statement
    (273) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (274) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (279) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (287) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (289) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (290) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (291) casez_statement -> . CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (254) block -> . BEGIN block_statements END
    (255) block -> . BEGIN END
    (259) namedblock -> . BEGIN COLON ID namedblock_statements END
    (260) namedblock -> . BEGIN COLON ID END
    (82) decl -> . sigtypes declnamelist SEMICOLON
    (83) decl -> . sigtypes width declnamelist SEMICOLON
    (92) integerdecl -> . INTEGER integernamelist SEMICOLON
    (93) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (413) empty -> .
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 196
    FOR             shift and go to state 202
    WHILE           shift and go to state 203
    CASE            shift and go to state 198
    CASEX           shift and go to state 199
    CASEZ           shift and go to state 200
    BEGIN           shift and go to state 207
    INTEGER         shift and go to state 48
    DELAY           shift and go to state 142
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    INPUT           shift and go to state 65
    OUTPUT          shift and go to state 66
    INOUT           shift and go to state 67
    TRI             shift and go to state 68
    REG             shift and go to state 69
    LOGIC           shift and go to state 70
    WIRE            shift and go to state 71
    SIGNED          shift and go to state 49
    SUPPLY0         shift and go to state 72
    SUPPLY1         shift and go to state 73

  ! IF              [ reduce using rule 413 (empty -> .) ]

    task_calc                      shift and go to state 655
    taskvardecl                    shift and go to state 656
    blocking_substitution          shift and go to state 657
    if_statement                   shift and go to state 658
    for_statement                  shift and go to state 659
    while_statement                shift and go to state 660
    case_statement                 shift and go to state 661
    casex_statement                shift and go to state 662
    casez_statement                shift and go to state 663
    block                          shift and go to state 664
    namedblock                     shift and go to state 665
    decl                           shift and go to state 543
    integerdecl                    shift and go to state 544
    delays                         shift and go to state 651
    sigtypes                       shift and go to state 537
    empty                          shift and go to state 143
    sigtype                        shift and go to state 64

state 541

    (392) taskvardecls -> taskvardecl .

    IF              reduce using rule 392 (taskvardecls -> taskvardecl .)
    FOR             reduce using rule 392 (taskvardecls -> taskvardecl .)
    WHILE           reduce using rule 392 (taskvardecls -> taskvardecl .)
    CASE            reduce using rule 392 (taskvardecls -> taskvardecl .)
    CASEX           reduce using rule 392 (taskvardecls -> taskvardecl .)
    CASEZ           reduce using rule 392 (taskvardecls -> taskvardecl .)
    BEGIN           reduce using rule 392 (taskvardecls -> taskvardecl .)
    INTEGER         reduce using rule 392 (taskvardecls -> taskvardecl .)
    DELAY           reduce using rule 392 (taskvardecls -> taskvardecl .)
    INPUT           reduce using rule 392 (taskvardecls -> taskvardecl .)
    OUTPUT          reduce using rule 392 (taskvardecls -> taskvardecl .)
    INOUT           reduce using rule 392 (taskvardecls -> taskvardecl .)
    TRI             reduce using rule 392 (taskvardecls -> taskvardecl .)
    REG             reduce using rule 392 (taskvardecls -> taskvardecl .)
    LOGIC           reduce using rule 392 (taskvardecls -> taskvardecl .)
    WIRE            reduce using rule 392 (taskvardecls -> taskvardecl .)
    SIGNED          reduce using rule 392 (taskvardecls -> taskvardecl .)
    SUPPLY0         reduce using rule 392 (taskvardecls -> taskvardecl .)
    SUPPLY1         reduce using rule 392 (taskvardecls -> taskvardecl .)
    LBRACE          reduce using rule 392 (taskvardecls -> taskvardecl .)
    ID              reduce using rule 392 (taskvardecls -> taskvardecl .)


state 542

    (393) taskvardecls -> empty .

    IF              reduce using rule 393 (taskvardecls -> empty .)
    FOR             reduce using rule 393 (taskvardecls -> empty .)
    WHILE           reduce using rule 393 (taskvardecls -> empty .)
    CASE            reduce using rule 393 (taskvardecls -> empty .)
    CASEX           reduce using rule 393 (taskvardecls -> empty .)
    CASEZ           reduce using rule 393 (taskvardecls -> empty .)
    BEGIN           reduce using rule 393 (taskvardecls -> empty .)
    INTEGER         reduce using rule 393 (taskvardecls -> empty .)
    DELAY           reduce using rule 393 (taskvardecls -> empty .)
    INPUT           reduce using rule 393 (taskvardecls -> empty .)
    OUTPUT          reduce using rule 393 (taskvardecls -> empty .)
    INOUT           reduce using rule 393 (taskvardecls -> empty .)
    TRI             reduce using rule 393 (taskvardecls -> empty .)
    REG             reduce using rule 393 (taskvardecls -> empty .)
    LOGIC           reduce using rule 393 (taskvardecls -> empty .)
    WIRE            reduce using rule 393 (taskvardecls -> empty .)
    SIGNED          reduce using rule 393 (taskvardecls -> empty .)
    SUPPLY0         reduce using rule 393 (taskvardecls -> empty .)
    SUPPLY1         reduce using rule 393 (taskvardecls -> empty .)
    LBRACE          reduce using rule 393 (taskvardecls -> empty .)
    ID              reduce using rule 393 (taskvardecls -> empty .)


state 543

    (394) taskvardecl -> decl .

    IF              reduce using rule 394 (taskvardecl -> decl .)
    FOR             reduce using rule 394 (taskvardecl -> decl .)
    WHILE           reduce using rule 394 (taskvardecl -> decl .)
    CASE            reduce using rule 394 (taskvardecl -> decl .)
    CASEX           reduce using rule 394 (taskvardecl -> decl .)
    CASEZ           reduce using rule 394 (taskvardecl -> decl .)
    BEGIN           reduce using rule 394 (taskvardecl -> decl .)
    INTEGER         reduce using rule 394 (taskvardecl -> decl .)
    DELAY           reduce using rule 394 (taskvardecl -> decl .)
    INPUT           reduce using rule 394 (taskvardecl -> decl .)
    OUTPUT          reduce using rule 394 (taskvardecl -> decl .)
    INOUT           reduce using rule 394 (taskvardecl -> decl .)
    TRI             reduce using rule 394 (taskvardecl -> decl .)
    REG             reduce using rule 394 (taskvardecl -> decl .)
    LOGIC           reduce using rule 394 (taskvardecl -> decl .)
    WIRE            reduce using rule 394 (taskvardecl -> decl .)
    SIGNED          reduce using rule 394 (taskvardecl -> decl .)
    SUPPLY0         reduce using rule 394 (taskvardecl -> decl .)
    SUPPLY1         reduce using rule 394 (taskvardecl -> decl .)
    LBRACE          reduce using rule 394 (taskvardecl -> decl .)
    ID              reduce using rule 394 (taskvardecl -> decl .)


state 544

    (395) taskvardecl -> integerdecl .

    IF              reduce using rule 395 (taskvardecl -> integerdecl .)
    FOR             reduce using rule 395 (taskvardecl -> integerdecl .)
    WHILE           reduce using rule 395 (taskvardecl -> integerdecl .)
    CASE            reduce using rule 395 (taskvardecl -> integerdecl .)
    CASEX           reduce using rule 395 (taskvardecl -> integerdecl .)
    CASEZ           reduce using rule 395 (taskvardecl -> integerdecl .)
    BEGIN           reduce using rule 395 (taskvardecl -> integerdecl .)
    INTEGER         reduce using rule 395 (taskvardecl -> integerdecl .)
    DELAY           reduce using rule 395 (taskvardecl -> integerdecl .)
    INPUT           reduce using rule 395 (taskvardecl -> integerdecl .)
    OUTPUT          reduce using rule 395 (taskvardecl -> integerdecl .)
    INOUT           reduce using rule 395 (taskvardecl -> integerdecl .)
    TRI             reduce using rule 395 (taskvardecl -> integerdecl .)
    REG             reduce using rule 395 (taskvardecl -> integerdecl .)
    LOGIC           reduce using rule 395 (taskvardecl -> integerdecl .)
    WIRE            reduce using rule 395 (taskvardecl -> integerdecl .)
    SIGNED          reduce using rule 395 (taskvardecl -> integerdecl .)
    SUPPLY0         reduce using rule 395 (taskvardecl -> integerdecl .)
    SUPPLY1         reduce using rule 395 (taskvardecl -> integerdecl .)
    LBRACE          reduce using rule 395 (taskvardecl -> integerdecl .)
    ID              reduce using rule 395 (taskvardecl -> integerdecl .)


state 545

    (49) ioport -> sigtypes portname .

    RPAREN          reduce using rule 49 (ioport -> sigtypes portname .)
    COMMA           reduce using rule 49 (ioport -> sigtypes portname .)


state 546

    (50) ioport -> sigtypes width . portname
    (51) ioport -> sigtypes width . portname dimensions
    (34) portname -> . ID

    ID              shift and go to state 79

    portname                       shift and go to state 666

state 547

    (54) ioport_head -> sigtypes width portname dimensions .
    (58) dimensions -> dimensions . length
    (57) length -> . LBRACKET expression COLON expression RBRACKET

    RPAREN          reduce using rule 54 (ioport_head -> sigtypes width portname dimensions .)
    COMMA           reduce using rule 54 (ioport_head -> sigtypes width portname dimensions .)
    LBRACKET        shift and go to state 299

    length                         shift and go to state 460

state 548

    (19) param -> PARAMETER SIGNED param_substitution_list COMMA .
    (112) param_substitution_list -> param_substitution_list COMMA . param_substitution
    (114) param_substitution -> . ID EQUALS rvalue

    PARAMETER       reduce using rule 19 (param -> PARAMETER SIGNED param_substitution_list COMMA .)
    ID              shift and go to state 156

    param_substitution             shift and go to state 470

state 549

    (26) param_end -> PARAMETER SIGNED width param_substitution_list .
    (21) param -> PARAMETER SIGNED width param_substitution_list . COMMA
    (112) param_substitution_list -> param_substitution_list . COMMA param_substitution

    RPAREN          reduce using rule 26 (param_end -> PARAMETER SIGNED width param_substitution_list .)
    COMMA           shift and go to state 667


state 550

    (20) param -> PARAMETER width param_substitution_list COMMA .
    (112) param_substitution_list -> param_substitution_list COMMA . param_substitution
    (114) param_substitution -> . ID EQUALS rvalue

    PARAMETER       reduce using rule 20 (param -> PARAMETER width param_substitution_list COMMA .)
    ID              shift and go to state 156

    param_substitution             shift and go to state 470

state 551

    (22) param -> PARAMETER INTEGER param_substitution_list COMMA .
    (112) param_substitution_list -> param_substitution_list COMMA . param_substitution
    (114) param_substitution -> . ID EQUALS rvalue

    PARAMETER       reduce using rule 22 (param -> PARAMETER INTEGER param_substitution_list COMMA .)
    ID              shift and go to state 156

    param_substitution             shift and go to state 470

state 552

    (170) expression -> expression COND expression COLON . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 668
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 553

    (187) partselect -> pointer LBRACKET expression COLON . expression RBRACKET
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    pointer                        shift and go to state 103
    expression                     shift and go to state 669
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 554

    (191) pointer -> pointer LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    DOT             reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    POWER           reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    MOD             reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    LSHIFT          reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    RSHIFT          reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    LSHIFTA         reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    RSHIFTA         reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    LT              reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    GT              reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    LE              reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    GE              reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    EQ              reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    NE              reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    EQL             reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    NEL             reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    AND             reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    XOR             reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    XNOR            reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    OR              reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    LAND            reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    LOR             reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    COND            reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    COLON           reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    PLUSCOLON       reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    MINUSCOLON      reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    IF              reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    CASE            reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    CASEX           reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    CASEZ           reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    UNIQUE          reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    FOR             reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    WAIT            reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    FOREVER         reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    BEGIN           reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    FORK            reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    DELAY           reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    AT              reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    DOLLER          reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    DISABLE         reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    ID              reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)
    SENS_OR         reduce using rule 191 (pointer -> pointer LBRACKET expression RBRACKET .)


state 555

    (188) partselect -> pointer LBRACKET expression PLUSCOLON . expression RBRACKET
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    pointer                        shift and go to state 103
    expression                     shift and go to state 670
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 556

    (189) partselect -> pointer LBRACKET expression MINUSCOLON . expression RBRACKET
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    pointer                        shift and go to state 103
    expression                     shift and go to state 671
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 557

    (184) partselect -> identifier LBRACKET expression COLON . expression RBRACKET
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    identifier                     shift and go to state 106
    expression                     shift and go to state 672
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 558

    (190) pointer -> identifier LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    DOT             reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    POWER           reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    MOD             reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    LSHIFT          reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    RSHIFT          reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    LSHIFTA         reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    RSHIFTA         reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    LT              reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    GT              reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    LE              reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    GE              reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    EQ              reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    NE              reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    EQL             reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    NEL             reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    AND             reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    XOR             reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    XNOR            reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    OR              reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    LAND            reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    LOR             reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    COND            reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    COLON           reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    PLUSCOLON       reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    MINUSCOLON      reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    IF              reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    CASE            reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    CASEX           reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    CASEZ           reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    UNIQUE          reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    FOR             reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    WAIT            reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    FOREVER         reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    BEGIN           reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    FORK            reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    DELAY           reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    AT              reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    DOLLER          reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    DISABLE         reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    ID              reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)
    SENS_OR         reduce using rule 190 (pointer -> identifier LBRACKET expression RBRACKET .)


state 559

    (185) partselect -> identifier LBRACKET expression PLUSCOLON . expression RBRACKET
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    identifier                     shift and go to state 106
    expression                     shift and go to state 673
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 560

    (186) partselect -> identifier LBRACKET expression MINUSCOLON . expression RBRACKET
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    identifier                     shift and go to state 106
    expression                     shift and go to state 674
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 561

    (385) functioncall -> identifier LPAREN func_args RPAREN .

    TIMES           reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    POWER           reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    DIVIDE          reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    MOD             reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    PLUS            reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    MINUS           reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    LSHIFT          reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    RSHIFT          reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    LSHIFTA         reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    RSHIFTA         reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    LT              reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    GT              reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    LE              reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    GE              reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    EQ              reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    NE              reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    EQL             reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    NEL             reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    AND             reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    XOR             reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    XNOR            reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    OR              reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    LAND            reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    LOR             reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    COND            reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    RPAREN          reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    LBRACE          reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    RBRACE          reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    COMMA           reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    COLON           reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    SEMICOLON       reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    PLUSCOLON       reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    MINUSCOLON      reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)
    RBRACKET        reduce using rule 385 (functioncall -> identifier LPAREN func_args RPAREN .)


state 562

    (386) func_args -> func_args COMMA . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 675
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 563

    (181) concatlist -> concatlist COMMA expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RBRACE          reduce using rule 181 (concatlist -> concatlist COMMA expression .)
    COMMA           reduce using rule 181 (concatlist -> concatlist COMMA expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 564

    (182) concatlist -> expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RBRACE          reduce using rule 182 (concatlist -> expression .)
    COMMA           reduce using rule 182 (concatlist -> expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 565

    (183) repeat -> LBRACE expression concat RBRACE .

    TIMES           reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    POWER           reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    DIVIDE          reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    MOD             reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    PLUS            reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    MINUS           reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    LSHIFT          reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    RSHIFT          reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    LSHIFTA         reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    RSHIFTA         reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    LT              reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    GT              reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    LE              reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    GE              reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    EQ              reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    NE              reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    EQL             reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    NEL             reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    AND             reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    XOR             reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    XNOR            reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    OR              reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    LAND            reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    LOR             reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    COND            reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    RPAREN          reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    LBRACE          reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    RBRACE          reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    COMMA           reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    COLON           reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    SEMICOLON       reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    PLUSCOLON       reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    MINUSCOLON      reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)
    RBRACKET        reduce using rule 183 (repeat -> LBRACE expression concat RBRACE .)


state 566

    (362) systemcall -> DOLLER ID LPAREN sysargs . RPAREN
    (364) sysargs -> sysargs . COMMA sysarg

    RPAREN          shift and go to state 676
    COMMA           shift and go to state 677


state 567

    (365) sysargs -> sysarg .

    RPAREN          reduce using rule 365 (sysargs -> sysarg .)
    COMMA           reduce using rule 365 (sysargs -> sysarg .)


state 568

    (366) sysargs -> empty .

    RPAREN          reduce using rule 366 (sysargs -> empty .)
    COMMA           reduce using rule 366 (sysargs -> empty .)


state 569

    (367) sysarg -> expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RPAREN          reduce using rule 367 (sysarg -> expression .)
    COMMA           reduce using rule 367 (sysarg -> expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 570

    (363) systemcall -> DOLLER SIGNED LPAREN sysargs . RPAREN
    (364) sysargs -> sysargs . COMMA sysarg

    RPAREN          shift and go to state 678
    COMMA           shift and go to state 677


state 571

    (352) generate_if -> IF LPAREN cond RPAREN . gif_true_item ELSE gif_false_item
    (353) generate_if -> IF LPAREN cond RPAREN . gif_true_item
    (354) gif_true_item -> . generate_item
    (355) gif_true_item -> . generate_block
    (347) generate_item -> . standard_item
    (348) generate_item -> . generate_if
    (349) generate_item -> . generate_for
    (350) generate_block -> . BEGIN generate_items END
    (351) generate_block -> . BEGIN COLON ID generate_items END
    (65) standard_item -> . decl
    (66) standard_item -> . integerdecl
    (67) standard_item -> . realdecl
    (68) standard_item -> . declassign
    (69) standard_item -> . parameterdecl
    (70) standard_item -> . localparamdecl
    (71) standard_item -> . genvardecl
    (72) standard_item -> . assignment
    (73) standard_item -> . always
    (74) standard_item -> . always_ff
    (75) standard_item -> . always_comb
    (76) standard_item -> . always_latch
    (77) standard_item -> . initial
    (78) standard_item -> . instance
    (79) standard_item -> . function
    (80) standard_item -> . task
    (81) standard_item -> . pragma
    (352) generate_if -> . IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (353) generate_if -> . IF LPAREN cond RPAREN gif_true_item
    (358) generate_for -> . FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
    (82) decl -> . sigtypes declnamelist SEMICOLON
    (83) decl -> . sigtypes width declnamelist SEMICOLON
    (92) integerdecl -> . INTEGER integernamelist SEMICOLON
    (93) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (98) realdecl -> . REAL realnamelist SEMICOLON
    (88) declassign -> . sigtypes declassign_element SEMICOLON
    (89) declassign -> . sigtypes width declassign_element SEMICOLON
    (102) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (103) parameterdecl -> . PARAMETER SIGNED param_substitution_list SEMICOLON
    (104) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (105) parameterdecl -> . PARAMETER SIGNED width param_substitution_list SEMICOLON
    (106) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (107) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (108) localparamdecl -> . LOCALPARAM SIGNED param_substitution_list SEMICOLON
    (109) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (110) localparamdecl -> . LOCALPARAM SIGNED width param_substitution_list SEMICOLON
    (111) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (339) genvardecl -> . GENVAR genvarlist SEMICOLON
    (115) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (116) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (205) always -> . ALWAYS senslist always_statement
    (206) always_ff -> . ALWAYS_FF senslist always_statement
    (207) always_comb -> . ALWAYS_COMB senslist always_statement
    (208) always_latch -> . ALWAYS_LATCH senslist always_statement
    (300) initial -> . INITIAL initial_statement
    (307) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (308) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (313) instance -> . ID instance_bodylist_noname SEMICOLON
    (314) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (368) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (369) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (370) function -> . FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION
    (389) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

    BEGIN           shift and go to state 682
    IF              shift and go to state 132
    FOR             shift and go to state 133
    INTEGER         shift and go to state 48
    REAL            shift and go to state 50
    PARAMETER       shift and go to state 51
    LOCALPARAM      shift and go to state 52
    GENVAR          shift and go to state 53
    ASSIGN          shift and go to state 54
    ALWAYS          shift and go to state 55
    ALWAYS_FF       shift and go to state 56
    ALWAYS_COMB     shift and go to state 57
    ALWAYS_LATCH    shift and go to state 58
    INITIAL         shift and go to state 59
    ID              shift and go to state 60
    SENS_OR         shift and go to state 61
    FUNCTION        shift and go to state 62
    TASK            shift and go to state 63
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 65
    OUTPUT          shift and go to state 66
    INOUT           shift and go to state 67
    TRI             shift and go to state 68
    REG             shift and go to state 69
    LOGIC           shift and go to state 70
    WIRE            shift and go to state 71
    SIGNED          shift and go to state 49
    SUPPLY0         shift and go to state 72
    SUPPLY1         shift and go to state 73

    gif_true_item                  shift and go to state 679
    generate_item                  shift and go to state 680
    generate_block                 shift and go to state 681
    standard_item                  shift and go to state 129
    generate_if                    shift and go to state 130
    generate_for                   shift and go to state 131
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    always_ff                      shift and go to state 38
    always_comb                    shift and go to state 39
    always_latch                   shift and go to state 40
    initial                        shift and go to state 41
    instance                       shift and go to state 42
    function                       shift and go to state 43
    task                           shift and go to state 44
    pragma                         shift and go to state 45
    sigtypes                       shift and go to state 47
    sigtype                        shift and go to state 64

state 572

    (358) generate_for -> FOR LPAREN forpre forcond . forpost RPAREN generate_forcontent
    (284) forpost -> . blocking_substitution_base
    (285) forpost -> . empty
    (247) blocking_substitution_base -> . delays lvalue EQUALS delays rvalue
    (413) empty -> .
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty

    RPAREN          reduce using rule 413 (empty -> .)
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    DELAY           shift and go to state 142

    forpost                        shift and go to state 683
    blocking_substitution_base     shift and go to state 684
    empty                          shift and go to state 685
    delays                         shift and go to state 686

state 573

    (282) forcond -> cond . SEMICOLON

    SEMICOLON       shift and go to state 687


state 574

    (283) forcond -> SEMICOLON .

    DELAY           reduce using rule 283 (forcond -> SEMICOLON .)
    RPAREN          reduce using rule 283 (forcond -> SEMICOLON .)
    LBRACE          reduce using rule 283 (forcond -> SEMICOLON .)
    ID              reduce using rule 283 (forcond -> SEMICOLON .)


state 575

    (246) blocking_substitution -> delays lvalue . EQUALS delays rvalue SEMICOLON

    EQUALS          shift and go to state 498


state 576

    (56) width -> LBRACKET expression COLON expression . RBRACKET
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 688
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 577

    (57) length -> LBRACKET expression COLON . expression RBRACKET
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 689
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 578

    (91) declassign_element -> delays ID EQUALS delays . rvalue
    (135) rvalue -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    rvalue                         shift and go to state 690
    expression                     shift and go to state 459
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 579

    (249) delays -> DELAY LPAREN expression RPAREN .

    ID              reduce using rule 249 (delays -> DELAY LPAREN expression RPAREN .)
    LBRACE          reduce using rule 249 (delays -> DELAY LPAREN expression RPAREN .)
    MINUS           reduce using rule 249 (delays -> DELAY LPAREN expression RPAREN .)
    PLUS            reduce using rule 249 (delays -> DELAY LPAREN expression RPAREN .)
    LNOT            reduce using rule 249 (delays -> DELAY LPAREN expression RPAREN .)
    NOT             reduce using rule 249 (delays -> DELAY LPAREN expression RPAREN .)
    AND             reduce using rule 249 (delays -> DELAY LPAREN expression RPAREN .)
    NAND            reduce using rule 249 (delays -> DELAY LPAREN expression RPAREN .)
    NOR             reduce using rule 249 (delays -> DELAY LPAREN expression RPAREN .)
    OR              reduce using rule 249 (delays -> DELAY LPAREN expression RPAREN .)
    XOR             reduce using rule 249 (delays -> DELAY LPAREN expression RPAREN .)
    XNOR            reduce using rule 249 (delays -> DELAY LPAREN expression RPAREN .)
    LPAREN          reduce using rule 249 (delays -> DELAY LPAREN expression RPAREN .)
    DOLLER          reduce using rule 249 (delays -> DELAY LPAREN expression RPAREN .)
    INTNUMBER_DEC   reduce using rule 249 (delays -> DELAY LPAREN expression RPAREN .)
    SIGNED_INTNUMBER_DEC reduce using rule 249 (delays -> DELAY LPAREN expression RPAREN .)
    INTNUMBER_BIN   reduce using rule 249 (delays -> DELAY LPAREN expression RPAREN .)
    SIGNED_INTNUMBER_BIN reduce using rule 249 (delays -> DELAY LPAREN expression RPAREN .)
    INTNUMBER_OCT   reduce using rule 249 (delays -> DELAY LPAREN expression RPAREN .)
    SIGNED_INTNUMBER_OCT reduce using rule 249 (delays -> DELAY LPAREN expression RPAREN .)
    INTNUMBER_HEX   reduce using rule 249 (delays -> DELAY LPAREN expression RPAREN .)
    SIGNED_INTNUMBER_HEX reduce using rule 249 (delays -> DELAY LPAREN expression RPAREN .)
    FLOATNUMBER     reduce using rule 249 (delays -> DELAY LPAREN expression RPAREN .)
    STRING_LITERAL  reduce using rule 249 (delays -> DELAY LPAREN expression RPAREN .)
    IF              reduce using rule 249 (delays -> DELAY LPAREN expression RPAREN .)


state 580

    (190) pointer -> identifier LBRACKET expression . RBRACKET
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 558
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 581

    (191) pointer -> pointer LBRACKET expression . RBRACKET
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 554
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 582

    (105) parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .

    ENDMODULE       reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    GENERATE        reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    INTEGER         reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    REAL            reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    PARAMETER       reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    LOCALPARAM      reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    GENVAR          reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    ASSIGN          reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    ALWAYS          reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    ALWAYS_FF       reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    ALWAYS_COMB     reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    INITIAL         reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    ID              reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    SENS_OR         reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    FUNCTION        reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    TASK            reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    LPAREN          reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    INPUT           reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    OUTPUT          reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    INOUT           reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    TRI             reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    REG             reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    LOGIC           reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    WIRE            reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    SIGNED          reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    SUPPLY0         reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    SUPPLY1         reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    ENDGENERATE     reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    IF              reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    FOR             reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    END             reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    CASE            reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    CASEX           reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    CASEZ           reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    UNIQUE          reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    WHILE           reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    WAIT            reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    FOREVER         reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    BEGIN           reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    FORK            reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    DELAY           reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    AT              reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    DOLLER          reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    DISABLE         reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    LBRACE          reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    SEMICOLON       reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    ELSE            reduce using rule 105 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)


state 583

    (110) localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .

    ENDMODULE       reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    GENERATE        reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    INTEGER         reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    REAL            reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    PARAMETER       reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    LOCALPARAM      reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    GENVAR          reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    ASSIGN          reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    ALWAYS          reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    ALWAYS_FF       reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    ALWAYS_COMB     reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    INITIAL         reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    ID              reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    SENS_OR         reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    FUNCTION        reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    TASK            reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    LPAREN          reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    INPUT           reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    OUTPUT          reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    INOUT           reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    TRI             reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    REG             reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    LOGIC           reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    WIRE            reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    SIGNED          reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    SUPPLY0         reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    SUPPLY1         reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    ENDGENERATE     reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    IF              reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    FOR             reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    END             reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    CASE            reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    CASEX           reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    CASEZ           reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    UNIQUE          reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    WHILE           reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    WAIT            reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    FOREVER         reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    BEGIN           reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    FORK            reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    DELAY           reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    AT              reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    DOLLER          reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    DISABLE         reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    LBRACE          reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    SEMICOLON       reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    ELSE            reduce using rule 110 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)


state 584

    (115) assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .

    ENDMODULE       reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    GENERATE        reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    INTEGER         reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    REAL            reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    PARAMETER       reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    LOCALPARAM      reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    GENVAR          reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    ASSIGN          reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    ALWAYS          reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    ALWAYS_FF       reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    ALWAYS_COMB     reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    INITIAL         reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    ID              reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    SENS_OR         reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    FUNCTION        reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    TASK            reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    LPAREN          reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    INPUT           reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    OUTPUT          reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    INOUT           reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    TRI             reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    REG             reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    LOGIC           reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    WIRE            reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    SIGNED          reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    SUPPLY0         reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    SUPPLY1         reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    ENDGENERATE     reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    IF              reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    FOR             reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    ELSE            reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    END             reduce using rule 115 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)


state 585

    (116) assignment -> ASSIGN delays lvalue EQUALS delays . rvalue SEMICOLON
    (135) rvalue -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    rvalue                         shift and go to state 691
    expression                     shift and go to state 459
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 586

    (120) lpartselect -> identifier LBRACKET expression COLON . expression RBRACKET
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    identifier                     shift and go to state 106
    expression                     shift and go to state 692
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 587

    (121) lpartselect -> identifier LBRACKET expression PLUSCOLON . expression RBRACKET
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    identifier                     shift and go to state 106
    expression                     shift and go to state 693
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 588

    (122) lpartselect -> identifier LBRACKET expression MINUSCOLON . expression RBRACKET
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    identifier                     shift and go to state 106
    expression                     shift and go to state 694
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 589

    (117) lpartselect -> pointer LBRACKET expression COLON . expression RBRACKET
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    pointer                        shift and go to state 103
    expression                     shift and go to state 695
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 590

    (118) lpartselect -> pointer LBRACKET expression PLUSCOLON . expression RBRACKET
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    pointer                        shift and go to state 103
    expression                     shift and go to state 696
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 591

    (119) lpartselect -> pointer LBRACKET expression MINUSCOLON . expression RBRACKET
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    pointer                        shift and go to state 103
    expression                     shift and go to state 697
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 592

    (125) lconcatlist -> lconcatlist COMMA lconcat_one .

    RBRACE          reduce using rule 125 (lconcatlist -> lconcatlist COMMA lconcat_one .)
    COMMA           reduce using rule 125 (lconcatlist -> lconcatlist COMMA lconcat_one .)


state 593

    (209) senslist -> AT LPAREN edgesigs RPAREN .

    IF              reduce using rule 209 (senslist -> AT LPAREN edgesigs RPAREN .)
    CASE            reduce using rule 209 (senslist -> AT LPAREN edgesigs RPAREN .)
    CASEX           reduce using rule 209 (senslist -> AT LPAREN edgesigs RPAREN .)
    CASEZ           reduce using rule 209 (senslist -> AT LPAREN edgesigs RPAREN .)
    UNIQUE          reduce using rule 209 (senslist -> AT LPAREN edgesigs RPAREN .)
    FOR             reduce using rule 209 (senslist -> AT LPAREN edgesigs RPAREN .)
    WHILE           reduce using rule 209 (senslist -> AT LPAREN edgesigs RPAREN .)
    WAIT            reduce using rule 209 (senslist -> AT LPAREN edgesigs RPAREN .)
    FOREVER         reduce using rule 209 (senslist -> AT LPAREN edgesigs RPAREN .)
    BEGIN           reduce using rule 209 (senslist -> AT LPAREN edgesigs RPAREN .)
    FORK            reduce using rule 209 (senslist -> AT LPAREN edgesigs RPAREN .)
    DELAY           reduce using rule 209 (senslist -> AT LPAREN edgesigs RPAREN .)
    AT              reduce using rule 209 (senslist -> AT LPAREN edgesigs RPAREN .)
    DOLLER          reduce using rule 209 (senslist -> AT LPAREN edgesigs RPAREN .)
    DISABLE         reduce using rule 209 (senslist -> AT LPAREN edgesigs RPAREN .)
    LBRACE          reduce using rule 209 (senslist -> AT LPAREN edgesigs RPAREN .)
    ID              reduce using rule 209 (senslist -> AT LPAREN edgesigs RPAREN .)
    SEMICOLON       reduce using rule 209 (senslist -> AT LPAREN edgesigs RPAREN .)


state 594

    (214) edgesigs -> edgesigs SENS_OR . edgesig
    (210) edgesig -> . POSEDGE edgesig_base
    (211) edgesig -> . NEGEDGE edgesig_base

    POSEDGE         shift and go to state 492
    NEGEDGE         shift and go to state 493

    edgesig                        shift and go to state 698

state 595

    (215) edgesigs -> edgesigs COMMA . edgesig
    (210) edgesig -> . POSEDGE edgesig_base
    (211) edgesig -> . NEGEDGE edgesig_base

    POSEDGE         shift and go to state 492
    NEGEDGE         shift and go to state 493

    edgesig                        shift and go to state 699

state 596

    (219) senslist -> AT LPAREN levelsigs RPAREN .

    IF              reduce using rule 219 (senslist -> AT LPAREN levelsigs RPAREN .)
    CASE            reduce using rule 219 (senslist -> AT LPAREN levelsigs RPAREN .)
    CASEX           reduce using rule 219 (senslist -> AT LPAREN levelsigs RPAREN .)
    CASEZ           reduce using rule 219 (senslist -> AT LPAREN levelsigs RPAREN .)
    UNIQUE          reduce using rule 219 (senslist -> AT LPAREN levelsigs RPAREN .)
    FOR             reduce using rule 219 (senslist -> AT LPAREN levelsigs RPAREN .)
    WHILE           reduce using rule 219 (senslist -> AT LPAREN levelsigs RPAREN .)
    WAIT            reduce using rule 219 (senslist -> AT LPAREN levelsigs RPAREN .)
    FOREVER         reduce using rule 219 (senslist -> AT LPAREN levelsigs RPAREN .)
    BEGIN           reduce using rule 219 (senslist -> AT LPAREN levelsigs RPAREN .)
    FORK            reduce using rule 219 (senslist -> AT LPAREN levelsigs RPAREN .)
    DELAY           reduce using rule 219 (senslist -> AT LPAREN levelsigs RPAREN .)
    AT              reduce using rule 219 (senslist -> AT LPAREN levelsigs RPAREN .)
    DOLLER          reduce using rule 219 (senslist -> AT LPAREN levelsigs RPAREN .)
    DISABLE         reduce using rule 219 (senslist -> AT LPAREN levelsigs RPAREN .)
    LBRACE          reduce using rule 219 (senslist -> AT LPAREN levelsigs RPAREN .)
    ID              reduce using rule 219 (senslist -> AT LPAREN levelsigs RPAREN .)
    SEMICOLON       reduce using rule 219 (senslist -> AT LPAREN levelsigs RPAREN .)


state 597

    (224) levelsigs -> levelsigs SENS_OR . levelsig
    (220) levelsig -> . levelsig_base
    (221) levelsig_base -> . identifier
    (222) levelsig_base -> . pointer
    (223) levelsig_base -> . partselect
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT

    ID              shift and go to state 88

    levelsig                       shift and go to state 700
    levelsig_base                  shift and go to state 342
    identifier                     shift and go to state 343
    pointer                        shift and go to state 344
    partselect                     shift and go to state 345
    scope                          shift and go to state 110

state 598

    (225) levelsigs -> levelsigs COMMA . levelsig
    (220) levelsig -> . levelsig_base
    (221) levelsig_base -> . identifier
    (222) levelsig_base -> . pointer
    (223) levelsig_base -> . partselect
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT

    ID              shift and go to state 88

    levelsig                       shift and go to state 701
    levelsig_base                  shift and go to state 342
    identifier                     shift and go to state 343
    pointer                        shift and go to state 344
    partselect                     shift and go to state 345
    scope                          shift and go to state 110

state 599

    (228) senslist -> AT LPAREN TIMES RPAREN .

    IF              reduce using rule 228 (senslist -> AT LPAREN TIMES RPAREN .)
    CASE            reduce using rule 228 (senslist -> AT LPAREN TIMES RPAREN .)
    CASEX           reduce using rule 228 (senslist -> AT LPAREN TIMES RPAREN .)
    CASEZ           reduce using rule 228 (senslist -> AT LPAREN TIMES RPAREN .)
    UNIQUE          reduce using rule 228 (senslist -> AT LPAREN TIMES RPAREN .)
    FOR             reduce using rule 228 (senslist -> AT LPAREN TIMES RPAREN .)
    WHILE           reduce using rule 228 (senslist -> AT LPAREN TIMES RPAREN .)
    WAIT            reduce using rule 228 (senslist -> AT LPAREN TIMES RPAREN .)
    FOREVER         reduce using rule 228 (senslist -> AT LPAREN TIMES RPAREN .)
    BEGIN           reduce using rule 228 (senslist -> AT LPAREN TIMES RPAREN .)
    FORK            reduce using rule 228 (senslist -> AT LPAREN TIMES RPAREN .)
    DELAY           reduce using rule 228 (senslist -> AT LPAREN TIMES RPAREN .)
    AT              reduce using rule 228 (senslist -> AT LPAREN TIMES RPAREN .)
    DOLLER          reduce using rule 228 (senslist -> AT LPAREN TIMES RPAREN .)
    DISABLE         reduce using rule 228 (senslist -> AT LPAREN TIMES RPAREN .)
    LBRACE          reduce using rule 228 (senslist -> AT LPAREN TIMES RPAREN .)
    ID              reduce using rule 228 (senslist -> AT LPAREN TIMES RPAREN .)
    SEMICOLON       reduce using rule 228 (senslist -> AT LPAREN TIMES RPAREN .)


state 600

    (210) edgesig -> POSEDGE edgesig_base .

    RPAREN          reduce using rule 210 (edgesig -> POSEDGE edgesig_base .)
    SENS_OR         reduce using rule 210 (edgesig -> POSEDGE edgesig_base .)
    COMMA           reduce using rule 210 (edgesig -> POSEDGE edgesig_base .)


state 601

    (212) edgesig_base -> identifier .
    (190) pointer -> identifier . LBRACKET expression RBRACKET
    (407) scope -> identifier . DOT

    RPAREN          reduce using rule 212 (edgesig_base -> identifier .)
    SENS_OR         reduce using rule 212 (edgesig_base -> identifier .)
    COMMA           reduce using rule 212 (edgesig_base -> identifier .)
    LBRACKET        shift and go to state 464
    DOT             shift and go to state 280


state 602

    (213) edgesig_base -> pointer .
    (191) pointer -> pointer . LBRACKET expression RBRACKET
    (408) scope -> pointer . DOT

    RPAREN          reduce using rule 213 (edgesig_base -> pointer .)
    SENS_OR         reduce using rule 213 (edgesig_base -> pointer .)
    COMMA           reduce using rule 213 (edgesig_base -> pointer .)
    LBRACKET        shift and go to state 465
    DOT             shift and go to state 277


state 603

    (211) edgesig -> NEGEDGE edgesig_base .

    RPAREN          reduce using rule 211 (edgesig -> NEGEDGE edgesig_base .)
    SENS_OR         reduce using rule 211 (edgesig -> NEGEDGE edgesig_base .)
    COMMA           reduce using rule 211 (edgesig -> NEGEDGE edgesig_base .)


state 604

    (190) pointer -> identifier LBRACKET expression . RBRACKET
    (184) partselect -> identifier LBRACKET expression . COLON expression RBRACKET
    (185) partselect -> identifier LBRACKET expression . PLUSCOLON expression RBRACKET
    (186) partselect -> identifier LBRACKET expression . MINUSCOLON expression RBRACKET
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 558
    COLON           shift and go to state 557
    PLUSCOLON       shift and go to state 559
    MINUSCOLON      shift and go to state 560
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 605

    (191) pointer -> pointer LBRACKET expression . RBRACKET
    (187) partselect -> pointer LBRACKET expression . COLON expression RBRACKET
    (188) partselect -> pointer LBRACKET expression . PLUSCOLON expression RBRACKET
    (189) partselect -> pointer LBRACKET expression . MINUSCOLON expression RBRACKET
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 554
    COLON           shift and go to state 553
    PLUSCOLON       shift and go to state 555
    MINUSCOLON      shift and go to state 556
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 606

    (271) if_statement -> IF LPAREN cond RPAREN . true_statement ELSE else_statement
    (272) if_statement -> IF LPAREN cond RPAREN . true_statement
    (277) true_statement -> . ifcontent_statement
    (276) ifcontent_statement -> . basic_statement
    (229) basic_statement -> . if_statement
    (230) basic_statement -> . case_statement
    (231) basic_statement -> . casex_statement
    (232) basic_statement -> . casez_statement
    (233) basic_statement -> . unique_case_statement
    (234) basic_statement -> . for_statement
    (235) basic_statement -> . while_statement
    (236) basic_statement -> . event_statement
    (237) basic_statement -> . wait_statement
    (238) basic_statement -> . forever_statement
    (239) basic_statement -> . block
    (240) basic_statement -> . namedblock
    (241) basic_statement -> . parallelblock
    (242) basic_statement -> . blocking_substitution
    (243) basic_statement -> . nonblocking_substitution
    (244) basic_statement -> . single_statement
    (271) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (272) if_statement -> . IF LPAREN cond RPAREN true_statement
    (273) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (274) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (289) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (290) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (291) casez_statement -> . CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (292) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (279) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (287) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (302) event_statement -> . senslist SEMICOLON
    (303) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (306) forever_statement -> . FOREVER basic_statement
    (254) block -> . BEGIN block_statements END
    (255) block -> . BEGIN END
    (259) namedblock -> . BEGIN COLON ID namedblock_statements END
    (260) namedblock -> . BEGIN COLON ID END
    (269) parallelblock -> . FORK block_statements JOIN
    (270) parallelblock -> . FORK JOIN
    (246) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (248) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (410) single_statement -> . DELAY expression SEMICOLON
    (411) single_statement -> . systemcall SEMICOLON
    (412) single_statement -> . disable SEMICOLON
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (209) senslist -> . AT LPAREN edgesigs RPAREN
    (217) senslist -> . empty
    (218) senslist -> . AT levelsig
    (219) senslist -> . AT LPAREN levelsigs RPAREN
    (227) senslist -> . AT TIMES
    (228) senslist -> . AT LPAREN TIMES RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (409) disable -> . DISABLE ID
    (413) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 196
    CASE            shift and go to state 198
    CASEX           shift and go to state 199
    CASEZ           shift and go to state 200
    UNIQUE          shift and go to state 201
    FOR             shift and go to state 202
    WHILE           shift and go to state 203
    WAIT            shift and go to state 205
    FOREVER         shift and go to state 206
    BEGIN           shift and go to state 207
    FORK            shift and go to state 208
    DELAY           shift and go to state 209
    AT              shift and go to state 173
    DOLLER          shift and go to state 109
    DISABLE         shift and go to state 213
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    SEMICOLON       reduce using rule 413 (empty -> .)

  ! IF              [ reduce using rule 413 (empty -> .) ]

    true_statement                 shift and go to state 702
    ifcontent_statement            shift and go to state 703
    basic_statement                shift and go to state 704
    if_statement                   shift and go to state 180
    case_statement                 shift and go to state 181
    casex_statement                shift and go to state 182
    casez_statement                shift and go to state 183
    unique_case_statement          shift and go to state 184
    for_statement                  shift and go to state 185
    while_statement                shift and go to state 186
    event_statement                shift and go to state 187
    wait_statement                 shift and go to state 188
    forever_statement              shift and go to state 189
    block                          shift and go to state 190
    namedblock                     shift and go to state 191
    parallelblock                  shift and go to state 192
    blocking_substitution          shift and go to state 193
    nonblocking_substitution       shift and go to state 194
    single_statement               shift and go to state 195
    delays                         shift and go to state 197
    senslist                       shift and go to state 204
    systemcall                     shift and go to state 210
    disable                        shift and go to state 211
    empty                          shift and go to state 212

state 607

    (273) if_statement -> delays IF LPAREN cond . RPAREN true_statement ELSE else_statement
    (274) if_statement -> delays IF LPAREN cond . RPAREN true_statement

    RPAREN          shift and go to state 705


state 608

    (246) blocking_substitution -> delays lvalue EQUALS delays . rvalue SEMICOLON
    (135) rvalue -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    rvalue                         shift and go to state 706
    expression                     shift and go to state 459
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 609

    (248) nonblocking_substitution -> delays lvalue LE delays . rvalue SEMICOLON
    (135) rvalue -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    rvalue                         shift and go to state 707
    expression                     shift and go to state 459
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 610

    (289) case_statement -> CASE LPAREN case_comp RPAREN . casecontent_statements ENDCASE
    (294) casecontent_statements -> . casecontent_statements casecontent_statement
    (295) casecontent_statements -> . casecontent_statement
    (296) casecontent_statement -> . casecontent_condition COLON basic_statement
    (299) casecontent_statement -> . DEFAULT COLON basic_statement
    (297) casecontent_condition -> . casecontent_condition COMMA expression
    (298) casecontent_condition -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    DEFAULT         shift and go to state 711
    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    casecontent_statements         shift and go to state 708
    casecontent_statement          shift and go to state 709
    casecontent_condition          shift and go to state 710
    expression                     shift and go to state 712
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 611

    (290) casex_statement -> CASEX LPAREN case_comp RPAREN . casecontent_statements ENDCASE
    (294) casecontent_statements -> . casecontent_statements casecontent_statement
    (295) casecontent_statements -> . casecontent_statement
    (296) casecontent_statement -> . casecontent_condition COLON basic_statement
    (299) casecontent_statement -> . DEFAULT COLON basic_statement
    (297) casecontent_condition -> . casecontent_condition COMMA expression
    (298) casecontent_condition -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    DEFAULT         shift and go to state 711
    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    casecontent_statements         shift and go to state 713
    casecontent_statement          shift and go to state 709
    casecontent_condition          shift and go to state 710
    expression                     shift and go to state 712
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 612

    (291) casez_statement -> CASEZ LPAREN case_comp RPAREN . casecontent_statements ENDCASE
    (294) casecontent_statements -> . casecontent_statements casecontent_statement
    (295) casecontent_statements -> . casecontent_statement
    (296) casecontent_statement -> . casecontent_condition COLON basic_statement
    (299) casecontent_statement -> . DEFAULT COLON basic_statement
    (297) casecontent_condition -> . casecontent_condition COMMA expression
    (298) casecontent_condition -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    DEFAULT         shift and go to state 711
    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    casecontent_statements         shift and go to state 714
    casecontent_statement          shift and go to state 709
    casecontent_condition          shift and go to state 710
    expression                     shift and go to state 712
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 613

    (292) unique_case_statement -> UNIQUE CASE LPAREN case_comp . RPAREN casecontent_statements ENDCASE

    RPAREN          shift and go to state 715


state 614

    (279) for_statement -> FOR LPAREN forpre forcond . forpost RPAREN forcontent_statement
    (284) forpost -> . blocking_substitution_base
    (285) forpost -> . empty
    (247) blocking_substitution_base -> . delays lvalue EQUALS delays rvalue
    (413) empty -> .
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty

    RPAREN          reduce using rule 413 (empty -> .)
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    DELAY           shift and go to state 142

    forpost                        shift and go to state 716
    blocking_substitution_base     shift and go to state 684
    empty                          shift and go to state 685
    delays                         shift and go to state 686

state 615

    (287) while_statement -> WHILE LPAREN cond RPAREN . whilecontent_statement
    (288) whilecontent_statement -> . basic_statement
    (229) basic_statement -> . if_statement
    (230) basic_statement -> . case_statement
    (231) basic_statement -> . casex_statement
    (232) basic_statement -> . casez_statement
    (233) basic_statement -> . unique_case_statement
    (234) basic_statement -> . for_statement
    (235) basic_statement -> . while_statement
    (236) basic_statement -> . event_statement
    (237) basic_statement -> . wait_statement
    (238) basic_statement -> . forever_statement
    (239) basic_statement -> . block
    (240) basic_statement -> . namedblock
    (241) basic_statement -> . parallelblock
    (242) basic_statement -> . blocking_substitution
    (243) basic_statement -> . nonblocking_substitution
    (244) basic_statement -> . single_statement
    (271) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (272) if_statement -> . IF LPAREN cond RPAREN true_statement
    (273) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (274) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (289) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (290) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (291) casez_statement -> . CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (292) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (279) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (287) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (302) event_statement -> . senslist SEMICOLON
    (303) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (306) forever_statement -> . FOREVER basic_statement
    (254) block -> . BEGIN block_statements END
    (255) block -> . BEGIN END
    (259) namedblock -> . BEGIN COLON ID namedblock_statements END
    (260) namedblock -> . BEGIN COLON ID END
    (269) parallelblock -> . FORK block_statements JOIN
    (270) parallelblock -> . FORK JOIN
    (246) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (248) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (410) single_statement -> . DELAY expression SEMICOLON
    (411) single_statement -> . systemcall SEMICOLON
    (412) single_statement -> . disable SEMICOLON
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (209) senslist -> . AT LPAREN edgesigs RPAREN
    (217) senslist -> . empty
    (218) senslist -> . AT levelsig
    (219) senslist -> . AT LPAREN levelsigs RPAREN
    (227) senslist -> . AT TIMES
    (228) senslist -> . AT LPAREN TIMES RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (409) disable -> . DISABLE ID
    (413) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 196
    CASE            shift and go to state 198
    CASEX           shift and go to state 199
    CASEZ           shift and go to state 200
    UNIQUE          shift and go to state 201
    FOR             shift and go to state 202
    WHILE           shift and go to state 203
    WAIT            shift and go to state 205
    FOREVER         shift and go to state 206
    BEGIN           shift and go to state 207
    FORK            shift and go to state 208
    DELAY           shift and go to state 209
    AT              shift and go to state 173
    DOLLER          shift and go to state 109
    DISABLE         shift and go to state 213
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    SEMICOLON       reduce using rule 413 (empty -> .)

  ! IF              [ reduce using rule 413 (empty -> .) ]

    whilecontent_statement         shift and go to state 717
    basic_statement                shift and go to state 718
    if_statement                   shift and go to state 180
    case_statement                 shift and go to state 181
    casex_statement                shift and go to state 182
    casez_statement                shift and go to state 183
    unique_case_statement          shift and go to state 184
    for_statement                  shift and go to state 185
    while_statement                shift and go to state 186
    event_statement                shift and go to state 187
    wait_statement                 shift and go to state 188
    forever_statement              shift and go to state 189
    block                          shift and go to state 190
    namedblock                     shift and go to state 191
    parallelblock                  shift and go to state 192
    blocking_substitution          shift and go to state 193
    nonblocking_substitution       shift and go to state 194
    single_statement               shift and go to state 195
    delays                         shift and go to state 197
    senslist                       shift and go to state 204
    systemcall                     shift and go to state 210
    disable                        shift and go to state 211
    empty                          shift and go to state 212

state 616

    (303) wait_statement -> WAIT LPAREN cond RPAREN . waitcontent_statement
    (304) waitcontent_statement -> . basic_statement
    (305) waitcontent_statement -> . SEMICOLON
    (229) basic_statement -> . if_statement
    (230) basic_statement -> . case_statement
    (231) basic_statement -> . casex_statement
    (232) basic_statement -> . casez_statement
    (233) basic_statement -> . unique_case_statement
    (234) basic_statement -> . for_statement
    (235) basic_statement -> . while_statement
    (236) basic_statement -> . event_statement
    (237) basic_statement -> . wait_statement
    (238) basic_statement -> . forever_statement
    (239) basic_statement -> . block
    (240) basic_statement -> . namedblock
    (241) basic_statement -> . parallelblock
    (242) basic_statement -> . blocking_substitution
    (243) basic_statement -> . nonblocking_substitution
    (244) basic_statement -> . single_statement
    (271) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (272) if_statement -> . IF LPAREN cond RPAREN true_statement
    (273) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (274) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (289) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (290) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (291) casez_statement -> . CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (292) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (279) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (287) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (302) event_statement -> . senslist SEMICOLON
    (303) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (306) forever_statement -> . FOREVER basic_statement
    (254) block -> . BEGIN block_statements END
    (255) block -> . BEGIN END
    (259) namedblock -> . BEGIN COLON ID namedblock_statements END
    (260) namedblock -> . BEGIN COLON ID END
    (269) parallelblock -> . FORK block_statements JOIN
    (270) parallelblock -> . FORK JOIN
    (246) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (248) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (410) single_statement -> . DELAY expression SEMICOLON
    (411) single_statement -> . systemcall SEMICOLON
    (412) single_statement -> . disable SEMICOLON
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (209) senslist -> . AT LPAREN edgesigs RPAREN
    (217) senslist -> . empty
    (218) senslist -> . AT levelsig
    (219) senslist -> . AT LPAREN levelsigs RPAREN
    (227) senslist -> . AT TIMES
    (228) senslist -> . AT LPAREN TIMES RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (409) disable -> . DISABLE ID
    (413) empty -> .

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 721
    IF              shift and go to state 196
    CASE            shift and go to state 198
    CASEX           shift and go to state 199
    CASEZ           shift and go to state 200
    UNIQUE          shift and go to state 201
    FOR             shift and go to state 202
    WHILE           shift and go to state 203
    WAIT            shift and go to state 205
    FOREVER         shift and go to state 206
    BEGIN           shift and go to state 207
    FORK            shift and go to state 208
    DELAY           shift and go to state 209
    AT              shift and go to state 173
    DOLLER          shift and go to state 109
    DISABLE         shift and go to state 213
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)

  ! IF              [ reduce using rule 413 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 413 (empty -> .) ]

    waitcontent_statement          shift and go to state 719
    basic_statement                shift and go to state 720
    if_statement                   shift and go to state 180
    case_statement                 shift and go to state 181
    casex_statement                shift and go to state 182
    casez_statement                shift and go to state 183
    unique_case_statement          shift and go to state 184
    for_statement                  shift and go to state 185
    while_statement                shift and go to state 186
    event_statement                shift and go to state 187
    wait_statement                 shift and go to state 188
    forever_statement              shift and go to state 189
    block                          shift and go to state 190
    namedblock                     shift and go to state 191
    parallelblock                  shift and go to state 192
    blocking_substitution          shift and go to state 193
    nonblocking_substitution       shift and go to state 194
    single_statement               shift and go to state 195
    delays                         shift and go to state 197
    senslist                       shift and go to state 204
    systemcall                     shift and go to state 210
    disable                        shift and go to state 211
    empty                          shift and go to state 212

state 617

    (259) namedblock -> BEGIN COLON ID namedblock_statements . END
    (261) namedblock_statements -> namedblock_statements . namedblock_statement
    (263) namedblock_statement -> . basic_statement
    (264) namedblock_statement -> . decl
    (265) namedblock_statement -> . integerdecl
    (266) namedblock_statement -> . realdecl
    (267) namedblock_statement -> . parameterdecl
    (268) namedblock_statement -> . localparamdecl
    (229) basic_statement -> . if_statement
    (230) basic_statement -> . case_statement
    (231) basic_statement -> . casex_statement
    (232) basic_statement -> . casez_statement
    (233) basic_statement -> . unique_case_statement
    (234) basic_statement -> . for_statement
    (235) basic_statement -> . while_statement
    (236) basic_statement -> . event_statement
    (237) basic_statement -> . wait_statement
    (238) basic_statement -> . forever_statement
    (239) basic_statement -> . block
    (240) basic_statement -> . namedblock
    (241) basic_statement -> . parallelblock
    (242) basic_statement -> . blocking_substitution
    (243) basic_statement -> . nonblocking_substitution
    (244) basic_statement -> . single_statement
    (82) decl -> . sigtypes declnamelist SEMICOLON
    (83) decl -> . sigtypes width declnamelist SEMICOLON
    (92) integerdecl -> . INTEGER integernamelist SEMICOLON
    (93) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (98) realdecl -> . REAL realnamelist SEMICOLON
    (102) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (103) parameterdecl -> . PARAMETER SIGNED param_substitution_list SEMICOLON
    (104) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (105) parameterdecl -> . PARAMETER SIGNED width param_substitution_list SEMICOLON
    (106) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (107) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (108) localparamdecl -> . LOCALPARAM SIGNED param_substitution_list SEMICOLON
    (109) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (110) localparamdecl -> . LOCALPARAM SIGNED width param_substitution_list SEMICOLON
    (111) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (271) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (272) if_statement -> . IF LPAREN cond RPAREN true_statement
    (273) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (274) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (289) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (290) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (291) casez_statement -> . CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (292) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (279) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (287) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (302) event_statement -> . senslist SEMICOLON
    (303) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (306) forever_statement -> . FOREVER basic_statement
    (254) block -> . BEGIN block_statements END
    (255) block -> . BEGIN END
    (259) namedblock -> . BEGIN COLON ID namedblock_statements END
    (260) namedblock -> . BEGIN COLON ID END
    (269) parallelblock -> . FORK block_statements JOIN
    (270) parallelblock -> . FORK JOIN
    (246) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (248) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (410) single_statement -> . DELAY expression SEMICOLON
    (411) single_statement -> . systemcall SEMICOLON
    (412) single_statement -> . disable SEMICOLON
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (209) senslist -> . AT LPAREN edgesigs RPAREN
    (217) senslist -> . empty
    (218) senslist -> . AT levelsig
    (219) senslist -> . AT LPAREN levelsigs RPAREN
    (227) senslist -> . AT TIMES
    (228) senslist -> . AT LPAREN TIMES RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (409) disable -> . DISABLE ID
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1
    (413) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    END             shift and go to state 722
    INTEGER         shift and go to state 48
    REAL            shift and go to state 50
    PARAMETER       shift and go to state 51
    LOCALPARAM      shift and go to state 52
    IF              shift and go to state 196
    CASE            shift and go to state 198
    CASEX           shift and go to state 199
    CASEZ           shift and go to state 200
    UNIQUE          shift and go to state 201
    FOR             shift and go to state 202
    WHILE           shift and go to state 203
    WAIT            shift and go to state 205
    FOREVER         shift and go to state 206
    BEGIN           shift and go to state 207
    FORK            shift and go to state 208
    DELAY           shift and go to state 209
    AT              shift and go to state 173
    DOLLER          shift and go to state 109
    DISABLE         shift and go to state 213
    INPUT           shift and go to state 65
    OUTPUT          shift and go to state 66
    INOUT           shift and go to state 67
    TRI             shift and go to state 68
    REG             shift and go to state 69
    LOGIC           shift and go to state 70
    WIRE            shift and go to state 71
    SIGNED          shift and go to state 49
    SUPPLY0         shift and go to state 72
    SUPPLY1         shift and go to state 73
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    SEMICOLON       reduce using rule 413 (empty -> .)

  ! IF              [ reduce using rule 413 (empty -> .) ]

    namedblock_statement           shift and go to state 723
    basic_statement                shift and go to state 620
    decl                           shift and go to state 621
    integerdecl                    shift and go to state 622
    realdecl                       shift and go to state 623
    parameterdecl                  shift and go to state 624
    localparamdecl                 shift and go to state 625
    if_statement                   shift and go to state 180
    case_statement                 shift and go to state 181
    casex_statement                shift and go to state 182
    casez_statement                shift and go to state 183
    unique_case_statement          shift and go to state 184
    for_statement                  shift and go to state 185
    while_statement                shift and go to state 186
    event_statement                shift and go to state 187
    wait_statement                 shift and go to state 188
    forever_statement              shift and go to state 189
    block                          shift and go to state 190
    namedblock                     shift and go to state 191
    parallelblock                  shift and go to state 192
    blocking_substitution          shift and go to state 193
    nonblocking_substitution       shift and go to state 194
    single_statement               shift and go to state 195
    sigtypes                       shift and go to state 537
    delays                         shift and go to state 197
    senslist                       shift and go to state 204
    systemcall                     shift and go to state 210
    disable                        shift and go to state 211
    sigtype                        shift and go to state 64
    empty                          shift and go to state 212

state 618

    (260) namedblock -> BEGIN COLON ID END .

    ENDMODULE       reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    GENERATE        reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    INTEGER         reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    REAL            reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    PARAMETER       reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    LOCALPARAM      reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    GENVAR          reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    ASSIGN          reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    ALWAYS          reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    ALWAYS_FF       reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    ALWAYS_COMB     reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    ALWAYS_LATCH    reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    INITIAL         reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    ID              reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    SENS_OR         reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    FUNCTION        reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    TASK            reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    LPAREN          reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    INPUT           reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    OUTPUT          reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    INOUT           reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    TRI             reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    REG             reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    LOGIC           reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    WIRE            reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    SIGNED          reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    SUPPLY0         reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    SUPPLY1         reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    ENDGENERATE     reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    IF              reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    FOR             reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    ELSE            reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    END             reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    CASE            reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    CASEX           reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    CASEZ           reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    UNIQUE          reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    WHILE           reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    WAIT            reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    FOREVER         reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    BEGIN           reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    FORK            reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    DELAY           reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    AT              reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    DOLLER          reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    DISABLE         reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    LBRACE          reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    SEMICOLON       reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    JOIN            reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    ENDFUNCTION     reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    ENDTASK         reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    ENDCASE         reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    DEFAULT         reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    MINUS           reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    PLUS            reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    LNOT            reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    NOT             reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    AND             reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    NAND            reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    NOR             reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    OR              reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    XOR             reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    XNOR            reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    INTNUMBER_DEC   reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    SIGNED_INTNUMBER_DEC reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    INTNUMBER_BIN   reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    SIGNED_INTNUMBER_BIN reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    INTNUMBER_OCT   reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    SIGNED_INTNUMBER_OCT reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    INTNUMBER_HEX   reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    SIGNED_INTNUMBER_HEX reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    FLOATNUMBER     reduce using rule 260 (namedblock -> BEGIN COLON ID END .)
    STRING_LITERAL  reduce using rule 260 (namedblock -> BEGIN COLON ID END .)


state 619

    (262) namedblock_statements -> namedblock_statement .

    END             reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    INTEGER         reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    REAL            reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    PARAMETER       reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    LOCALPARAM      reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    IF              reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    CASE            reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    CASEX           reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    CASEZ           reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    UNIQUE          reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    FOR             reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    WHILE           reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    WAIT            reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    FOREVER         reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    BEGIN           reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    FORK            reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    DELAY           reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    AT              reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    DOLLER          reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    DISABLE         reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    INPUT           reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    OUTPUT          reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    INOUT           reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    TRI             reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    REG             reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    LOGIC           reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    WIRE            reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    SIGNED          reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    SUPPLY0         reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    SUPPLY1         reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    LBRACE          reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    ID              reduce using rule 262 (namedblock_statements -> namedblock_statement .)
    SEMICOLON       reduce using rule 262 (namedblock_statements -> namedblock_statement .)


state 620

    (263) namedblock_statement -> basic_statement .

    END             reduce using rule 263 (namedblock_statement -> basic_statement .)
    INTEGER         reduce using rule 263 (namedblock_statement -> basic_statement .)
    REAL            reduce using rule 263 (namedblock_statement -> basic_statement .)
    PARAMETER       reduce using rule 263 (namedblock_statement -> basic_statement .)
    LOCALPARAM      reduce using rule 263 (namedblock_statement -> basic_statement .)
    IF              reduce using rule 263 (namedblock_statement -> basic_statement .)
    CASE            reduce using rule 263 (namedblock_statement -> basic_statement .)
    CASEX           reduce using rule 263 (namedblock_statement -> basic_statement .)
    CASEZ           reduce using rule 263 (namedblock_statement -> basic_statement .)
    UNIQUE          reduce using rule 263 (namedblock_statement -> basic_statement .)
    FOR             reduce using rule 263 (namedblock_statement -> basic_statement .)
    WHILE           reduce using rule 263 (namedblock_statement -> basic_statement .)
    WAIT            reduce using rule 263 (namedblock_statement -> basic_statement .)
    FOREVER         reduce using rule 263 (namedblock_statement -> basic_statement .)
    BEGIN           reduce using rule 263 (namedblock_statement -> basic_statement .)
    FORK            reduce using rule 263 (namedblock_statement -> basic_statement .)
    DELAY           reduce using rule 263 (namedblock_statement -> basic_statement .)
    AT              reduce using rule 263 (namedblock_statement -> basic_statement .)
    DOLLER          reduce using rule 263 (namedblock_statement -> basic_statement .)
    DISABLE         reduce using rule 263 (namedblock_statement -> basic_statement .)
    INPUT           reduce using rule 263 (namedblock_statement -> basic_statement .)
    OUTPUT          reduce using rule 263 (namedblock_statement -> basic_statement .)
    INOUT           reduce using rule 263 (namedblock_statement -> basic_statement .)
    TRI             reduce using rule 263 (namedblock_statement -> basic_statement .)
    REG             reduce using rule 263 (namedblock_statement -> basic_statement .)
    LOGIC           reduce using rule 263 (namedblock_statement -> basic_statement .)
    WIRE            reduce using rule 263 (namedblock_statement -> basic_statement .)
    SIGNED          reduce using rule 263 (namedblock_statement -> basic_statement .)
    SUPPLY0         reduce using rule 263 (namedblock_statement -> basic_statement .)
    SUPPLY1         reduce using rule 263 (namedblock_statement -> basic_statement .)
    LBRACE          reduce using rule 263 (namedblock_statement -> basic_statement .)
    ID              reduce using rule 263 (namedblock_statement -> basic_statement .)
    SEMICOLON       reduce using rule 263 (namedblock_statement -> basic_statement .)


state 621

    (264) namedblock_statement -> decl .

    END             reduce using rule 264 (namedblock_statement -> decl .)
    INTEGER         reduce using rule 264 (namedblock_statement -> decl .)
    REAL            reduce using rule 264 (namedblock_statement -> decl .)
    PARAMETER       reduce using rule 264 (namedblock_statement -> decl .)
    LOCALPARAM      reduce using rule 264 (namedblock_statement -> decl .)
    IF              reduce using rule 264 (namedblock_statement -> decl .)
    CASE            reduce using rule 264 (namedblock_statement -> decl .)
    CASEX           reduce using rule 264 (namedblock_statement -> decl .)
    CASEZ           reduce using rule 264 (namedblock_statement -> decl .)
    UNIQUE          reduce using rule 264 (namedblock_statement -> decl .)
    FOR             reduce using rule 264 (namedblock_statement -> decl .)
    WHILE           reduce using rule 264 (namedblock_statement -> decl .)
    WAIT            reduce using rule 264 (namedblock_statement -> decl .)
    FOREVER         reduce using rule 264 (namedblock_statement -> decl .)
    BEGIN           reduce using rule 264 (namedblock_statement -> decl .)
    FORK            reduce using rule 264 (namedblock_statement -> decl .)
    DELAY           reduce using rule 264 (namedblock_statement -> decl .)
    AT              reduce using rule 264 (namedblock_statement -> decl .)
    DOLLER          reduce using rule 264 (namedblock_statement -> decl .)
    DISABLE         reduce using rule 264 (namedblock_statement -> decl .)
    INPUT           reduce using rule 264 (namedblock_statement -> decl .)
    OUTPUT          reduce using rule 264 (namedblock_statement -> decl .)
    INOUT           reduce using rule 264 (namedblock_statement -> decl .)
    TRI             reduce using rule 264 (namedblock_statement -> decl .)
    REG             reduce using rule 264 (namedblock_statement -> decl .)
    LOGIC           reduce using rule 264 (namedblock_statement -> decl .)
    WIRE            reduce using rule 264 (namedblock_statement -> decl .)
    SIGNED          reduce using rule 264 (namedblock_statement -> decl .)
    SUPPLY0         reduce using rule 264 (namedblock_statement -> decl .)
    SUPPLY1         reduce using rule 264 (namedblock_statement -> decl .)
    LBRACE          reduce using rule 264 (namedblock_statement -> decl .)
    ID              reduce using rule 264 (namedblock_statement -> decl .)
    SEMICOLON       reduce using rule 264 (namedblock_statement -> decl .)


state 622

    (265) namedblock_statement -> integerdecl .

    END             reduce using rule 265 (namedblock_statement -> integerdecl .)
    INTEGER         reduce using rule 265 (namedblock_statement -> integerdecl .)
    REAL            reduce using rule 265 (namedblock_statement -> integerdecl .)
    PARAMETER       reduce using rule 265 (namedblock_statement -> integerdecl .)
    LOCALPARAM      reduce using rule 265 (namedblock_statement -> integerdecl .)
    IF              reduce using rule 265 (namedblock_statement -> integerdecl .)
    CASE            reduce using rule 265 (namedblock_statement -> integerdecl .)
    CASEX           reduce using rule 265 (namedblock_statement -> integerdecl .)
    CASEZ           reduce using rule 265 (namedblock_statement -> integerdecl .)
    UNIQUE          reduce using rule 265 (namedblock_statement -> integerdecl .)
    FOR             reduce using rule 265 (namedblock_statement -> integerdecl .)
    WHILE           reduce using rule 265 (namedblock_statement -> integerdecl .)
    WAIT            reduce using rule 265 (namedblock_statement -> integerdecl .)
    FOREVER         reduce using rule 265 (namedblock_statement -> integerdecl .)
    BEGIN           reduce using rule 265 (namedblock_statement -> integerdecl .)
    FORK            reduce using rule 265 (namedblock_statement -> integerdecl .)
    DELAY           reduce using rule 265 (namedblock_statement -> integerdecl .)
    AT              reduce using rule 265 (namedblock_statement -> integerdecl .)
    DOLLER          reduce using rule 265 (namedblock_statement -> integerdecl .)
    DISABLE         reduce using rule 265 (namedblock_statement -> integerdecl .)
    INPUT           reduce using rule 265 (namedblock_statement -> integerdecl .)
    OUTPUT          reduce using rule 265 (namedblock_statement -> integerdecl .)
    INOUT           reduce using rule 265 (namedblock_statement -> integerdecl .)
    TRI             reduce using rule 265 (namedblock_statement -> integerdecl .)
    REG             reduce using rule 265 (namedblock_statement -> integerdecl .)
    LOGIC           reduce using rule 265 (namedblock_statement -> integerdecl .)
    WIRE            reduce using rule 265 (namedblock_statement -> integerdecl .)
    SIGNED          reduce using rule 265 (namedblock_statement -> integerdecl .)
    SUPPLY0         reduce using rule 265 (namedblock_statement -> integerdecl .)
    SUPPLY1         reduce using rule 265 (namedblock_statement -> integerdecl .)
    LBRACE          reduce using rule 265 (namedblock_statement -> integerdecl .)
    ID              reduce using rule 265 (namedblock_statement -> integerdecl .)
    SEMICOLON       reduce using rule 265 (namedblock_statement -> integerdecl .)


state 623

    (266) namedblock_statement -> realdecl .

    END             reduce using rule 266 (namedblock_statement -> realdecl .)
    INTEGER         reduce using rule 266 (namedblock_statement -> realdecl .)
    REAL            reduce using rule 266 (namedblock_statement -> realdecl .)
    PARAMETER       reduce using rule 266 (namedblock_statement -> realdecl .)
    LOCALPARAM      reduce using rule 266 (namedblock_statement -> realdecl .)
    IF              reduce using rule 266 (namedblock_statement -> realdecl .)
    CASE            reduce using rule 266 (namedblock_statement -> realdecl .)
    CASEX           reduce using rule 266 (namedblock_statement -> realdecl .)
    CASEZ           reduce using rule 266 (namedblock_statement -> realdecl .)
    UNIQUE          reduce using rule 266 (namedblock_statement -> realdecl .)
    FOR             reduce using rule 266 (namedblock_statement -> realdecl .)
    WHILE           reduce using rule 266 (namedblock_statement -> realdecl .)
    WAIT            reduce using rule 266 (namedblock_statement -> realdecl .)
    FOREVER         reduce using rule 266 (namedblock_statement -> realdecl .)
    BEGIN           reduce using rule 266 (namedblock_statement -> realdecl .)
    FORK            reduce using rule 266 (namedblock_statement -> realdecl .)
    DELAY           reduce using rule 266 (namedblock_statement -> realdecl .)
    AT              reduce using rule 266 (namedblock_statement -> realdecl .)
    DOLLER          reduce using rule 266 (namedblock_statement -> realdecl .)
    DISABLE         reduce using rule 266 (namedblock_statement -> realdecl .)
    INPUT           reduce using rule 266 (namedblock_statement -> realdecl .)
    OUTPUT          reduce using rule 266 (namedblock_statement -> realdecl .)
    INOUT           reduce using rule 266 (namedblock_statement -> realdecl .)
    TRI             reduce using rule 266 (namedblock_statement -> realdecl .)
    REG             reduce using rule 266 (namedblock_statement -> realdecl .)
    LOGIC           reduce using rule 266 (namedblock_statement -> realdecl .)
    WIRE            reduce using rule 266 (namedblock_statement -> realdecl .)
    SIGNED          reduce using rule 266 (namedblock_statement -> realdecl .)
    SUPPLY0         reduce using rule 266 (namedblock_statement -> realdecl .)
    SUPPLY1         reduce using rule 266 (namedblock_statement -> realdecl .)
    LBRACE          reduce using rule 266 (namedblock_statement -> realdecl .)
    ID              reduce using rule 266 (namedblock_statement -> realdecl .)
    SEMICOLON       reduce using rule 266 (namedblock_statement -> realdecl .)


state 624

    (267) namedblock_statement -> parameterdecl .

    END             reduce using rule 267 (namedblock_statement -> parameterdecl .)
    INTEGER         reduce using rule 267 (namedblock_statement -> parameterdecl .)
    REAL            reduce using rule 267 (namedblock_statement -> parameterdecl .)
    PARAMETER       reduce using rule 267 (namedblock_statement -> parameterdecl .)
    LOCALPARAM      reduce using rule 267 (namedblock_statement -> parameterdecl .)
    IF              reduce using rule 267 (namedblock_statement -> parameterdecl .)
    CASE            reduce using rule 267 (namedblock_statement -> parameterdecl .)
    CASEX           reduce using rule 267 (namedblock_statement -> parameterdecl .)
    CASEZ           reduce using rule 267 (namedblock_statement -> parameterdecl .)
    UNIQUE          reduce using rule 267 (namedblock_statement -> parameterdecl .)
    FOR             reduce using rule 267 (namedblock_statement -> parameterdecl .)
    WHILE           reduce using rule 267 (namedblock_statement -> parameterdecl .)
    WAIT            reduce using rule 267 (namedblock_statement -> parameterdecl .)
    FOREVER         reduce using rule 267 (namedblock_statement -> parameterdecl .)
    BEGIN           reduce using rule 267 (namedblock_statement -> parameterdecl .)
    FORK            reduce using rule 267 (namedblock_statement -> parameterdecl .)
    DELAY           reduce using rule 267 (namedblock_statement -> parameterdecl .)
    AT              reduce using rule 267 (namedblock_statement -> parameterdecl .)
    DOLLER          reduce using rule 267 (namedblock_statement -> parameterdecl .)
    DISABLE         reduce using rule 267 (namedblock_statement -> parameterdecl .)
    INPUT           reduce using rule 267 (namedblock_statement -> parameterdecl .)
    OUTPUT          reduce using rule 267 (namedblock_statement -> parameterdecl .)
    INOUT           reduce using rule 267 (namedblock_statement -> parameterdecl .)
    TRI             reduce using rule 267 (namedblock_statement -> parameterdecl .)
    REG             reduce using rule 267 (namedblock_statement -> parameterdecl .)
    LOGIC           reduce using rule 267 (namedblock_statement -> parameterdecl .)
    WIRE            reduce using rule 267 (namedblock_statement -> parameterdecl .)
    SIGNED          reduce using rule 267 (namedblock_statement -> parameterdecl .)
    SUPPLY0         reduce using rule 267 (namedblock_statement -> parameterdecl .)
    SUPPLY1         reduce using rule 267 (namedblock_statement -> parameterdecl .)
    LBRACE          reduce using rule 267 (namedblock_statement -> parameterdecl .)
    ID              reduce using rule 267 (namedblock_statement -> parameterdecl .)
    SEMICOLON       reduce using rule 267 (namedblock_statement -> parameterdecl .)


state 625

    (268) namedblock_statement -> localparamdecl .

    END             reduce using rule 268 (namedblock_statement -> localparamdecl .)
    INTEGER         reduce using rule 268 (namedblock_statement -> localparamdecl .)
    REAL            reduce using rule 268 (namedblock_statement -> localparamdecl .)
    PARAMETER       reduce using rule 268 (namedblock_statement -> localparamdecl .)
    LOCALPARAM      reduce using rule 268 (namedblock_statement -> localparamdecl .)
    IF              reduce using rule 268 (namedblock_statement -> localparamdecl .)
    CASE            reduce using rule 268 (namedblock_statement -> localparamdecl .)
    CASEX           reduce using rule 268 (namedblock_statement -> localparamdecl .)
    CASEZ           reduce using rule 268 (namedblock_statement -> localparamdecl .)
    UNIQUE          reduce using rule 268 (namedblock_statement -> localparamdecl .)
    FOR             reduce using rule 268 (namedblock_statement -> localparamdecl .)
    WHILE           reduce using rule 268 (namedblock_statement -> localparamdecl .)
    WAIT            reduce using rule 268 (namedblock_statement -> localparamdecl .)
    FOREVER         reduce using rule 268 (namedblock_statement -> localparamdecl .)
    BEGIN           reduce using rule 268 (namedblock_statement -> localparamdecl .)
    FORK            reduce using rule 268 (namedblock_statement -> localparamdecl .)
    DELAY           reduce using rule 268 (namedblock_statement -> localparamdecl .)
    AT              reduce using rule 268 (namedblock_statement -> localparamdecl .)
    DOLLER          reduce using rule 268 (namedblock_statement -> localparamdecl .)
    DISABLE         reduce using rule 268 (namedblock_statement -> localparamdecl .)
    INPUT           reduce using rule 268 (namedblock_statement -> localparamdecl .)
    OUTPUT          reduce using rule 268 (namedblock_statement -> localparamdecl .)
    INOUT           reduce using rule 268 (namedblock_statement -> localparamdecl .)
    TRI             reduce using rule 268 (namedblock_statement -> localparamdecl .)
    REG             reduce using rule 268 (namedblock_statement -> localparamdecl .)
    LOGIC           reduce using rule 268 (namedblock_statement -> localparamdecl .)
    WIRE            reduce using rule 268 (namedblock_statement -> localparamdecl .)
    SIGNED          reduce using rule 268 (namedblock_statement -> localparamdecl .)
    SUPPLY0         reduce using rule 268 (namedblock_statement -> localparamdecl .)
    SUPPLY1         reduce using rule 268 (namedblock_statement -> localparamdecl .)
    LBRACE          reduce using rule 268 (namedblock_statement -> localparamdecl .)
    ID              reduce using rule 268 (namedblock_statement -> localparamdecl .)
    SEMICOLON       reduce using rule 268 (namedblock_statement -> localparamdecl .)


state 626

    (249) delays -> DELAY LPAREN expression RPAREN .
    (171) expression -> LPAREN expression RPAREN .

    IF              reduce using rule 249 (delays -> DELAY LPAREN expression RPAREN .)
    LBRACE          reduce using rule 249 (delays -> DELAY LPAREN expression RPAREN .)
    ID              reduce using rule 249 (delays -> DELAY LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    LSHIFTA         reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    RSHIFTA         reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    EQL             reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    NEL             reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    XNOR            reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 171 (expression -> LPAREN expression RPAREN .)
    COND            reduce using rule 171 (expression -> LPAREN expression RPAREN .)


state 627

    (311) instance_body -> ID LPAREN instance_ports . RPAREN

    RPAREN          shift and go to state 724


state 628

    (312) instance_body -> ID width LPAREN . instance_ports RPAREN
    (328) instance_ports -> . instance_ports_list
    (329) instance_ports -> . instance_ports_arg
    (330) instance_ports_list -> . instance_ports_list COMMA instance_port_list
    (331) instance_ports_list -> . instance_port_list
    (332) instance_ports_list -> . empty
    (334) instance_ports_arg -> . instance_ports_arg COMMA instance_port_arg
    (335) instance_ports_arg -> . instance_port_arg
    (333) instance_port_list -> . expression
    (413) empty -> .
    (336) instance_port_arg -> . DOT ID LPAREN identifier RPAREN
    (337) instance_port_arg -> . DOT ID LPAREN expression RPAREN
    (338) instance_port_arg -> . DOT ID LPAREN RPAREN
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    COMMA           reduce using rule 413 (empty -> .)
    RPAREN          reduce using rule 413 (empty -> .)
    DOT             shift and go to state 389
    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    instance_ports                 shift and go to state 725
    instance_ports_list            shift and go to state 383
    instance_ports_arg             shift and go to state 384
    instance_port_list             shift and go to state 385
    empty                          shift and go to state 386
    instance_port_arg              shift and go to state 387
    expression                     shift and go to state 388
    identifier                     shift and go to state 106
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 629

    (309) instance_bodylist -> instance_bodylist COMMA instance_body .

    SEMICOLON       reduce using rule 309 (instance_bodylist -> instance_bodylist COMMA instance_body .)
    COMMA           reduce using rule 309 (instance_bodylist -> instance_bodylist COMMA instance_body .)


state 630

    (318) parameterlist -> DELAY LPAREN param_args RPAREN .

    ID              reduce using rule 318 (parameterlist -> DELAY LPAREN param_args RPAREN .)


state 631

    (323) param_args -> param_args COMMA . param_arg
    (327) param_arg -> . DOT ID LPAREN expression RPAREN

    DOT             shift and go to state 524

    param_arg                      shift and go to state 726

state 632

    (319) parameterlist -> DELAY LPAREN param_args_noname RPAREN .

    ID              reduce using rule 319 (parameterlist -> DELAY LPAREN param_args_noname RPAREN .)


state 633

    (321) param_args_noname -> param_args_noname COMMA . param_arg_noname
    (326) param_arg_noname -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    param_arg_noname               shift and go to state 727
    expression                     shift and go to state 525
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 634

    (327) param_arg -> DOT ID . LPAREN expression RPAREN

    LPAREN          shift and go to state 728


state 635

    (330) instance_ports_list -> instance_ports_list COMMA instance_port_list .

    COMMA           reduce using rule 330 (instance_ports_list -> instance_ports_list COMMA instance_port_list .)
    RPAREN          reduce using rule 330 (instance_ports_list -> instance_ports_list COMMA instance_port_list .)


state 636

    (334) instance_ports_arg -> instance_ports_arg COMMA instance_port_arg .

    COMMA           reduce using rule 334 (instance_ports_arg -> instance_ports_arg COMMA instance_port_arg .)
    RPAREN          reduce using rule 334 (instance_ports_arg -> instance_ports_arg COMMA instance_port_arg .)


state 637

    (336) instance_port_arg -> DOT ID LPAREN . identifier RPAREN
    (337) instance_port_arg -> DOT ID LPAREN . expression RPAREN
    (338) instance_port_arg -> DOT ID LPAREN . RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    RPAREN          shift and go to state 730
    ID              shift and go to state 88
    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    identifier                     shift and go to state 729
    expression                     shift and go to state 731
    scope                          shift and go to state 110
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 732
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    const_expression               shift and go to state 107
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 638

    (368) function -> FUNCTION width ID SEMICOLON function_statement . ENDFUNCTION

    ENDFUNCTION     shift and go to state 733


state 639

    (369) function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .

    ENDMODULE       reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    GENERATE        reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    INTEGER         reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    REAL            reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    PARAMETER       reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    LOCALPARAM      reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    GENVAR          reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    ASSIGN          reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    ALWAYS          reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    ALWAYS_FF       reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    ALWAYS_COMB     reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    ALWAYS_LATCH    reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    INITIAL         reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    ID              reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    SENS_OR         reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    FUNCTION        reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    TASK            reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    LPAREN          reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    INPUT           reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    OUTPUT          reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    INOUT           reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    TRI             reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    REG             reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    LOGIC           reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    WIRE            reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    SIGNED          reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    SUPPLY0         reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    SUPPLY1         reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    ENDGENERATE     reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    IF              reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    FOR             reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    ELSE            reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    END             reduce using rule 369 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)


state 640

    (371) function_statement -> funcvardecls function_calc .

    ENDFUNCTION     reduce using rule 371 (function_statement -> funcvardecls function_calc .)


state 641

    (372) funcvardecls -> funcvardecls funcvardecl .

    IF              reduce using rule 372 (funcvardecls -> funcvardecls funcvardecl .)
    FOR             reduce using rule 372 (funcvardecls -> funcvardecls funcvardecl .)
    WHILE           reduce using rule 372 (funcvardecls -> funcvardecls funcvardecl .)
    CASE            reduce using rule 372 (funcvardecls -> funcvardecls funcvardecl .)
    CASEX           reduce using rule 372 (funcvardecls -> funcvardecls funcvardecl .)
    CASEZ           reduce using rule 372 (funcvardecls -> funcvardecls funcvardecl .)
    BEGIN           reduce using rule 372 (funcvardecls -> funcvardecls funcvardecl .)
    INTEGER         reduce using rule 372 (funcvardecls -> funcvardecls funcvardecl .)
    DELAY           reduce using rule 372 (funcvardecls -> funcvardecls funcvardecl .)
    INPUT           reduce using rule 372 (funcvardecls -> funcvardecls funcvardecl .)
    OUTPUT          reduce using rule 372 (funcvardecls -> funcvardecls funcvardecl .)
    INOUT           reduce using rule 372 (funcvardecls -> funcvardecls funcvardecl .)
    TRI             reduce using rule 372 (funcvardecls -> funcvardecls funcvardecl .)
    REG             reduce using rule 372 (funcvardecls -> funcvardecls funcvardecl .)
    LOGIC           reduce using rule 372 (funcvardecls -> funcvardecls funcvardecl .)
    WIRE            reduce using rule 372 (funcvardecls -> funcvardecls funcvardecl .)
    SIGNED          reduce using rule 372 (funcvardecls -> funcvardecls funcvardecl .)
    SUPPLY0         reduce using rule 372 (funcvardecls -> funcvardecls funcvardecl .)
    SUPPLY1         reduce using rule 372 (funcvardecls -> funcvardecls funcvardecl .)
    LBRACE          reduce using rule 372 (funcvardecls -> funcvardecls funcvardecl .)
    ID              reduce using rule 372 (funcvardecls -> funcvardecls funcvardecl .)


state 642

    (376) function_calc -> blocking_substitution .

    ENDFUNCTION     reduce using rule 376 (function_calc -> blocking_substitution .)


state 643

    (377) function_calc -> if_statement .

    ENDFUNCTION     reduce using rule 377 (function_calc -> if_statement .)


state 644

    (378) function_calc -> for_statement .

    ENDFUNCTION     reduce using rule 378 (function_calc -> for_statement .)


state 645

    (379) function_calc -> while_statement .

    ENDFUNCTION     reduce using rule 379 (function_calc -> while_statement .)


state 646

    (380) function_calc -> case_statement .

    ENDFUNCTION     reduce using rule 380 (function_calc -> case_statement .)


state 647

    (381) function_calc -> casex_statement .

    ENDFUNCTION     reduce using rule 381 (function_calc -> casex_statement .)


state 648

    (382) function_calc -> casez_statement .

    ENDFUNCTION     reduce using rule 382 (function_calc -> casez_statement .)


state 649

    (383) function_calc -> block .

    ENDFUNCTION     reduce using rule 383 (function_calc -> block .)


state 650

    (384) function_calc -> namedblock .

    ENDFUNCTION     reduce using rule 384 (function_calc -> namedblock .)


state 651

    (246) blocking_substitution -> delays . lvalue EQUALS delays rvalue SEMICOLON
    (273) if_statement -> delays . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (274) if_statement -> delays . IF LPAREN cond RPAREN true_statement
    (131) lvalue -> . lpartselect
    (132) lvalue -> . lpointer
    (133) lvalue -> . lconcat
    (134) lvalue -> . identifier
    (117) lpartselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (118) lpartselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (119) lpartselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (120) lpartselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (121) lpartselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (122) lpartselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (123) lpointer -> . pointer
    (124) lconcat -> . LBRACE lconcatlist RBRACE
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT

    IF              shift and go to state 350
    LBRACE          shift and go to state 171
    ID              shift and go to state 88

    lvalue                         shift and go to state 575
    lpartselect                    shift and go to state 166
    lpointer                       shift and go to state 167
    lconcat                        shift and go to state 168
    identifier                     shift and go to state 169
    pointer                        shift and go to state 170
    scope                          shift and go to state 110

state 652

    (83) decl -> sigtypes width . declnamelist SEMICOLON
    (84) declnamelist -> . declnamelist COMMA declname
    (85) declnamelist -> . declname
    (86) declname -> . ID
    (87) declname -> . ID dimensions

    ID              shift and go to state 454

    declnamelist                   shift and go to state 292
    declname                       shift and go to state 138

state 653

    (370) function -> FUNCTION INTEGER ID SEMICOLON function_statement . ENDFUNCTION

    ENDFUNCTION     shift and go to state 734


state 654

    (389) task -> TASK ID SEMICOLON task_statement ENDTASK .

    ENDMODULE       reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    GENERATE        reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    INTEGER         reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    REAL            reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    PARAMETER       reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    LOCALPARAM      reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    GENVAR          reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    ASSIGN          reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    ALWAYS          reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    ALWAYS_FF       reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    ALWAYS_COMB     reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    ALWAYS_LATCH    reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    INITIAL         reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    ID              reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    SENS_OR         reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    FUNCTION        reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    TASK            reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    LPAREN          reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    INPUT           reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    OUTPUT          reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    INOUT           reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    TRI             reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    REG             reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    LOGIC           reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    WIRE            reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    SIGNED          reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    SUPPLY0         reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    SUPPLY1         reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    ENDGENERATE     reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    IF              reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    FOR             reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    ELSE            reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    END             reduce using rule 389 (task -> TASK ID SEMICOLON task_statement ENDTASK .)


state 655

    (390) task_statement -> taskvardecls task_calc .

    ENDTASK         reduce using rule 390 (task_statement -> taskvardecls task_calc .)


state 656

    (391) taskvardecls -> taskvardecls taskvardecl .

    IF              reduce using rule 391 (taskvardecls -> taskvardecls taskvardecl .)
    FOR             reduce using rule 391 (taskvardecls -> taskvardecls taskvardecl .)
    WHILE           reduce using rule 391 (taskvardecls -> taskvardecls taskvardecl .)
    CASE            reduce using rule 391 (taskvardecls -> taskvardecls taskvardecl .)
    CASEX           reduce using rule 391 (taskvardecls -> taskvardecls taskvardecl .)
    CASEZ           reduce using rule 391 (taskvardecls -> taskvardecls taskvardecl .)
    BEGIN           reduce using rule 391 (taskvardecls -> taskvardecls taskvardecl .)
    INTEGER         reduce using rule 391 (taskvardecls -> taskvardecls taskvardecl .)
    DELAY           reduce using rule 391 (taskvardecls -> taskvardecls taskvardecl .)
    INPUT           reduce using rule 391 (taskvardecls -> taskvardecls taskvardecl .)
    OUTPUT          reduce using rule 391 (taskvardecls -> taskvardecls taskvardecl .)
    INOUT           reduce using rule 391 (taskvardecls -> taskvardecls taskvardecl .)
    TRI             reduce using rule 391 (taskvardecls -> taskvardecls taskvardecl .)
    REG             reduce using rule 391 (taskvardecls -> taskvardecls taskvardecl .)
    LOGIC           reduce using rule 391 (taskvardecls -> taskvardecls taskvardecl .)
    WIRE            reduce using rule 391 (taskvardecls -> taskvardecls taskvardecl .)
    SIGNED          reduce using rule 391 (taskvardecls -> taskvardecls taskvardecl .)
    SUPPLY0         reduce using rule 391 (taskvardecls -> taskvardecls taskvardecl .)
    SUPPLY1         reduce using rule 391 (taskvardecls -> taskvardecls taskvardecl .)
    LBRACE          reduce using rule 391 (taskvardecls -> taskvardecls taskvardecl .)
    ID              reduce using rule 391 (taskvardecls -> taskvardecls taskvardecl .)


state 657

    (396) task_calc -> blocking_substitution .

    ENDTASK         reduce using rule 396 (task_calc -> blocking_substitution .)


state 658

    (397) task_calc -> if_statement .

    ENDTASK         reduce using rule 397 (task_calc -> if_statement .)


state 659

    (398) task_calc -> for_statement .

    ENDTASK         reduce using rule 398 (task_calc -> for_statement .)


state 660

    (399) task_calc -> while_statement .

    ENDTASK         reduce using rule 399 (task_calc -> while_statement .)


state 661

    (400) task_calc -> case_statement .

    ENDTASK         reduce using rule 400 (task_calc -> case_statement .)


state 662

    (401) task_calc -> casex_statement .

    ENDTASK         reduce using rule 401 (task_calc -> casex_statement .)


state 663

    (402) task_calc -> casez_statement .

    ENDTASK         reduce using rule 402 (task_calc -> casez_statement .)


state 664

    (403) task_calc -> block .

    ENDTASK         reduce using rule 403 (task_calc -> block .)


state 665

    (404) task_calc -> namedblock .

    ENDTASK         reduce using rule 404 (task_calc -> namedblock .)


state 666

    (50) ioport -> sigtypes width portname .
    (51) ioport -> sigtypes width portname . dimensions
    (58) dimensions -> . dimensions length
    (59) dimensions -> . length
    (57) length -> . LBRACKET expression COLON expression RBRACKET

    RPAREN          reduce using rule 50 (ioport -> sigtypes width portname .)
    COMMA           reduce using rule 50 (ioport -> sigtypes width portname .)
    LBRACKET        shift and go to state 299

    dimensions                     shift and go to state 735
    length                         shift and go to state 298

state 667

    (21) param -> PARAMETER SIGNED width param_substitution_list COMMA .
    (112) param_substitution_list -> param_substitution_list COMMA . param_substitution
    (114) param_substitution -> . ID EQUALS rvalue

    PARAMETER       reduce using rule 21 (param -> PARAMETER SIGNED width param_substitution_list COMMA .)
    ID              shift and go to state 156

    param_substitution             shift and go to state 470

state 668

    (170) expression -> expression COND expression COLON expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for LSHIFTA resolved as shift
  ! shift/reduce conflict for RSHIFTA resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQL resolved as shift
  ! shift/reduce conflict for NEL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for XNOR resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LAND resolved as shift
  ! shift/reduce conflict for LOR resolved as shift
  ! shift/reduce conflict for COND resolved as shift
    RPAREN          reduce using rule 170 (expression -> expression COND expression COLON expression .)
    LBRACE          reduce using rule 170 (expression -> expression COND expression COLON expression .)
    RBRACE          reduce using rule 170 (expression -> expression COND expression COLON expression .)
    COMMA           reduce using rule 170 (expression -> expression COND expression COLON expression .)
    COLON           reduce using rule 170 (expression -> expression COND expression COLON expression .)
    SEMICOLON       reduce using rule 170 (expression -> expression COND expression COLON expression .)
    PLUSCOLON       reduce using rule 170 (expression -> expression COND expression COLON expression .)
    MINUSCOLON      reduce using rule 170 (expression -> expression COND expression COLON expression .)
    RBRACKET        reduce using rule 170 (expression -> expression COND expression COLON expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265

  ! TIMES           [ reduce using rule 170 (expression -> expression COND expression COLON expression .) ]
  ! POWER           [ reduce using rule 170 (expression -> expression COND expression COLON expression .) ]
  ! DIVIDE          [ reduce using rule 170 (expression -> expression COND expression COLON expression .) ]
  ! MOD             [ reduce using rule 170 (expression -> expression COND expression COLON expression .) ]
  ! PLUS            [ reduce using rule 170 (expression -> expression COND expression COLON expression .) ]
  ! MINUS           [ reduce using rule 170 (expression -> expression COND expression COLON expression .) ]
  ! LSHIFT          [ reduce using rule 170 (expression -> expression COND expression COLON expression .) ]
  ! RSHIFT          [ reduce using rule 170 (expression -> expression COND expression COLON expression .) ]
  ! LSHIFTA         [ reduce using rule 170 (expression -> expression COND expression COLON expression .) ]
  ! RSHIFTA         [ reduce using rule 170 (expression -> expression COND expression COLON expression .) ]
  ! LT              [ reduce using rule 170 (expression -> expression COND expression COLON expression .) ]
  ! GT              [ reduce using rule 170 (expression -> expression COND expression COLON expression .) ]
  ! LE              [ reduce using rule 170 (expression -> expression COND expression COLON expression .) ]
  ! GE              [ reduce using rule 170 (expression -> expression COND expression COLON expression .) ]
  ! EQ              [ reduce using rule 170 (expression -> expression COND expression COLON expression .) ]
  ! NE              [ reduce using rule 170 (expression -> expression COND expression COLON expression .) ]
  ! EQL             [ reduce using rule 170 (expression -> expression COND expression COLON expression .) ]
  ! NEL             [ reduce using rule 170 (expression -> expression COND expression COLON expression .) ]
  ! AND             [ reduce using rule 170 (expression -> expression COND expression COLON expression .) ]
  ! XOR             [ reduce using rule 170 (expression -> expression COND expression COLON expression .) ]
  ! XNOR            [ reduce using rule 170 (expression -> expression COND expression COLON expression .) ]
  ! OR              [ reduce using rule 170 (expression -> expression COND expression COLON expression .) ]
  ! LAND            [ reduce using rule 170 (expression -> expression COND expression COLON expression .) ]
  ! LOR             [ reduce using rule 170 (expression -> expression COND expression COLON expression .) ]
  ! COND            [ reduce using rule 170 (expression -> expression COND expression COLON expression .) ]


state 669

    (187) partselect -> pointer LBRACKET expression COLON expression . RBRACKET
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 736
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 670

    (188) partselect -> pointer LBRACKET expression PLUSCOLON expression . RBRACKET
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 737
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 671

    (189) partselect -> pointer LBRACKET expression MINUSCOLON expression . RBRACKET
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 738
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 672

    (184) partselect -> identifier LBRACKET expression COLON expression . RBRACKET
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 739
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 673

    (185) partselect -> identifier LBRACKET expression PLUSCOLON expression . RBRACKET
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 740
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 674

    (186) partselect -> identifier LBRACKET expression MINUSCOLON expression . RBRACKET
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 741
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 675

    (386) func_args -> func_args COMMA expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RPAREN          reduce using rule 386 (func_args -> func_args COMMA expression .)
    COMMA           reduce using rule 386 (func_args -> func_args COMMA expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 676

    (362) systemcall -> DOLLER ID LPAREN sysargs RPAREN .

    TIMES           reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    POWER           reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    DIVIDE          reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    MOD             reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    PLUS            reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    MINUS           reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    LSHIFT          reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    RSHIFT          reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    LSHIFTA         reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    RSHIFTA         reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    LT              reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    GT              reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    LE              reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    GE              reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    EQ              reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    NE              reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    EQL             reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    NEL             reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    AND             reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    XOR             reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    XNOR            reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    OR              reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    LAND            reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    LOR             reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    COND            reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    SEMICOLON       reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    RPAREN          reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    LBRACE          reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    RBRACE          reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    COMMA           reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    COLON           reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    PLUSCOLON       reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    MINUSCOLON      reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    RBRACKET        reduce using rule 362 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)


state 677

    (364) sysargs -> sysargs COMMA . sysarg
    (367) sysarg -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    sysarg                         shift and go to state 742
    expression                     shift and go to state 569
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 678

    (363) systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .

    TIMES           reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    POWER           reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    DIVIDE          reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    MOD             reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    PLUS            reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    MINUS           reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    LSHIFT          reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    RSHIFT          reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    LSHIFTA         reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    RSHIFTA         reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    LT              reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    GT              reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    LE              reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    GE              reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    EQ              reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    NE              reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    EQL             reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    NEL             reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    AND             reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    XOR             reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    XNOR            reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    OR              reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    LAND            reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    LOR             reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    COND            reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    SEMICOLON       reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    RPAREN          reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    LBRACE          reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    RBRACE          reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    COMMA           reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    COLON           reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    PLUSCOLON       reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    MINUSCOLON      reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    RBRACKET        reduce using rule 363 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)


state 679

    (352) generate_if -> IF LPAREN cond RPAREN gif_true_item . ELSE gif_false_item
    (353) generate_if -> IF LPAREN cond RPAREN gif_true_item .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 743
    ENDGENERATE     reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    IF              reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    FOR             reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    INTEGER         reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    REAL            reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    PARAMETER       reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    LOCALPARAM      reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    GENVAR          reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    ASSIGN          reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    ALWAYS          reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    ALWAYS_FF       reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    ALWAYS_COMB     reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    ALWAYS_LATCH    reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    INITIAL         reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    ID              reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    SENS_OR         reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    FUNCTION        reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    TASK            reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    LPAREN          reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    INPUT           reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    OUTPUT          reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    INOUT           reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    TRI             reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    REG             reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    LOGIC           reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    WIRE            reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    SIGNED          reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    SUPPLY0         reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    SUPPLY1         reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    END             reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)

  ! ELSE            [ reduce using rule 353 (generate_if -> IF LPAREN cond RPAREN gif_true_item .) ]


state 680

    (354) gif_true_item -> generate_item .

    ELSE            reduce using rule 354 (gif_true_item -> generate_item .)
    ENDGENERATE     reduce using rule 354 (gif_true_item -> generate_item .)
    IF              reduce using rule 354 (gif_true_item -> generate_item .)
    FOR             reduce using rule 354 (gif_true_item -> generate_item .)
    INTEGER         reduce using rule 354 (gif_true_item -> generate_item .)
    REAL            reduce using rule 354 (gif_true_item -> generate_item .)
    PARAMETER       reduce using rule 354 (gif_true_item -> generate_item .)
    LOCALPARAM      reduce using rule 354 (gif_true_item -> generate_item .)
    GENVAR          reduce using rule 354 (gif_true_item -> generate_item .)
    ASSIGN          reduce using rule 354 (gif_true_item -> generate_item .)
    ALWAYS          reduce using rule 354 (gif_true_item -> generate_item .)
    ALWAYS_FF       reduce using rule 354 (gif_true_item -> generate_item .)
    ALWAYS_COMB     reduce using rule 354 (gif_true_item -> generate_item .)
    ALWAYS_LATCH    reduce using rule 354 (gif_true_item -> generate_item .)
    INITIAL         reduce using rule 354 (gif_true_item -> generate_item .)
    ID              reduce using rule 354 (gif_true_item -> generate_item .)
    SENS_OR         reduce using rule 354 (gif_true_item -> generate_item .)
    FUNCTION        reduce using rule 354 (gif_true_item -> generate_item .)
    TASK            reduce using rule 354 (gif_true_item -> generate_item .)
    LPAREN          reduce using rule 354 (gif_true_item -> generate_item .)
    INPUT           reduce using rule 354 (gif_true_item -> generate_item .)
    OUTPUT          reduce using rule 354 (gif_true_item -> generate_item .)
    INOUT           reduce using rule 354 (gif_true_item -> generate_item .)
    TRI             reduce using rule 354 (gif_true_item -> generate_item .)
    REG             reduce using rule 354 (gif_true_item -> generate_item .)
    LOGIC           reduce using rule 354 (gif_true_item -> generate_item .)
    WIRE            reduce using rule 354 (gif_true_item -> generate_item .)
    SIGNED          reduce using rule 354 (gif_true_item -> generate_item .)
    SUPPLY0         reduce using rule 354 (gif_true_item -> generate_item .)
    SUPPLY1         reduce using rule 354 (gif_true_item -> generate_item .)
    END             reduce using rule 354 (gif_true_item -> generate_item .)


state 681

    (355) gif_true_item -> generate_block .

    ELSE            reduce using rule 355 (gif_true_item -> generate_block .)
    ENDGENERATE     reduce using rule 355 (gif_true_item -> generate_block .)
    IF              reduce using rule 355 (gif_true_item -> generate_block .)
    FOR             reduce using rule 355 (gif_true_item -> generate_block .)
    INTEGER         reduce using rule 355 (gif_true_item -> generate_block .)
    REAL            reduce using rule 355 (gif_true_item -> generate_block .)
    PARAMETER       reduce using rule 355 (gif_true_item -> generate_block .)
    LOCALPARAM      reduce using rule 355 (gif_true_item -> generate_block .)
    GENVAR          reduce using rule 355 (gif_true_item -> generate_block .)
    ASSIGN          reduce using rule 355 (gif_true_item -> generate_block .)
    ALWAYS          reduce using rule 355 (gif_true_item -> generate_block .)
    ALWAYS_FF       reduce using rule 355 (gif_true_item -> generate_block .)
    ALWAYS_COMB     reduce using rule 355 (gif_true_item -> generate_block .)
    ALWAYS_LATCH    reduce using rule 355 (gif_true_item -> generate_block .)
    INITIAL         reduce using rule 355 (gif_true_item -> generate_block .)
    ID              reduce using rule 355 (gif_true_item -> generate_block .)
    SENS_OR         reduce using rule 355 (gif_true_item -> generate_block .)
    FUNCTION        reduce using rule 355 (gif_true_item -> generate_block .)
    TASK            reduce using rule 355 (gif_true_item -> generate_block .)
    LPAREN          reduce using rule 355 (gif_true_item -> generate_block .)
    INPUT           reduce using rule 355 (gif_true_item -> generate_block .)
    OUTPUT          reduce using rule 355 (gif_true_item -> generate_block .)
    INOUT           reduce using rule 355 (gif_true_item -> generate_block .)
    TRI             reduce using rule 355 (gif_true_item -> generate_block .)
    REG             reduce using rule 355 (gif_true_item -> generate_block .)
    LOGIC           reduce using rule 355 (gif_true_item -> generate_block .)
    WIRE            reduce using rule 355 (gif_true_item -> generate_block .)
    SIGNED          reduce using rule 355 (gif_true_item -> generate_block .)
    SUPPLY0         reduce using rule 355 (gif_true_item -> generate_block .)
    SUPPLY1         reduce using rule 355 (gif_true_item -> generate_block .)
    END             reduce using rule 355 (gif_true_item -> generate_block .)


state 682

    (350) generate_block -> BEGIN . generate_items END
    (351) generate_block -> BEGIN . COLON ID generate_items END
    (344) generate_items -> . empty
    (345) generate_items -> . generate_items generate_item
    (346) generate_items -> . generate_item
    (413) empty -> .
    (347) generate_item -> . standard_item
    (348) generate_item -> . generate_if
    (349) generate_item -> . generate_for
    (65) standard_item -> . decl
    (66) standard_item -> . integerdecl
    (67) standard_item -> . realdecl
    (68) standard_item -> . declassign
    (69) standard_item -> . parameterdecl
    (70) standard_item -> . localparamdecl
    (71) standard_item -> . genvardecl
    (72) standard_item -> . assignment
    (73) standard_item -> . always
    (74) standard_item -> . always_ff
    (75) standard_item -> . always_comb
    (76) standard_item -> . always_latch
    (77) standard_item -> . initial
    (78) standard_item -> . instance
    (79) standard_item -> . function
    (80) standard_item -> . task
    (81) standard_item -> . pragma
    (352) generate_if -> . IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (353) generate_if -> . IF LPAREN cond RPAREN gif_true_item
    (358) generate_for -> . FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
    (82) decl -> . sigtypes declnamelist SEMICOLON
    (83) decl -> . sigtypes width declnamelist SEMICOLON
    (92) integerdecl -> . INTEGER integernamelist SEMICOLON
    (93) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (98) realdecl -> . REAL realnamelist SEMICOLON
    (88) declassign -> . sigtypes declassign_element SEMICOLON
    (89) declassign -> . sigtypes width declassign_element SEMICOLON
    (102) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (103) parameterdecl -> . PARAMETER SIGNED param_substitution_list SEMICOLON
    (104) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (105) parameterdecl -> . PARAMETER SIGNED width param_substitution_list SEMICOLON
    (106) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (107) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (108) localparamdecl -> . LOCALPARAM SIGNED param_substitution_list SEMICOLON
    (109) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (110) localparamdecl -> . LOCALPARAM SIGNED width param_substitution_list SEMICOLON
    (111) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (339) genvardecl -> . GENVAR genvarlist SEMICOLON
    (115) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (116) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (205) always -> . ALWAYS senslist always_statement
    (206) always_ff -> . ALWAYS_FF senslist always_statement
    (207) always_comb -> . ALWAYS_COMB senslist always_statement
    (208) always_latch -> . ALWAYS_LATCH senslist always_statement
    (300) initial -> . INITIAL initial_statement
    (307) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (308) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (313) instance -> . ID instance_bodylist_noname SEMICOLON
    (314) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (368) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (369) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (370) function -> . FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION
    (389) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
  ! shift/reduce conflict for PARAMETER resolved as shift
  ! shift/reduce conflict for LOCALPARAM resolved as shift
  ! shift/reduce conflict for GENVAR resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for ALWAYS resolved as shift
  ! shift/reduce conflict for ALWAYS_FF resolved as shift
  ! shift/reduce conflict for ALWAYS_COMB resolved as shift
  ! shift/reduce conflict for ALWAYS_LATCH resolved as shift
  ! shift/reduce conflict for INITIAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for SENS_OR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for TASK resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for INOUT resolved as shift
  ! shift/reduce conflict for TRI resolved as shift
  ! shift/reduce conflict for REG resolved as shift
  ! shift/reduce conflict for LOGIC resolved as shift
  ! shift/reduce conflict for WIRE resolved as shift
  ! shift/reduce conflict for SIGNED resolved as shift
  ! shift/reduce conflict for SUPPLY0 resolved as shift
  ! shift/reduce conflict for SUPPLY1 resolved as shift
    COLON           shift and go to state 745
    END             reduce using rule 413 (empty -> .)
    IF              shift and go to state 132
    FOR             shift and go to state 133
    INTEGER         shift and go to state 48
    REAL            shift and go to state 50
    PARAMETER       shift and go to state 51
    LOCALPARAM      shift and go to state 52
    GENVAR          shift and go to state 53
    ASSIGN          shift and go to state 54
    ALWAYS          shift and go to state 55
    ALWAYS_FF       shift and go to state 56
    ALWAYS_COMB     shift and go to state 57
    ALWAYS_LATCH    shift and go to state 58
    INITIAL         shift and go to state 59
    ID              shift and go to state 60
    SENS_OR         shift and go to state 61
    FUNCTION        shift and go to state 62
    TASK            shift and go to state 63
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 65
    OUTPUT          shift and go to state 66
    INOUT           shift and go to state 67
    TRI             shift and go to state 68
    REG             shift and go to state 69
    LOGIC           shift and go to state 70
    WIRE            shift and go to state 71
    SIGNED          shift and go to state 49
    SUPPLY0         shift and go to state 72
    SUPPLY1         shift and go to state 73

  ! IF              [ reduce using rule 413 (empty -> .) ]
  ! FOR             [ reduce using rule 413 (empty -> .) ]
  ! INTEGER         [ reduce using rule 413 (empty -> .) ]
  ! REAL            [ reduce using rule 413 (empty -> .) ]
  ! PARAMETER       [ reduce using rule 413 (empty -> .) ]
  ! LOCALPARAM      [ reduce using rule 413 (empty -> .) ]
  ! GENVAR          [ reduce using rule 413 (empty -> .) ]
  ! ASSIGN          [ reduce using rule 413 (empty -> .) ]
  ! ALWAYS          [ reduce using rule 413 (empty -> .) ]
  ! ALWAYS_FF       [ reduce using rule 413 (empty -> .) ]
  ! ALWAYS_COMB     [ reduce using rule 413 (empty -> .) ]
  ! ALWAYS_LATCH    [ reduce using rule 413 (empty -> .) ]
  ! INITIAL         [ reduce using rule 413 (empty -> .) ]
  ! ID              [ reduce using rule 413 (empty -> .) ]
  ! SENS_OR         [ reduce using rule 413 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 413 (empty -> .) ]
  ! TASK            [ reduce using rule 413 (empty -> .) ]
  ! LPAREN          [ reduce using rule 413 (empty -> .) ]
  ! INPUT           [ reduce using rule 413 (empty -> .) ]
  ! OUTPUT          [ reduce using rule 413 (empty -> .) ]
  ! INOUT           [ reduce using rule 413 (empty -> .) ]
  ! TRI             [ reduce using rule 413 (empty -> .) ]
  ! REG             [ reduce using rule 413 (empty -> .) ]
  ! LOGIC           [ reduce using rule 413 (empty -> .) ]
  ! WIRE            [ reduce using rule 413 (empty -> .) ]
  ! SIGNED          [ reduce using rule 413 (empty -> .) ]
  ! SUPPLY0         [ reduce using rule 413 (empty -> .) ]
  ! SUPPLY1         [ reduce using rule 413 (empty -> .) ]

    generate_items                 shift and go to state 744
    empty                          shift and go to state 127
    generate_item                  shift and go to state 128
    standard_item                  shift and go to state 129
    generate_if                    shift and go to state 130
    generate_for                   shift and go to state 131
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    always_ff                      shift and go to state 38
    always_comb                    shift and go to state 39
    always_latch                   shift and go to state 40
    initial                        shift and go to state 41
    instance                       shift and go to state 42
    function                       shift and go to state 43
    task                           shift and go to state 44
    pragma                         shift and go to state 45
    sigtypes                       shift and go to state 47
    sigtype                        shift and go to state 64

state 683

    (358) generate_for -> FOR LPAREN forpre forcond forpost . RPAREN generate_forcontent

    RPAREN          shift and go to state 746


state 684

    (284) forpost -> blocking_substitution_base .

    RPAREN          reduce using rule 284 (forpost -> blocking_substitution_base .)


state 685

    (285) forpost -> empty .
    (253) delays -> empty .

    RPAREN          reduce using rule 285 (forpost -> empty .)
    LBRACE          reduce using rule 253 (delays -> empty .)
    ID              reduce using rule 253 (delays -> empty .)


state 686

    (247) blocking_substitution_base -> delays . lvalue EQUALS delays rvalue
    (131) lvalue -> . lpartselect
    (132) lvalue -> . lpointer
    (133) lvalue -> . lconcat
    (134) lvalue -> . identifier
    (117) lpartselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (118) lpartselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (119) lpartselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (120) lpartselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (121) lpartselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (122) lpartselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (123) lpointer -> . pointer
    (124) lconcat -> . LBRACE lconcatlist RBRACE
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT

    LBRACE          shift and go to state 171
    ID              shift and go to state 88

    lvalue                         shift and go to state 747
    lpartselect                    shift and go to state 166
    lpointer                       shift and go to state 167
    lconcat                        shift and go to state 168
    identifier                     shift and go to state 169
    pointer                        shift and go to state 170
    scope                          shift and go to state 110

state 687

    (282) forcond -> cond SEMICOLON .

    DELAY           reduce using rule 282 (forcond -> cond SEMICOLON .)
    RPAREN          reduce using rule 282 (forcond -> cond SEMICOLON .)
    LBRACE          reduce using rule 282 (forcond -> cond SEMICOLON .)
    ID              reduce using rule 282 (forcond -> cond SEMICOLON .)


state 688

    (56) width -> LBRACKET expression COLON expression RBRACKET .

    ID              reduce using rule 56 (width -> LBRACKET expression COLON expression RBRACKET .)
    DELAY           reduce using rule 56 (width -> LBRACKET expression COLON expression RBRACKET .)
    LPAREN          reduce using rule 56 (width -> LBRACKET expression COLON expression RBRACKET .)


state 689

    (57) length -> LBRACKET expression COLON expression . RBRACKET
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 748
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 690

    (91) declassign_element -> delays ID EQUALS delays rvalue .

    SEMICOLON       reduce using rule 91 (declassign_element -> delays ID EQUALS delays rvalue .)


state 691

    (116) assignment -> ASSIGN delays lvalue EQUALS delays rvalue . SEMICOLON

    SEMICOLON       shift and go to state 749


state 692

    (120) lpartselect -> identifier LBRACKET expression COLON expression . RBRACKET
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 750
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 693

    (121) lpartselect -> identifier LBRACKET expression PLUSCOLON expression . RBRACKET
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 751
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 694

    (122) lpartselect -> identifier LBRACKET expression MINUSCOLON expression . RBRACKET
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 752
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 695

    (117) lpartselect -> pointer LBRACKET expression COLON expression . RBRACKET
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 753
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 696

    (118) lpartselect -> pointer LBRACKET expression PLUSCOLON expression . RBRACKET
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 754
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 697

    (119) lpartselect -> pointer LBRACKET expression MINUSCOLON expression . RBRACKET
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 755
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 698

    (214) edgesigs -> edgesigs SENS_OR edgesig .

    RPAREN          reduce using rule 214 (edgesigs -> edgesigs SENS_OR edgesig .)
    SENS_OR         reduce using rule 214 (edgesigs -> edgesigs SENS_OR edgesig .)
    COMMA           reduce using rule 214 (edgesigs -> edgesigs SENS_OR edgesig .)


state 699

    (215) edgesigs -> edgesigs COMMA edgesig .

    RPAREN          reduce using rule 215 (edgesigs -> edgesigs COMMA edgesig .)
    SENS_OR         reduce using rule 215 (edgesigs -> edgesigs COMMA edgesig .)
    COMMA           reduce using rule 215 (edgesigs -> edgesigs COMMA edgesig .)


state 700

    (224) levelsigs -> levelsigs SENS_OR levelsig .

    RPAREN          reduce using rule 224 (levelsigs -> levelsigs SENS_OR levelsig .)
    SENS_OR         reduce using rule 224 (levelsigs -> levelsigs SENS_OR levelsig .)
    COMMA           reduce using rule 224 (levelsigs -> levelsigs SENS_OR levelsig .)


state 701

    (225) levelsigs -> levelsigs COMMA levelsig .

    RPAREN          reduce using rule 225 (levelsigs -> levelsigs COMMA levelsig .)
    SENS_OR         reduce using rule 225 (levelsigs -> levelsigs COMMA levelsig .)
    COMMA           reduce using rule 225 (levelsigs -> levelsigs COMMA levelsig .)


state 702

    (271) if_statement -> IF LPAREN cond RPAREN true_statement . ELSE else_statement
    (272) if_statement -> IF LPAREN cond RPAREN true_statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 756
    ENDMODULE       reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    GENERATE        reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    INTEGER         reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    REAL            reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    PARAMETER       reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    LOCALPARAM      reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    GENVAR          reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    ASSIGN          reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    ALWAYS          reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    ALWAYS_FF       reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    ALWAYS_COMB     reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    ALWAYS_LATCH    reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    INITIAL         reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    ID              reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    SENS_OR         reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    FUNCTION        reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    TASK            reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    LPAREN          reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    INPUT           reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    OUTPUT          reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    INOUT           reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    TRI             reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    REG             reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    LOGIC           reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    WIRE            reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    SIGNED          reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    SUPPLY0         reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    SUPPLY1         reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    ENDGENERATE     reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    IF              reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    FOR             reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    END             reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    CASE            reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    CASEX           reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    CASEZ           reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    UNIQUE          reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    WHILE           reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    WAIT            reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    FOREVER         reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    BEGIN           reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    FORK            reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    DELAY           reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    AT              reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    DOLLER          reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    DISABLE         reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    LBRACE          reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    SEMICOLON       reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    JOIN            reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    ENDFUNCTION     reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    ENDTASK         reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    ENDCASE         reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    DEFAULT         reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    MINUS           reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    PLUS            reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    LNOT            reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    NOT             reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    AND             reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    NAND            reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    NOR             reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    OR              reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    XOR             reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    XNOR            reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    INTNUMBER_DEC   reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    INTNUMBER_BIN   reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    INTNUMBER_OCT   reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    INTNUMBER_HEX   reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    FLOATNUMBER     reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    STRING_LITERAL  reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .)

  ! ELSE            [ reduce using rule 272 (if_statement -> IF LPAREN cond RPAREN true_statement .) ]


state 703

    (277) true_statement -> ifcontent_statement .

    ENDMODULE       reduce using rule 277 (true_statement -> ifcontent_statement .)
    GENERATE        reduce using rule 277 (true_statement -> ifcontent_statement .)
    INTEGER         reduce using rule 277 (true_statement -> ifcontent_statement .)
    REAL            reduce using rule 277 (true_statement -> ifcontent_statement .)
    PARAMETER       reduce using rule 277 (true_statement -> ifcontent_statement .)
    LOCALPARAM      reduce using rule 277 (true_statement -> ifcontent_statement .)
    GENVAR          reduce using rule 277 (true_statement -> ifcontent_statement .)
    ASSIGN          reduce using rule 277 (true_statement -> ifcontent_statement .)
    ALWAYS          reduce using rule 277 (true_statement -> ifcontent_statement .)
    ALWAYS_FF       reduce using rule 277 (true_statement -> ifcontent_statement .)
    ALWAYS_COMB     reduce using rule 277 (true_statement -> ifcontent_statement .)
    ALWAYS_LATCH    reduce using rule 277 (true_statement -> ifcontent_statement .)
    INITIAL         reduce using rule 277 (true_statement -> ifcontent_statement .)
    ID              reduce using rule 277 (true_statement -> ifcontent_statement .)
    SENS_OR         reduce using rule 277 (true_statement -> ifcontent_statement .)
    FUNCTION        reduce using rule 277 (true_statement -> ifcontent_statement .)
    TASK            reduce using rule 277 (true_statement -> ifcontent_statement .)
    LPAREN          reduce using rule 277 (true_statement -> ifcontent_statement .)
    INPUT           reduce using rule 277 (true_statement -> ifcontent_statement .)
    OUTPUT          reduce using rule 277 (true_statement -> ifcontent_statement .)
    INOUT           reduce using rule 277 (true_statement -> ifcontent_statement .)
    TRI             reduce using rule 277 (true_statement -> ifcontent_statement .)
    REG             reduce using rule 277 (true_statement -> ifcontent_statement .)
    LOGIC           reduce using rule 277 (true_statement -> ifcontent_statement .)
    WIRE            reduce using rule 277 (true_statement -> ifcontent_statement .)
    SIGNED          reduce using rule 277 (true_statement -> ifcontent_statement .)
    SUPPLY0         reduce using rule 277 (true_statement -> ifcontent_statement .)
    SUPPLY1         reduce using rule 277 (true_statement -> ifcontent_statement .)
    ENDGENERATE     reduce using rule 277 (true_statement -> ifcontent_statement .)
    IF              reduce using rule 277 (true_statement -> ifcontent_statement .)
    FOR             reduce using rule 277 (true_statement -> ifcontent_statement .)
    ELSE            reduce using rule 277 (true_statement -> ifcontent_statement .)
    END             reduce using rule 277 (true_statement -> ifcontent_statement .)
    CASE            reduce using rule 277 (true_statement -> ifcontent_statement .)
    CASEX           reduce using rule 277 (true_statement -> ifcontent_statement .)
    CASEZ           reduce using rule 277 (true_statement -> ifcontent_statement .)
    UNIQUE          reduce using rule 277 (true_statement -> ifcontent_statement .)
    WHILE           reduce using rule 277 (true_statement -> ifcontent_statement .)
    WAIT            reduce using rule 277 (true_statement -> ifcontent_statement .)
    FOREVER         reduce using rule 277 (true_statement -> ifcontent_statement .)
    BEGIN           reduce using rule 277 (true_statement -> ifcontent_statement .)
    FORK            reduce using rule 277 (true_statement -> ifcontent_statement .)
    DELAY           reduce using rule 277 (true_statement -> ifcontent_statement .)
    AT              reduce using rule 277 (true_statement -> ifcontent_statement .)
    DOLLER          reduce using rule 277 (true_statement -> ifcontent_statement .)
    DISABLE         reduce using rule 277 (true_statement -> ifcontent_statement .)
    LBRACE          reduce using rule 277 (true_statement -> ifcontent_statement .)
    SEMICOLON       reduce using rule 277 (true_statement -> ifcontent_statement .)
    JOIN            reduce using rule 277 (true_statement -> ifcontent_statement .)
    ENDFUNCTION     reduce using rule 277 (true_statement -> ifcontent_statement .)
    ENDTASK         reduce using rule 277 (true_statement -> ifcontent_statement .)
    ENDCASE         reduce using rule 277 (true_statement -> ifcontent_statement .)
    DEFAULT         reduce using rule 277 (true_statement -> ifcontent_statement .)
    MINUS           reduce using rule 277 (true_statement -> ifcontent_statement .)
    PLUS            reduce using rule 277 (true_statement -> ifcontent_statement .)
    LNOT            reduce using rule 277 (true_statement -> ifcontent_statement .)
    NOT             reduce using rule 277 (true_statement -> ifcontent_statement .)
    AND             reduce using rule 277 (true_statement -> ifcontent_statement .)
    NAND            reduce using rule 277 (true_statement -> ifcontent_statement .)
    NOR             reduce using rule 277 (true_statement -> ifcontent_statement .)
    OR              reduce using rule 277 (true_statement -> ifcontent_statement .)
    XOR             reduce using rule 277 (true_statement -> ifcontent_statement .)
    XNOR            reduce using rule 277 (true_statement -> ifcontent_statement .)
    INTNUMBER_DEC   reduce using rule 277 (true_statement -> ifcontent_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 277 (true_statement -> ifcontent_statement .)
    INTNUMBER_BIN   reduce using rule 277 (true_statement -> ifcontent_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 277 (true_statement -> ifcontent_statement .)
    INTNUMBER_OCT   reduce using rule 277 (true_statement -> ifcontent_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 277 (true_statement -> ifcontent_statement .)
    INTNUMBER_HEX   reduce using rule 277 (true_statement -> ifcontent_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 277 (true_statement -> ifcontent_statement .)
    FLOATNUMBER     reduce using rule 277 (true_statement -> ifcontent_statement .)
    STRING_LITERAL  reduce using rule 277 (true_statement -> ifcontent_statement .)


state 704

    (276) ifcontent_statement -> basic_statement .

    ENDMODULE       reduce using rule 276 (ifcontent_statement -> basic_statement .)
    GENERATE        reduce using rule 276 (ifcontent_statement -> basic_statement .)
    INTEGER         reduce using rule 276 (ifcontent_statement -> basic_statement .)
    REAL            reduce using rule 276 (ifcontent_statement -> basic_statement .)
    PARAMETER       reduce using rule 276 (ifcontent_statement -> basic_statement .)
    LOCALPARAM      reduce using rule 276 (ifcontent_statement -> basic_statement .)
    GENVAR          reduce using rule 276 (ifcontent_statement -> basic_statement .)
    ASSIGN          reduce using rule 276 (ifcontent_statement -> basic_statement .)
    ALWAYS          reduce using rule 276 (ifcontent_statement -> basic_statement .)
    ALWAYS_FF       reduce using rule 276 (ifcontent_statement -> basic_statement .)
    ALWAYS_COMB     reduce using rule 276 (ifcontent_statement -> basic_statement .)
    ALWAYS_LATCH    reduce using rule 276 (ifcontent_statement -> basic_statement .)
    INITIAL         reduce using rule 276 (ifcontent_statement -> basic_statement .)
    ID              reduce using rule 276 (ifcontent_statement -> basic_statement .)
    SENS_OR         reduce using rule 276 (ifcontent_statement -> basic_statement .)
    FUNCTION        reduce using rule 276 (ifcontent_statement -> basic_statement .)
    TASK            reduce using rule 276 (ifcontent_statement -> basic_statement .)
    LPAREN          reduce using rule 276 (ifcontent_statement -> basic_statement .)
    INPUT           reduce using rule 276 (ifcontent_statement -> basic_statement .)
    OUTPUT          reduce using rule 276 (ifcontent_statement -> basic_statement .)
    INOUT           reduce using rule 276 (ifcontent_statement -> basic_statement .)
    TRI             reduce using rule 276 (ifcontent_statement -> basic_statement .)
    REG             reduce using rule 276 (ifcontent_statement -> basic_statement .)
    LOGIC           reduce using rule 276 (ifcontent_statement -> basic_statement .)
    WIRE            reduce using rule 276 (ifcontent_statement -> basic_statement .)
    SIGNED          reduce using rule 276 (ifcontent_statement -> basic_statement .)
    SUPPLY0         reduce using rule 276 (ifcontent_statement -> basic_statement .)
    SUPPLY1         reduce using rule 276 (ifcontent_statement -> basic_statement .)
    ENDGENERATE     reduce using rule 276 (ifcontent_statement -> basic_statement .)
    IF              reduce using rule 276 (ifcontent_statement -> basic_statement .)
    FOR             reduce using rule 276 (ifcontent_statement -> basic_statement .)
    ELSE            reduce using rule 276 (ifcontent_statement -> basic_statement .)
    END             reduce using rule 276 (ifcontent_statement -> basic_statement .)
    CASE            reduce using rule 276 (ifcontent_statement -> basic_statement .)
    CASEX           reduce using rule 276 (ifcontent_statement -> basic_statement .)
    CASEZ           reduce using rule 276 (ifcontent_statement -> basic_statement .)
    UNIQUE          reduce using rule 276 (ifcontent_statement -> basic_statement .)
    WHILE           reduce using rule 276 (ifcontent_statement -> basic_statement .)
    WAIT            reduce using rule 276 (ifcontent_statement -> basic_statement .)
    FOREVER         reduce using rule 276 (ifcontent_statement -> basic_statement .)
    BEGIN           reduce using rule 276 (ifcontent_statement -> basic_statement .)
    FORK            reduce using rule 276 (ifcontent_statement -> basic_statement .)
    DELAY           reduce using rule 276 (ifcontent_statement -> basic_statement .)
    AT              reduce using rule 276 (ifcontent_statement -> basic_statement .)
    DOLLER          reduce using rule 276 (ifcontent_statement -> basic_statement .)
    DISABLE         reduce using rule 276 (ifcontent_statement -> basic_statement .)
    LBRACE          reduce using rule 276 (ifcontent_statement -> basic_statement .)
    SEMICOLON       reduce using rule 276 (ifcontent_statement -> basic_statement .)
    JOIN            reduce using rule 276 (ifcontent_statement -> basic_statement .)
    ENDFUNCTION     reduce using rule 276 (ifcontent_statement -> basic_statement .)
    ENDTASK         reduce using rule 276 (ifcontent_statement -> basic_statement .)
    ENDCASE         reduce using rule 276 (ifcontent_statement -> basic_statement .)
    DEFAULT         reduce using rule 276 (ifcontent_statement -> basic_statement .)
    MINUS           reduce using rule 276 (ifcontent_statement -> basic_statement .)
    PLUS            reduce using rule 276 (ifcontent_statement -> basic_statement .)
    LNOT            reduce using rule 276 (ifcontent_statement -> basic_statement .)
    NOT             reduce using rule 276 (ifcontent_statement -> basic_statement .)
    AND             reduce using rule 276 (ifcontent_statement -> basic_statement .)
    NAND            reduce using rule 276 (ifcontent_statement -> basic_statement .)
    NOR             reduce using rule 276 (ifcontent_statement -> basic_statement .)
    OR              reduce using rule 276 (ifcontent_statement -> basic_statement .)
    XOR             reduce using rule 276 (ifcontent_statement -> basic_statement .)
    XNOR            reduce using rule 276 (ifcontent_statement -> basic_statement .)
    INTNUMBER_DEC   reduce using rule 276 (ifcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 276 (ifcontent_statement -> basic_statement .)
    INTNUMBER_BIN   reduce using rule 276 (ifcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 276 (ifcontent_statement -> basic_statement .)
    INTNUMBER_OCT   reduce using rule 276 (ifcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 276 (ifcontent_statement -> basic_statement .)
    INTNUMBER_HEX   reduce using rule 276 (ifcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 276 (ifcontent_statement -> basic_statement .)
    FLOATNUMBER     reduce using rule 276 (ifcontent_statement -> basic_statement .)
    STRING_LITERAL  reduce using rule 276 (ifcontent_statement -> basic_statement .)


state 705

    (273) if_statement -> delays IF LPAREN cond RPAREN . true_statement ELSE else_statement
    (274) if_statement -> delays IF LPAREN cond RPAREN . true_statement
    (277) true_statement -> . ifcontent_statement
    (276) ifcontent_statement -> . basic_statement
    (229) basic_statement -> . if_statement
    (230) basic_statement -> . case_statement
    (231) basic_statement -> . casex_statement
    (232) basic_statement -> . casez_statement
    (233) basic_statement -> . unique_case_statement
    (234) basic_statement -> . for_statement
    (235) basic_statement -> . while_statement
    (236) basic_statement -> . event_statement
    (237) basic_statement -> . wait_statement
    (238) basic_statement -> . forever_statement
    (239) basic_statement -> . block
    (240) basic_statement -> . namedblock
    (241) basic_statement -> . parallelblock
    (242) basic_statement -> . blocking_substitution
    (243) basic_statement -> . nonblocking_substitution
    (244) basic_statement -> . single_statement
    (271) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (272) if_statement -> . IF LPAREN cond RPAREN true_statement
    (273) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (274) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (289) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (290) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (291) casez_statement -> . CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (292) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (279) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (287) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (302) event_statement -> . senslist SEMICOLON
    (303) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (306) forever_statement -> . FOREVER basic_statement
    (254) block -> . BEGIN block_statements END
    (255) block -> . BEGIN END
    (259) namedblock -> . BEGIN COLON ID namedblock_statements END
    (260) namedblock -> . BEGIN COLON ID END
    (269) parallelblock -> . FORK block_statements JOIN
    (270) parallelblock -> . FORK JOIN
    (246) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (248) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (410) single_statement -> . DELAY expression SEMICOLON
    (411) single_statement -> . systemcall SEMICOLON
    (412) single_statement -> . disable SEMICOLON
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (209) senslist -> . AT LPAREN edgesigs RPAREN
    (217) senslist -> . empty
    (218) senslist -> . AT levelsig
    (219) senslist -> . AT LPAREN levelsigs RPAREN
    (227) senslist -> . AT TIMES
    (228) senslist -> . AT LPAREN TIMES RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (409) disable -> . DISABLE ID
    (413) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 196
    CASE            shift and go to state 198
    CASEX           shift and go to state 199
    CASEZ           shift and go to state 200
    UNIQUE          shift and go to state 201
    FOR             shift and go to state 202
    WHILE           shift and go to state 203
    WAIT            shift and go to state 205
    FOREVER         shift and go to state 206
    BEGIN           shift and go to state 207
    FORK            shift and go to state 208
    DELAY           shift and go to state 209
    AT              shift and go to state 173
    DOLLER          shift and go to state 109
    DISABLE         shift and go to state 213
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    SEMICOLON       reduce using rule 413 (empty -> .)

  ! IF              [ reduce using rule 413 (empty -> .) ]

    delays                         shift and go to state 197
    true_statement                 shift and go to state 757
    ifcontent_statement            shift and go to state 703
    basic_statement                shift and go to state 704
    if_statement                   shift and go to state 180
    case_statement                 shift and go to state 181
    casex_statement                shift and go to state 182
    casez_statement                shift and go to state 183
    unique_case_statement          shift and go to state 184
    for_statement                  shift and go to state 185
    while_statement                shift and go to state 186
    event_statement                shift and go to state 187
    wait_statement                 shift and go to state 188
    forever_statement              shift and go to state 189
    block                          shift and go to state 190
    namedblock                     shift and go to state 191
    parallelblock                  shift and go to state 192
    blocking_substitution          shift and go to state 193
    nonblocking_substitution       shift and go to state 194
    single_statement               shift and go to state 195
    senslist                       shift and go to state 204
    systemcall                     shift and go to state 210
    disable                        shift and go to state 211
    empty                          shift and go to state 212

state 706

    (246) blocking_substitution -> delays lvalue EQUALS delays rvalue . SEMICOLON

    SEMICOLON       shift and go to state 758


state 707

    (248) nonblocking_substitution -> delays lvalue LE delays rvalue . SEMICOLON

    SEMICOLON       shift and go to state 759


state 708

    (289) case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements . ENDCASE
    (294) casecontent_statements -> casecontent_statements . casecontent_statement
    (296) casecontent_statement -> . casecontent_condition COLON basic_statement
    (299) casecontent_statement -> . DEFAULT COLON basic_statement
    (297) casecontent_condition -> . casecontent_condition COMMA expression
    (298) casecontent_condition -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    ENDCASE         shift and go to state 760
    DEFAULT         shift and go to state 711
    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    casecontent_statement          shift and go to state 761
    casecontent_condition          shift and go to state 710
    expression                     shift and go to state 712
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 709

    (295) casecontent_statements -> casecontent_statement .

    ENDCASE         reduce using rule 295 (casecontent_statements -> casecontent_statement .)
    DEFAULT         reduce using rule 295 (casecontent_statements -> casecontent_statement .)
    MINUS           reduce using rule 295 (casecontent_statements -> casecontent_statement .)
    PLUS            reduce using rule 295 (casecontent_statements -> casecontent_statement .)
    LNOT            reduce using rule 295 (casecontent_statements -> casecontent_statement .)
    NOT             reduce using rule 295 (casecontent_statements -> casecontent_statement .)
    AND             reduce using rule 295 (casecontent_statements -> casecontent_statement .)
    NAND            reduce using rule 295 (casecontent_statements -> casecontent_statement .)
    NOR             reduce using rule 295 (casecontent_statements -> casecontent_statement .)
    OR              reduce using rule 295 (casecontent_statements -> casecontent_statement .)
    XOR             reduce using rule 295 (casecontent_statements -> casecontent_statement .)
    XNOR            reduce using rule 295 (casecontent_statements -> casecontent_statement .)
    LPAREN          reduce using rule 295 (casecontent_statements -> casecontent_statement .)
    LBRACE          reduce using rule 295 (casecontent_statements -> casecontent_statement .)
    DOLLER          reduce using rule 295 (casecontent_statements -> casecontent_statement .)
    ID              reduce using rule 295 (casecontent_statements -> casecontent_statement .)
    INTNUMBER_DEC   reduce using rule 295 (casecontent_statements -> casecontent_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 295 (casecontent_statements -> casecontent_statement .)
    INTNUMBER_BIN   reduce using rule 295 (casecontent_statements -> casecontent_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 295 (casecontent_statements -> casecontent_statement .)
    INTNUMBER_OCT   reduce using rule 295 (casecontent_statements -> casecontent_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 295 (casecontent_statements -> casecontent_statement .)
    INTNUMBER_HEX   reduce using rule 295 (casecontent_statements -> casecontent_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 295 (casecontent_statements -> casecontent_statement .)
    FLOATNUMBER     reduce using rule 295 (casecontent_statements -> casecontent_statement .)
    STRING_LITERAL  reduce using rule 295 (casecontent_statements -> casecontent_statement .)


state 710

    (296) casecontent_statement -> casecontent_condition . COLON basic_statement
    (297) casecontent_condition -> casecontent_condition . COMMA expression

    COLON           shift and go to state 762
    COMMA           shift and go to state 763


state 711

    (299) casecontent_statement -> DEFAULT . COLON basic_statement

    COLON           shift and go to state 764


state 712

    (298) casecontent_condition -> expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    COLON           reduce using rule 298 (casecontent_condition -> expression .)
    COMMA           reduce using rule 298 (casecontent_condition -> expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 713

    (290) casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements . ENDCASE
    (294) casecontent_statements -> casecontent_statements . casecontent_statement
    (296) casecontent_statement -> . casecontent_condition COLON basic_statement
    (299) casecontent_statement -> . DEFAULT COLON basic_statement
    (297) casecontent_condition -> . casecontent_condition COMMA expression
    (298) casecontent_condition -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    ENDCASE         shift and go to state 765
    DEFAULT         shift and go to state 711
    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    casecontent_statement          shift and go to state 761
    casecontent_condition          shift and go to state 710
    expression                     shift and go to state 712
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 714

    (291) casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements . ENDCASE
    (294) casecontent_statements -> casecontent_statements . casecontent_statement
    (296) casecontent_statement -> . casecontent_condition COLON basic_statement
    (299) casecontent_statement -> . DEFAULT COLON basic_statement
    (297) casecontent_condition -> . casecontent_condition COMMA expression
    (298) casecontent_condition -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    ENDCASE         shift and go to state 766
    DEFAULT         shift and go to state 711
    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    casecontent_statement          shift and go to state 761
    casecontent_condition          shift and go to state 710
    expression                     shift and go to state 712
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 715

    (292) unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN . casecontent_statements ENDCASE
    (294) casecontent_statements -> . casecontent_statements casecontent_statement
    (295) casecontent_statements -> . casecontent_statement
    (296) casecontent_statement -> . casecontent_condition COLON basic_statement
    (299) casecontent_statement -> . DEFAULT COLON basic_statement
    (297) casecontent_condition -> . casecontent_condition COMMA expression
    (298) casecontent_condition -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    DEFAULT         shift and go to state 711
    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    casecontent_statements         shift and go to state 767
    casecontent_statement          shift and go to state 709
    casecontent_condition          shift and go to state 710
    expression                     shift and go to state 712
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 716

    (279) for_statement -> FOR LPAREN forpre forcond forpost . RPAREN forcontent_statement

    RPAREN          shift and go to state 768


state 717

    (287) while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .

    ENDMODULE       reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    GENERATE        reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    INTEGER         reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    REAL            reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    PARAMETER       reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    LOCALPARAM      reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    GENVAR          reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ASSIGN          reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ALWAYS          reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ALWAYS_FF       reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ALWAYS_COMB     reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ALWAYS_LATCH    reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    INITIAL         reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ID              reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    SENS_OR         reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    FUNCTION        reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    TASK            reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    LPAREN          reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    INPUT           reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    OUTPUT          reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    INOUT           reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    TRI             reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    REG             reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    LOGIC           reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    WIRE            reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    SIGNED          reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    SUPPLY0         reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    SUPPLY1         reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ENDGENERATE     reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    IF              reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    FOR             reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ELSE            reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    END             reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    CASE            reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    CASEX           reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    CASEZ           reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    UNIQUE          reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    WHILE           reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    WAIT            reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    FOREVER         reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    BEGIN           reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    FORK            reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    DELAY           reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    AT              reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    DOLLER          reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    DISABLE         reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    LBRACE          reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    SEMICOLON       reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    JOIN            reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ENDFUNCTION     reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ENDTASK         reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ENDCASE         reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    DEFAULT         reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    MINUS           reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    PLUS            reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    LNOT            reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    NOT             reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    AND             reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    NAND            reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    NOR             reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    OR              reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    XOR             reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    XNOR            reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    INTNUMBER_DEC   reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    INTNUMBER_BIN   reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    INTNUMBER_OCT   reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    INTNUMBER_HEX   reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    FLOATNUMBER     reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    STRING_LITERAL  reduce using rule 287 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)


state 718

    (288) whilecontent_statement -> basic_statement .

    ENDMODULE       reduce using rule 288 (whilecontent_statement -> basic_statement .)
    GENERATE        reduce using rule 288 (whilecontent_statement -> basic_statement .)
    INTEGER         reduce using rule 288 (whilecontent_statement -> basic_statement .)
    REAL            reduce using rule 288 (whilecontent_statement -> basic_statement .)
    PARAMETER       reduce using rule 288 (whilecontent_statement -> basic_statement .)
    LOCALPARAM      reduce using rule 288 (whilecontent_statement -> basic_statement .)
    GENVAR          reduce using rule 288 (whilecontent_statement -> basic_statement .)
    ASSIGN          reduce using rule 288 (whilecontent_statement -> basic_statement .)
    ALWAYS          reduce using rule 288 (whilecontent_statement -> basic_statement .)
    ALWAYS_FF       reduce using rule 288 (whilecontent_statement -> basic_statement .)
    ALWAYS_COMB     reduce using rule 288 (whilecontent_statement -> basic_statement .)
    ALWAYS_LATCH    reduce using rule 288 (whilecontent_statement -> basic_statement .)
    INITIAL         reduce using rule 288 (whilecontent_statement -> basic_statement .)
    ID              reduce using rule 288 (whilecontent_statement -> basic_statement .)
    SENS_OR         reduce using rule 288 (whilecontent_statement -> basic_statement .)
    FUNCTION        reduce using rule 288 (whilecontent_statement -> basic_statement .)
    TASK            reduce using rule 288 (whilecontent_statement -> basic_statement .)
    LPAREN          reduce using rule 288 (whilecontent_statement -> basic_statement .)
    INPUT           reduce using rule 288 (whilecontent_statement -> basic_statement .)
    OUTPUT          reduce using rule 288 (whilecontent_statement -> basic_statement .)
    INOUT           reduce using rule 288 (whilecontent_statement -> basic_statement .)
    TRI             reduce using rule 288 (whilecontent_statement -> basic_statement .)
    REG             reduce using rule 288 (whilecontent_statement -> basic_statement .)
    LOGIC           reduce using rule 288 (whilecontent_statement -> basic_statement .)
    WIRE            reduce using rule 288 (whilecontent_statement -> basic_statement .)
    SIGNED          reduce using rule 288 (whilecontent_statement -> basic_statement .)
    SUPPLY0         reduce using rule 288 (whilecontent_statement -> basic_statement .)
    SUPPLY1         reduce using rule 288 (whilecontent_statement -> basic_statement .)
    ENDGENERATE     reduce using rule 288 (whilecontent_statement -> basic_statement .)
    IF              reduce using rule 288 (whilecontent_statement -> basic_statement .)
    FOR             reduce using rule 288 (whilecontent_statement -> basic_statement .)
    ELSE            reduce using rule 288 (whilecontent_statement -> basic_statement .)
    END             reduce using rule 288 (whilecontent_statement -> basic_statement .)
    CASE            reduce using rule 288 (whilecontent_statement -> basic_statement .)
    CASEX           reduce using rule 288 (whilecontent_statement -> basic_statement .)
    CASEZ           reduce using rule 288 (whilecontent_statement -> basic_statement .)
    UNIQUE          reduce using rule 288 (whilecontent_statement -> basic_statement .)
    WHILE           reduce using rule 288 (whilecontent_statement -> basic_statement .)
    WAIT            reduce using rule 288 (whilecontent_statement -> basic_statement .)
    FOREVER         reduce using rule 288 (whilecontent_statement -> basic_statement .)
    BEGIN           reduce using rule 288 (whilecontent_statement -> basic_statement .)
    FORK            reduce using rule 288 (whilecontent_statement -> basic_statement .)
    DELAY           reduce using rule 288 (whilecontent_statement -> basic_statement .)
    AT              reduce using rule 288 (whilecontent_statement -> basic_statement .)
    DOLLER          reduce using rule 288 (whilecontent_statement -> basic_statement .)
    DISABLE         reduce using rule 288 (whilecontent_statement -> basic_statement .)
    LBRACE          reduce using rule 288 (whilecontent_statement -> basic_statement .)
    SEMICOLON       reduce using rule 288 (whilecontent_statement -> basic_statement .)
    JOIN            reduce using rule 288 (whilecontent_statement -> basic_statement .)
    ENDFUNCTION     reduce using rule 288 (whilecontent_statement -> basic_statement .)
    ENDTASK         reduce using rule 288 (whilecontent_statement -> basic_statement .)
    ENDCASE         reduce using rule 288 (whilecontent_statement -> basic_statement .)
    DEFAULT         reduce using rule 288 (whilecontent_statement -> basic_statement .)
    MINUS           reduce using rule 288 (whilecontent_statement -> basic_statement .)
    PLUS            reduce using rule 288 (whilecontent_statement -> basic_statement .)
    LNOT            reduce using rule 288 (whilecontent_statement -> basic_statement .)
    NOT             reduce using rule 288 (whilecontent_statement -> basic_statement .)
    AND             reduce using rule 288 (whilecontent_statement -> basic_statement .)
    NAND            reduce using rule 288 (whilecontent_statement -> basic_statement .)
    NOR             reduce using rule 288 (whilecontent_statement -> basic_statement .)
    OR              reduce using rule 288 (whilecontent_statement -> basic_statement .)
    XOR             reduce using rule 288 (whilecontent_statement -> basic_statement .)
    XNOR            reduce using rule 288 (whilecontent_statement -> basic_statement .)
    INTNUMBER_DEC   reduce using rule 288 (whilecontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 288 (whilecontent_statement -> basic_statement .)
    INTNUMBER_BIN   reduce using rule 288 (whilecontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 288 (whilecontent_statement -> basic_statement .)
    INTNUMBER_OCT   reduce using rule 288 (whilecontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 288 (whilecontent_statement -> basic_statement .)
    INTNUMBER_HEX   reduce using rule 288 (whilecontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 288 (whilecontent_statement -> basic_statement .)
    FLOATNUMBER     reduce using rule 288 (whilecontent_statement -> basic_statement .)
    STRING_LITERAL  reduce using rule 288 (whilecontent_statement -> basic_statement .)


state 719

    (303) wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .

    ENDMODULE       reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    GENERATE        reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    INTEGER         reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    REAL            reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    PARAMETER       reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    LOCALPARAM      reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    GENVAR          reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ASSIGN          reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ALWAYS          reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ALWAYS_FF       reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ALWAYS_COMB     reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ALWAYS_LATCH    reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    INITIAL         reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ID              reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    SENS_OR         reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    FUNCTION        reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    TASK            reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    LPAREN          reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    INPUT           reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    OUTPUT          reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    INOUT           reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    TRI             reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    REG             reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    LOGIC           reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    WIRE            reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    SIGNED          reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    SUPPLY0         reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    SUPPLY1         reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ENDGENERATE     reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    IF              reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    FOR             reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ELSE            reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    END             reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    CASE            reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    CASEX           reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    CASEZ           reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    UNIQUE          reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    WHILE           reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    WAIT            reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    FOREVER         reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    BEGIN           reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    FORK            reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    DELAY           reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    AT              reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    DOLLER          reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    DISABLE         reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    LBRACE          reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    SEMICOLON       reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    JOIN            reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ENDFUNCTION     reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ENDTASK         reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ENDCASE         reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    DEFAULT         reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    MINUS           reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    PLUS            reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    LNOT            reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    NOT             reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    AND             reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    NAND            reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    NOR             reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    OR              reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    XOR             reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    XNOR            reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    INTNUMBER_DEC   reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    INTNUMBER_BIN   reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    INTNUMBER_OCT   reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    INTNUMBER_HEX   reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    FLOATNUMBER     reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    STRING_LITERAL  reduce using rule 303 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)


state 720

    (304) waitcontent_statement -> basic_statement .

    ENDMODULE       reduce using rule 304 (waitcontent_statement -> basic_statement .)
    GENERATE        reduce using rule 304 (waitcontent_statement -> basic_statement .)
    INTEGER         reduce using rule 304 (waitcontent_statement -> basic_statement .)
    REAL            reduce using rule 304 (waitcontent_statement -> basic_statement .)
    PARAMETER       reduce using rule 304 (waitcontent_statement -> basic_statement .)
    LOCALPARAM      reduce using rule 304 (waitcontent_statement -> basic_statement .)
    GENVAR          reduce using rule 304 (waitcontent_statement -> basic_statement .)
    ASSIGN          reduce using rule 304 (waitcontent_statement -> basic_statement .)
    ALWAYS          reduce using rule 304 (waitcontent_statement -> basic_statement .)
    ALWAYS_FF       reduce using rule 304 (waitcontent_statement -> basic_statement .)
    ALWAYS_COMB     reduce using rule 304 (waitcontent_statement -> basic_statement .)
    ALWAYS_LATCH    reduce using rule 304 (waitcontent_statement -> basic_statement .)
    INITIAL         reduce using rule 304 (waitcontent_statement -> basic_statement .)
    ID              reduce using rule 304 (waitcontent_statement -> basic_statement .)
    SENS_OR         reduce using rule 304 (waitcontent_statement -> basic_statement .)
    FUNCTION        reduce using rule 304 (waitcontent_statement -> basic_statement .)
    TASK            reduce using rule 304 (waitcontent_statement -> basic_statement .)
    LPAREN          reduce using rule 304 (waitcontent_statement -> basic_statement .)
    INPUT           reduce using rule 304 (waitcontent_statement -> basic_statement .)
    OUTPUT          reduce using rule 304 (waitcontent_statement -> basic_statement .)
    INOUT           reduce using rule 304 (waitcontent_statement -> basic_statement .)
    TRI             reduce using rule 304 (waitcontent_statement -> basic_statement .)
    REG             reduce using rule 304 (waitcontent_statement -> basic_statement .)
    LOGIC           reduce using rule 304 (waitcontent_statement -> basic_statement .)
    WIRE            reduce using rule 304 (waitcontent_statement -> basic_statement .)
    SIGNED          reduce using rule 304 (waitcontent_statement -> basic_statement .)
    SUPPLY0         reduce using rule 304 (waitcontent_statement -> basic_statement .)
    SUPPLY1         reduce using rule 304 (waitcontent_statement -> basic_statement .)
    ENDGENERATE     reduce using rule 304 (waitcontent_statement -> basic_statement .)
    IF              reduce using rule 304 (waitcontent_statement -> basic_statement .)
    FOR             reduce using rule 304 (waitcontent_statement -> basic_statement .)
    ELSE            reduce using rule 304 (waitcontent_statement -> basic_statement .)
    END             reduce using rule 304 (waitcontent_statement -> basic_statement .)
    CASE            reduce using rule 304 (waitcontent_statement -> basic_statement .)
    CASEX           reduce using rule 304 (waitcontent_statement -> basic_statement .)
    CASEZ           reduce using rule 304 (waitcontent_statement -> basic_statement .)
    UNIQUE          reduce using rule 304 (waitcontent_statement -> basic_statement .)
    WHILE           reduce using rule 304 (waitcontent_statement -> basic_statement .)
    WAIT            reduce using rule 304 (waitcontent_statement -> basic_statement .)
    FOREVER         reduce using rule 304 (waitcontent_statement -> basic_statement .)
    BEGIN           reduce using rule 304 (waitcontent_statement -> basic_statement .)
    FORK            reduce using rule 304 (waitcontent_statement -> basic_statement .)
    DELAY           reduce using rule 304 (waitcontent_statement -> basic_statement .)
    AT              reduce using rule 304 (waitcontent_statement -> basic_statement .)
    DOLLER          reduce using rule 304 (waitcontent_statement -> basic_statement .)
    DISABLE         reduce using rule 304 (waitcontent_statement -> basic_statement .)
    LBRACE          reduce using rule 304 (waitcontent_statement -> basic_statement .)
    SEMICOLON       reduce using rule 304 (waitcontent_statement -> basic_statement .)
    JOIN            reduce using rule 304 (waitcontent_statement -> basic_statement .)
    ENDFUNCTION     reduce using rule 304 (waitcontent_statement -> basic_statement .)
    ENDTASK         reduce using rule 304 (waitcontent_statement -> basic_statement .)
    ENDCASE         reduce using rule 304 (waitcontent_statement -> basic_statement .)
    DEFAULT         reduce using rule 304 (waitcontent_statement -> basic_statement .)
    MINUS           reduce using rule 304 (waitcontent_statement -> basic_statement .)
    PLUS            reduce using rule 304 (waitcontent_statement -> basic_statement .)
    LNOT            reduce using rule 304 (waitcontent_statement -> basic_statement .)
    NOT             reduce using rule 304 (waitcontent_statement -> basic_statement .)
    AND             reduce using rule 304 (waitcontent_statement -> basic_statement .)
    NAND            reduce using rule 304 (waitcontent_statement -> basic_statement .)
    NOR             reduce using rule 304 (waitcontent_statement -> basic_statement .)
    OR              reduce using rule 304 (waitcontent_statement -> basic_statement .)
    XOR             reduce using rule 304 (waitcontent_statement -> basic_statement .)
    XNOR            reduce using rule 304 (waitcontent_statement -> basic_statement .)
    INTNUMBER_DEC   reduce using rule 304 (waitcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 304 (waitcontent_statement -> basic_statement .)
    INTNUMBER_BIN   reduce using rule 304 (waitcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 304 (waitcontent_statement -> basic_statement .)
    INTNUMBER_OCT   reduce using rule 304 (waitcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 304 (waitcontent_statement -> basic_statement .)
    INTNUMBER_HEX   reduce using rule 304 (waitcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 304 (waitcontent_statement -> basic_statement .)
    FLOATNUMBER     reduce using rule 304 (waitcontent_statement -> basic_statement .)
    STRING_LITERAL  reduce using rule 304 (waitcontent_statement -> basic_statement .)


state 721

    (305) waitcontent_statement -> SEMICOLON .

    ENDMODULE       reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    GENERATE        reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    INTEGER         reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    REAL            reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    PARAMETER       reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    LOCALPARAM      reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    GENVAR          reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    ASSIGN          reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    ALWAYS          reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    ALWAYS_FF       reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    ALWAYS_COMB     reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    INITIAL         reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    ID              reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    SENS_OR         reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    FUNCTION        reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    TASK            reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    LPAREN          reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    INPUT           reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    OUTPUT          reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    INOUT           reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    TRI             reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    REG             reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    LOGIC           reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    WIRE            reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    SIGNED          reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    SUPPLY0         reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    SUPPLY1         reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    ENDGENERATE     reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    IF              reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    FOR             reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    ELSE            reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    END             reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    CASE            reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    CASEX           reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    CASEZ           reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    UNIQUE          reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    WHILE           reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    WAIT            reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    FOREVER         reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    BEGIN           reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    FORK            reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    DELAY           reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    AT              reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    DOLLER          reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    DISABLE         reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    LBRACE          reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    JOIN            reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    ENDFUNCTION     reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    ENDTASK         reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    ENDCASE         reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    DEFAULT         reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    MINUS           reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    PLUS            reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    LNOT            reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    NOT             reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    AND             reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    NAND            reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    NOR             reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    OR              reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    XOR             reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    XNOR            reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    INTNUMBER_DEC   reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    SIGNED_INTNUMBER_DEC reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    INTNUMBER_BIN   reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    SIGNED_INTNUMBER_BIN reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    INTNUMBER_OCT   reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    SIGNED_INTNUMBER_OCT reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    INTNUMBER_HEX   reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    SIGNED_INTNUMBER_HEX reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    FLOATNUMBER     reduce using rule 305 (waitcontent_statement -> SEMICOLON .)
    STRING_LITERAL  reduce using rule 305 (waitcontent_statement -> SEMICOLON .)


state 722

    (259) namedblock -> BEGIN COLON ID namedblock_statements END .

    ENDMODULE       reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    GENERATE        reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    INTEGER         reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    REAL            reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    PARAMETER       reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    LOCALPARAM      reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    GENVAR          reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ASSIGN          reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ALWAYS          reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ALWAYS_FF       reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ALWAYS_COMB     reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ALWAYS_LATCH    reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    INITIAL         reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ID              reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    SENS_OR         reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    FUNCTION        reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    TASK            reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    LPAREN          reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    INPUT           reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    OUTPUT          reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    INOUT           reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    TRI             reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    REG             reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    LOGIC           reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    WIRE            reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    SIGNED          reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    SUPPLY0         reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    SUPPLY1         reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ENDGENERATE     reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    IF              reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    FOR             reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ELSE            reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    END             reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    CASE            reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    CASEX           reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    CASEZ           reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    UNIQUE          reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    WHILE           reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    WAIT            reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    FOREVER         reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    BEGIN           reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    FORK            reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    DELAY           reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    AT              reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    DOLLER          reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    DISABLE         reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    LBRACE          reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    SEMICOLON       reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    JOIN            reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ENDFUNCTION     reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ENDTASK         reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ENDCASE         reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    DEFAULT         reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    MINUS           reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    PLUS            reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    LNOT            reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    NOT             reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    AND             reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    NAND            reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    NOR             reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    OR              reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    XOR             reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    XNOR            reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    INTNUMBER_DEC   reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    SIGNED_INTNUMBER_DEC reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    INTNUMBER_BIN   reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    SIGNED_INTNUMBER_BIN reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    INTNUMBER_OCT   reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    SIGNED_INTNUMBER_OCT reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    INTNUMBER_HEX   reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    SIGNED_INTNUMBER_HEX reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    FLOATNUMBER     reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    STRING_LITERAL  reduce using rule 259 (namedblock -> BEGIN COLON ID namedblock_statements END .)


state 723

    (261) namedblock_statements -> namedblock_statements namedblock_statement .

    END             reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    INTEGER         reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    REAL            reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    PARAMETER       reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    LOCALPARAM      reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    IF              reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    CASE            reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    CASEX           reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    CASEZ           reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    UNIQUE          reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    FOR             reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    WHILE           reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    WAIT            reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    FOREVER         reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    BEGIN           reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    FORK            reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    DELAY           reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    AT              reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    DOLLER          reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    DISABLE         reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    INPUT           reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    OUTPUT          reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    INOUT           reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    TRI             reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    REG             reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    LOGIC           reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    WIRE            reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    SIGNED          reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    SUPPLY0         reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    SUPPLY1         reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    LBRACE          reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    ID              reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)
    SEMICOLON       reduce using rule 261 (namedblock_statements -> namedblock_statements namedblock_statement .)


state 724

    (311) instance_body -> ID LPAREN instance_ports RPAREN .

    SEMICOLON       reduce using rule 311 (instance_body -> ID LPAREN instance_ports RPAREN .)
    COMMA           reduce using rule 311 (instance_body -> ID LPAREN instance_ports RPAREN .)


state 725

    (312) instance_body -> ID width LPAREN instance_ports . RPAREN

    RPAREN          shift and go to state 769


state 726

    (323) param_args -> param_args COMMA param_arg .

    RPAREN          reduce using rule 323 (param_args -> param_args COMMA param_arg .)
    COMMA           reduce using rule 323 (param_args -> param_args COMMA param_arg .)


state 727

    (321) param_args_noname -> param_args_noname COMMA param_arg_noname .

    RPAREN          reduce using rule 321 (param_args_noname -> param_args_noname COMMA param_arg_noname .)
    COMMA           reduce using rule 321 (param_args_noname -> param_args_noname COMMA param_arg_noname .)


state 728

    (327) param_arg -> DOT ID LPAREN . expression RPAREN
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 770
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 729

    (336) instance_port_arg -> DOT ID LPAREN identifier . RPAREN
    (178) expression -> identifier .
    (407) scope -> identifier . DOT
    (184) partselect -> identifier . LBRACKET expression COLON expression RBRACKET
    (185) partselect -> identifier . LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> identifier . LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> identifier . LBRACKET expression RBRACKET
    (385) functioncall -> identifier . LPAREN func_args RPAREN

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 771
    POWER           reduce using rule 178 (expression -> identifier .)
    TIMES           reduce using rule 178 (expression -> identifier .)
    DIVIDE          reduce using rule 178 (expression -> identifier .)
    MOD             reduce using rule 178 (expression -> identifier .)
    PLUS            reduce using rule 178 (expression -> identifier .)
    MINUS           reduce using rule 178 (expression -> identifier .)
    LSHIFT          reduce using rule 178 (expression -> identifier .)
    RSHIFT          reduce using rule 178 (expression -> identifier .)
    LSHIFTA         reduce using rule 178 (expression -> identifier .)
    RSHIFTA         reduce using rule 178 (expression -> identifier .)
    LT              reduce using rule 178 (expression -> identifier .)
    GT              reduce using rule 178 (expression -> identifier .)
    LE              reduce using rule 178 (expression -> identifier .)
    GE              reduce using rule 178 (expression -> identifier .)
    EQ              reduce using rule 178 (expression -> identifier .)
    NE              reduce using rule 178 (expression -> identifier .)
    EQL             reduce using rule 178 (expression -> identifier .)
    NEL             reduce using rule 178 (expression -> identifier .)
    AND             reduce using rule 178 (expression -> identifier .)
    XOR             reduce using rule 178 (expression -> identifier .)
    XNOR            reduce using rule 178 (expression -> identifier .)
    OR              reduce using rule 178 (expression -> identifier .)
    LAND            reduce using rule 178 (expression -> identifier .)
    LOR             reduce using rule 178 (expression -> identifier .)
    COND            reduce using rule 178 (expression -> identifier .)
    DOT             shift and go to state 280
    LBRACKET        shift and go to state 278
    LPAREN          shift and go to state 279

  ! RPAREN          [ reduce using rule 178 (expression -> identifier .) ]


state 730

    (338) instance_port_arg -> DOT ID LPAREN RPAREN .

    COMMA           reduce using rule 338 (instance_port_arg -> DOT ID LPAREN RPAREN .)
    RPAREN          reduce using rule 338 (instance_port_arg -> DOT ID LPAREN RPAREN .)


state 731

    (337) instance_port_arg -> DOT ID LPAREN expression . RPAREN
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RPAREN          shift and go to state 772
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 732

    (175) expression -> pointer .
    (408) scope -> pointer . DOT
    (187) partselect -> pointer . LBRACKET expression COLON expression RBRACKET
    (188) partselect -> pointer . LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> pointer . LBRACKET expression MINUSCOLON expression RBRACKET
    (191) pointer -> pointer . LBRACKET expression RBRACKET

    RPAREN          reduce using rule 175 (expression -> pointer .)
    POWER           reduce using rule 175 (expression -> pointer .)
    TIMES           reduce using rule 175 (expression -> pointer .)
    DIVIDE          reduce using rule 175 (expression -> pointer .)
    MOD             reduce using rule 175 (expression -> pointer .)
    PLUS            reduce using rule 175 (expression -> pointer .)
    MINUS           reduce using rule 175 (expression -> pointer .)
    LSHIFT          reduce using rule 175 (expression -> pointer .)
    RSHIFT          reduce using rule 175 (expression -> pointer .)
    LSHIFTA         reduce using rule 175 (expression -> pointer .)
    RSHIFTA         reduce using rule 175 (expression -> pointer .)
    LT              reduce using rule 175 (expression -> pointer .)
    GT              reduce using rule 175 (expression -> pointer .)
    LE              reduce using rule 175 (expression -> pointer .)
    GE              reduce using rule 175 (expression -> pointer .)
    EQ              reduce using rule 175 (expression -> pointer .)
    NE              reduce using rule 175 (expression -> pointer .)
    EQL             reduce using rule 175 (expression -> pointer .)
    NEL             reduce using rule 175 (expression -> pointer .)
    AND             reduce using rule 175 (expression -> pointer .)
    XOR             reduce using rule 175 (expression -> pointer .)
    XNOR            reduce using rule 175 (expression -> pointer .)
    OR              reduce using rule 175 (expression -> pointer .)
    LAND            reduce using rule 175 (expression -> pointer .)
    LOR             reduce using rule 175 (expression -> pointer .)
    COND            reduce using rule 175 (expression -> pointer .)
    DOT             shift and go to state 277
    LBRACKET        shift and go to state 276


state 733

    (368) function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .

    ENDMODULE       reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    GENERATE        reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    INTEGER         reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    REAL            reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    PARAMETER       reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    LOCALPARAM      reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    GENVAR          reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    ASSIGN          reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    ALWAYS          reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    ALWAYS_FF       reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    ALWAYS_COMB     reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    ALWAYS_LATCH    reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    INITIAL         reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    ID              reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    SENS_OR         reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    FUNCTION        reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    TASK            reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    LPAREN          reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    INPUT           reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    OUTPUT          reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    INOUT           reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    TRI             reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    REG             reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    LOGIC           reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    WIRE            reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    SIGNED          reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    SUPPLY0         reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    SUPPLY1         reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    ENDGENERATE     reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    IF              reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    FOR             reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    ELSE            reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    END             reduce using rule 368 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)


state 734

    (370) function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .

    ENDMODULE       reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    GENERATE        reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    INTEGER         reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    REAL            reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    PARAMETER       reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    LOCALPARAM      reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    GENVAR          reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    ASSIGN          reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    ALWAYS          reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    ALWAYS_FF       reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    ALWAYS_COMB     reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    ALWAYS_LATCH    reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    INITIAL         reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    ID              reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    SENS_OR         reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    FUNCTION        reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    TASK            reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    LPAREN          reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    INPUT           reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    OUTPUT          reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    INOUT           reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    TRI             reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    REG             reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    LOGIC           reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    WIRE            reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    SIGNED          reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    SUPPLY0         reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    SUPPLY1         reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    ENDGENERATE     reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    IF              reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    FOR             reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    ELSE            reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)
    END             reduce using rule 370 (function -> FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION .)


state 735

    (51) ioport -> sigtypes width portname dimensions .
    (58) dimensions -> dimensions . length
    (57) length -> . LBRACKET expression COLON expression RBRACKET

    RPAREN          reduce using rule 51 (ioport -> sigtypes width portname dimensions .)
    COMMA           reduce using rule 51 (ioport -> sigtypes width portname dimensions .)
    LBRACKET        shift and go to state 299

    length                         shift and go to state 460

state 736

    (187) partselect -> pointer LBRACKET expression COLON expression RBRACKET .

    TIMES           reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    POWER           reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    DIVIDE          reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    MOD             reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    PLUS            reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    MINUS           reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    LSHIFT          reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    RSHIFT          reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    LSHIFTA         reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    RSHIFTA         reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    LT              reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    GT              reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    LE              reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    GE              reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    EQ              reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    NE              reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    EQL             reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    NEL             reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    AND             reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    XOR             reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    XNOR            reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    OR              reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    LAND            reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    LOR             reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    COND            reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    RPAREN          reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    LBRACE          reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    RBRACE          reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    COLON           reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    SEMICOLON       reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    PLUSCOLON       reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    MINUSCOLON      reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    RBRACKET        reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    IF              reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    CASE            reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    CASEX           reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    CASEZ           reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    UNIQUE          reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    FOR             reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    WHILE           reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    WAIT            reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    FOREVER         reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    BEGIN           reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    FORK            reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    DELAY           reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    AT              reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    DOLLER          reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    DISABLE         reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    ID              reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    SENS_OR         reduce using rule 187 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)


state 737

    (188) partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .

    TIMES           reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    POWER           reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    DIVIDE          reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    MOD             reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    PLUS            reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    MINUS           reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    LSHIFT          reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    RSHIFT          reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    LSHIFTA         reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    RSHIFTA         reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    LT              reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    GT              reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    LE              reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    GE              reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    EQ              reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    NE              reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    EQL             reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    NEL             reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    AND             reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    XOR             reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    XNOR            reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    OR              reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    LAND            reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    LOR             reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    COND            reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    RPAREN          reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    LBRACE          reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    RBRACE          reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    COMMA           reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    COLON           reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    SEMICOLON       reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    PLUSCOLON       reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    MINUSCOLON      reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    RBRACKET        reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    IF              reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    CASE            reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    CASEX           reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    CASEZ           reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    UNIQUE          reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    FOR             reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    WHILE           reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    WAIT            reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    FOREVER         reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    BEGIN           reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    FORK            reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    DELAY           reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    AT              reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    DOLLER          reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    DISABLE         reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    ID              reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    SENS_OR         reduce using rule 188 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)


state 738

    (189) partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .

    TIMES           reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    POWER           reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    DIVIDE          reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    MOD             reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    PLUS            reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    MINUS           reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    LSHIFT          reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    RSHIFT          reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    LSHIFTA         reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    RSHIFTA         reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    LT              reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    GT              reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    LE              reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    GE              reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    EQ              reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    NE              reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    EQL             reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    NEL             reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    AND             reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    XOR             reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    XNOR            reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    OR              reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    LAND            reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    LOR             reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    COND            reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    RPAREN          reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    LBRACE          reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    RBRACE          reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    COMMA           reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    COLON           reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    SEMICOLON       reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    PLUSCOLON       reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    MINUSCOLON      reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    RBRACKET        reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    IF              reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    CASE            reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    CASEX           reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    CASEZ           reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    UNIQUE          reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    FOR             reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    WHILE           reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    WAIT            reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    FOREVER         reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    BEGIN           reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    FORK            reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    DELAY           reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    AT              reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    DOLLER          reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    DISABLE         reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    ID              reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    SENS_OR         reduce using rule 189 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)


state 739

    (184) partselect -> identifier LBRACKET expression COLON expression RBRACKET .

    TIMES           reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    POWER           reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    DIVIDE          reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    MOD             reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    PLUS            reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    MINUS           reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    LSHIFT          reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    RSHIFT          reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    LSHIFTA         reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    RSHIFTA         reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    LT              reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    GT              reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    LE              reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    GE              reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    EQ              reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    NE              reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    EQL             reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    NEL             reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    AND             reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    XOR             reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    XNOR            reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    OR              reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    LAND            reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    LOR             reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    COND            reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    RPAREN          reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    LBRACE          reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    RBRACE          reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    COLON           reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    SEMICOLON       reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    PLUSCOLON       reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    MINUSCOLON      reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    RBRACKET        reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    IF              reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    CASE            reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    CASEX           reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    CASEZ           reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    UNIQUE          reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    FOR             reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    WHILE           reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    WAIT            reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    FOREVER         reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    BEGIN           reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    FORK            reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    DELAY           reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    AT              reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    DOLLER          reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    DISABLE         reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    ID              reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    SENS_OR         reduce using rule 184 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)


state 740

    (185) partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .

    TIMES           reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    POWER           reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    DIVIDE          reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    MOD             reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    PLUS            reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    MINUS           reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    LSHIFT          reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    RSHIFT          reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    LSHIFTA         reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    RSHIFTA         reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    LT              reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    GT              reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    LE              reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    GE              reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    EQ              reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    NE              reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    EQL             reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    NEL             reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    AND             reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    XOR             reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    XNOR            reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    OR              reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    LAND            reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    LOR             reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    COND            reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    RPAREN          reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    LBRACE          reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    RBRACE          reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    COMMA           reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    COLON           reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    SEMICOLON       reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    PLUSCOLON       reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    MINUSCOLON      reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    RBRACKET        reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    IF              reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    CASE            reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    CASEX           reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    CASEZ           reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    UNIQUE          reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    FOR             reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    WHILE           reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    WAIT            reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    FOREVER         reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    BEGIN           reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    FORK            reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    DELAY           reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    AT              reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    DOLLER          reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    DISABLE         reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    ID              reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    SENS_OR         reduce using rule 185 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)


state 741

    (186) partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .

    TIMES           reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    POWER           reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    DIVIDE          reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    MOD             reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    PLUS            reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    MINUS           reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    LSHIFT          reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    RSHIFT          reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    LSHIFTA         reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    RSHIFTA         reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    LT              reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    GT              reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    LE              reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    GE              reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    EQ              reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    NE              reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    EQL             reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    NEL             reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    AND             reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    XOR             reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    XNOR            reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    OR              reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    LAND            reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    LOR             reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    COND            reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    RPAREN          reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    LBRACE          reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    RBRACE          reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    COMMA           reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    COLON           reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    SEMICOLON       reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    PLUSCOLON       reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    MINUSCOLON      reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    RBRACKET        reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    IF              reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    CASE            reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    CASEX           reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    CASEZ           reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    UNIQUE          reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    FOR             reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    WHILE           reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    WAIT            reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    FOREVER         reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    BEGIN           reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    FORK            reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    DELAY           reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    AT              reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    DOLLER          reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    DISABLE         reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    ID              reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    SENS_OR         reduce using rule 186 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)


state 742

    (364) sysargs -> sysargs COMMA sysarg .

    RPAREN          reduce using rule 364 (sysargs -> sysargs COMMA sysarg .)
    COMMA           reduce using rule 364 (sysargs -> sysargs COMMA sysarg .)


state 743

    (352) generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE . gif_false_item
    (356) gif_false_item -> . generate_item
    (357) gif_false_item -> . generate_block
    (347) generate_item -> . standard_item
    (348) generate_item -> . generate_if
    (349) generate_item -> . generate_for
    (350) generate_block -> . BEGIN generate_items END
    (351) generate_block -> . BEGIN COLON ID generate_items END
    (65) standard_item -> . decl
    (66) standard_item -> . integerdecl
    (67) standard_item -> . realdecl
    (68) standard_item -> . declassign
    (69) standard_item -> . parameterdecl
    (70) standard_item -> . localparamdecl
    (71) standard_item -> . genvardecl
    (72) standard_item -> . assignment
    (73) standard_item -> . always
    (74) standard_item -> . always_ff
    (75) standard_item -> . always_comb
    (76) standard_item -> . always_latch
    (77) standard_item -> . initial
    (78) standard_item -> . instance
    (79) standard_item -> . function
    (80) standard_item -> . task
    (81) standard_item -> . pragma
    (352) generate_if -> . IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (353) generate_if -> . IF LPAREN cond RPAREN gif_true_item
    (358) generate_for -> . FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
    (82) decl -> . sigtypes declnamelist SEMICOLON
    (83) decl -> . sigtypes width declnamelist SEMICOLON
    (92) integerdecl -> . INTEGER integernamelist SEMICOLON
    (93) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (98) realdecl -> . REAL realnamelist SEMICOLON
    (88) declassign -> . sigtypes declassign_element SEMICOLON
    (89) declassign -> . sigtypes width declassign_element SEMICOLON
    (102) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (103) parameterdecl -> . PARAMETER SIGNED param_substitution_list SEMICOLON
    (104) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (105) parameterdecl -> . PARAMETER SIGNED width param_substitution_list SEMICOLON
    (106) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (107) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (108) localparamdecl -> . LOCALPARAM SIGNED param_substitution_list SEMICOLON
    (109) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (110) localparamdecl -> . LOCALPARAM SIGNED width param_substitution_list SEMICOLON
    (111) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (339) genvardecl -> . GENVAR genvarlist SEMICOLON
    (115) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (116) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (205) always -> . ALWAYS senslist always_statement
    (206) always_ff -> . ALWAYS_FF senslist always_statement
    (207) always_comb -> . ALWAYS_COMB senslist always_statement
    (208) always_latch -> . ALWAYS_LATCH senslist always_statement
    (300) initial -> . INITIAL initial_statement
    (307) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (308) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (313) instance -> . ID instance_bodylist_noname SEMICOLON
    (314) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (368) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (369) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (370) function -> . FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION
    (389) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

    BEGIN           shift and go to state 682
    IF              shift and go to state 132
    FOR             shift and go to state 133
    INTEGER         shift and go to state 48
    REAL            shift and go to state 50
    PARAMETER       shift and go to state 51
    LOCALPARAM      shift and go to state 52
    GENVAR          shift and go to state 53
    ASSIGN          shift and go to state 54
    ALWAYS          shift and go to state 55
    ALWAYS_FF       shift and go to state 56
    ALWAYS_COMB     shift and go to state 57
    ALWAYS_LATCH    shift and go to state 58
    INITIAL         shift and go to state 59
    ID              shift and go to state 60
    SENS_OR         shift and go to state 61
    FUNCTION        shift and go to state 62
    TASK            shift and go to state 63
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 65
    OUTPUT          shift and go to state 66
    INOUT           shift and go to state 67
    TRI             shift and go to state 68
    REG             shift and go to state 69
    LOGIC           shift and go to state 70
    WIRE            shift and go to state 71
    SIGNED          shift and go to state 49
    SUPPLY0         shift and go to state 72
    SUPPLY1         shift and go to state 73

    gif_false_item                 shift and go to state 773
    generate_item                  shift and go to state 774
    generate_block                 shift and go to state 775
    standard_item                  shift and go to state 129
    generate_if                    shift and go to state 130
    generate_for                   shift and go to state 131
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    always_ff                      shift and go to state 38
    always_comb                    shift and go to state 39
    always_latch                   shift and go to state 40
    initial                        shift and go to state 41
    instance                       shift and go to state 42
    function                       shift and go to state 43
    task                           shift and go to state 44
    pragma                         shift and go to state 45
    sigtypes                       shift and go to state 47
    sigtype                        shift and go to state 64

state 744

    (350) generate_block -> BEGIN generate_items . END
    (345) generate_items -> generate_items . generate_item
    (347) generate_item -> . standard_item
    (348) generate_item -> . generate_if
    (349) generate_item -> . generate_for
    (65) standard_item -> . decl
    (66) standard_item -> . integerdecl
    (67) standard_item -> . realdecl
    (68) standard_item -> . declassign
    (69) standard_item -> . parameterdecl
    (70) standard_item -> . localparamdecl
    (71) standard_item -> . genvardecl
    (72) standard_item -> . assignment
    (73) standard_item -> . always
    (74) standard_item -> . always_ff
    (75) standard_item -> . always_comb
    (76) standard_item -> . always_latch
    (77) standard_item -> . initial
    (78) standard_item -> . instance
    (79) standard_item -> . function
    (80) standard_item -> . task
    (81) standard_item -> . pragma
    (352) generate_if -> . IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (353) generate_if -> . IF LPAREN cond RPAREN gif_true_item
    (358) generate_for -> . FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
    (82) decl -> . sigtypes declnamelist SEMICOLON
    (83) decl -> . sigtypes width declnamelist SEMICOLON
    (92) integerdecl -> . INTEGER integernamelist SEMICOLON
    (93) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (98) realdecl -> . REAL realnamelist SEMICOLON
    (88) declassign -> . sigtypes declassign_element SEMICOLON
    (89) declassign -> . sigtypes width declassign_element SEMICOLON
    (102) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (103) parameterdecl -> . PARAMETER SIGNED param_substitution_list SEMICOLON
    (104) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (105) parameterdecl -> . PARAMETER SIGNED width param_substitution_list SEMICOLON
    (106) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (107) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (108) localparamdecl -> . LOCALPARAM SIGNED param_substitution_list SEMICOLON
    (109) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (110) localparamdecl -> . LOCALPARAM SIGNED width param_substitution_list SEMICOLON
    (111) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (339) genvardecl -> . GENVAR genvarlist SEMICOLON
    (115) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (116) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (205) always -> . ALWAYS senslist always_statement
    (206) always_ff -> . ALWAYS_FF senslist always_statement
    (207) always_comb -> . ALWAYS_COMB senslist always_statement
    (208) always_latch -> . ALWAYS_LATCH senslist always_statement
    (300) initial -> . INITIAL initial_statement
    (307) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (308) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (313) instance -> . ID instance_bodylist_noname SEMICOLON
    (314) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (368) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (369) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (370) function -> . FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION
    (389) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

    END             shift and go to state 776
    IF              shift and go to state 132
    FOR             shift and go to state 133
    INTEGER         shift and go to state 48
    REAL            shift and go to state 50
    PARAMETER       shift and go to state 51
    LOCALPARAM      shift and go to state 52
    GENVAR          shift and go to state 53
    ASSIGN          shift and go to state 54
    ALWAYS          shift and go to state 55
    ALWAYS_FF       shift and go to state 56
    ALWAYS_COMB     shift and go to state 57
    ALWAYS_LATCH    shift and go to state 58
    INITIAL         shift and go to state 59
    ID              shift and go to state 60
    SENS_OR         shift and go to state 61
    FUNCTION        shift and go to state 62
    TASK            shift and go to state 63
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 65
    OUTPUT          shift and go to state 66
    INOUT           shift and go to state 67
    TRI             shift and go to state 68
    REG             shift and go to state 69
    LOGIC           shift and go to state 70
    WIRE            shift and go to state 71
    SIGNED          shift and go to state 49
    SUPPLY0         shift and go to state 72
    SUPPLY1         shift and go to state 73

    generate_item                  shift and go to state 287
    standard_item                  shift and go to state 129
    generate_if                    shift and go to state 130
    generate_for                   shift and go to state 131
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    always_ff                      shift and go to state 38
    always_comb                    shift and go to state 39
    always_latch                   shift and go to state 40
    initial                        shift and go to state 41
    instance                       shift and go to state 42
    function                       shift and go to state 43
    task                           shift and go to state 44
    pragma                         shift and go to state 45
    sigtypes                       shift and go to state 47
    sigtype                        shift and go to state 64

state 745

    (351) generate_block -> BEGIN COLON . ID generate_items END

    ID              shift and go to state 777


state 746

    (358) generate_for -> FOR LPAREN forpre forcond forpost RPAREN . generate_forcontent
    (359) generate_forcontent -> . generate_item
    (360) generate_forcontent -> . generate_block
    (347) generate_item -> . standard_item
    (348) generate_item -> . generate_if
    (349) generate_item -> . generate_for
    (350) generate_block -> . BEGIN generate_items END
    (351) generate_block -> . BEGIN COLON ID generate_items END
    (65) standard_item -> . decl
    (66) standard_item -> . integerdecl
    (67) standard_item -> . realdecl
    (68) standard_item -> . declassign
    (69) standard_item -> . parameterdecl
    (70) standard_item -> . localparamdecl
    (71) standard_item -> . genvardecl
    (72) standard_item -> . assignment
    (73) standard_item -> . always
    (74) standard_item -> . always_ff
    (75) standard_item -> . always_comb
    (76) standard_item -> . always_latch
    (77) standard_item -> . initial
    (78) standard_item -> . instance
    (79) standard_item -> . function
    (80) standard_item -> . task
    (81) standard_item -> . pragma
    (352) generate_if -> . IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (353) generate_if -> . IF LPAREN cond RPAREN gif_true_item
    (358) generate_for -> . FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
    (82) decl -> . sigtypes declnamelist SEMICOLON
    (83) decl -> . sigtypes width declnamelist SEMICOLON
    (92) integerdecl -> . INTEGER integernamelist SEMICOLON
    (93) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (98) realdecl -> . REAL realnamelist SEMICOLON
    (88) declassign -> . sigtypes declassign_element SEMICOLON
    (89) declassign -> . sigtypes width declassign_element SEMICOLON
    (102) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (103) parameterdecl -> . PARAMETER SIGNED param_substitution_list SEMICOLON
    (104) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (105) parameterdecl -> . PARAMETER SIGNED width param_substitution_list SEMICOLON
    (106) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (107) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (108) localparamdecl -> . LOCALPARAM SIGNED param_substitution_list SEMICOLON
    (109) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (110) localparamdecl -> . LOCALPARAM SIGNED width param_substitution_list SEMICOLON
    (111) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (339) genvardecl -> . GENVAR genvarlist SEMICOLON
    (115) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (116) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (205) always -> . ALWAYS senslist always_statement
    (206) always_ff -> . ALWAYS_FF senslist always_statement
    (207) always_comb -> . ALWAYS_COMB senslist always_statement
    (208) always_latch -> . ALWAYS_LATCH senslist always_statement
    (300) initial -> . INITIAL initial_statement
    (307) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (308) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (313) instance -> . ID instance_bodylist_noname SEMICOLON
    (314) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (368) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (369) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (370) function -> . FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION
    (389) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

    BEGIN           shift and go to state 682
    IF              shift and go to state 132
    FOR             shift and go to state 133
    INTEGER         shift and go to state 48
    REAL            shift and go to state 50
    PARAMETER       shift and go to state 51
    LOCALPARAM      shift and go to state 52
    GENVAR          shift and go to state 53
    ASSIGN          shift and go to state 54
    ALWAYS          shift and go to state 55
    ALWAYS_FF       shift and go to state 56
    ALWAYS_COMB     shift and go to state 57
    ALWAYS_LATCH    shift and go to state 58
    INITIAL         shift and go to state 59
    ID              shift and go to state 60
    SENS_OR         shift and go to state 61
    FUNCTION        shift and go to state 62
    TASK            shift and go to state 63
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 65
    OUTPUT          shift and go to state 66
    INOUT           shift and go to state 67
    TRI             shift and go to state 68
    REG             shift and go to state 69
    LOGIC           shift and go to state 70
    WIRE            shift and go to state 71
    SIGNED          shift and go to state 49
    SUPPLY0         shift and go to state 72
    SUPPLY1         shift and go to state 73

    generate_forcontent            shift and go to state 778
    generate_item                  shift and go to state 779
    generate_block                 shift and go to state 780
    standard_item                  shift and go to state 129
    generate_if                    shift and go to state 130
    generate_for                   shift and go to state 131
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    always_ff                      shift and go to state 38
    always_comb                    shift and go to state 39
    always_latch                   shift and go to state 40
    initial                        shift and go to state 41
    instance                       shift and go to state 42
    function                       shift and go to state 43
    task                           shift and go to state 44
    pragma                         shift and go to state 45
    sigtypes                       shift and go to state 47
    sigtype                        shift and go to state 64

state 747

    (247) blocking_substitution_base -> delays lvalue . EQUALS delays rvalue

    EQUALS          shift and go to state 781


state 748

    (57) length -> LBRACKET expression COLON expression RBRACKET .

    LBRACKET        reduce using rule 57 (length -> LBRACKET expression COLON expression RBRACKET .)
    SEMICOLON       reduce using rule 57 (length -> LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 57 (length -> LBRACKET expression COLON expression RBRACKET .)
    RPAREN          reduce using rule 57 (length -> LBRACKET expression COLON expression RBRACKET .)


state 749

    (116) assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .

    ENDMODULE       reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    GENERATE        reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    INTEGER         reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    REAL            reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    PARAMETER       reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    LOCALPARAM      reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    GENVAR          reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    ASSIGN          reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    ALWAYS          reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    ALWAYS_FF       reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    ALWAYS_COMB     reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    INITIAL         reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    ID              reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    SENS_OR         reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    FUNCTION        reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    TASK            reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    LPAREN          reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    INPUT           reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    OUTPUT          reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    INOUT           reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    TRI             reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    REG             reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    LOGIC           reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    WIRE            reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    SIGNED          reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    SUPPLY0         reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    SUPPLY1         reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    ENDGENERATE     reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    IF              reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    FOR             reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    ELSE            reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    END             reduce using rule 116 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)


state 750

    (120) lpartselect -> identifier LBRACKET expression COLON expression RBRACKET .

    EQUALS          reduce using rule 120 (lpartselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    RBRACE          reduce using rule 120 (lpartselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 120 (lpartselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    LE              reduce using rule 120 (lpartselect -> identifier LBRACKET expression COLON expression RBRACKET .)


state 751

    (121) lpartselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .

    EQUALS          reduce using rule 121 (lpartselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    RBRACE          reduce using rule 121 (lpartselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    COMMA           reduce using rule 121 (lpartselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    LE              reduce using rule 121 (lpartselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)


state 752

    (122) lpartselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .

    EQUALS          reduce using rule 122 (lpartselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    RBRACE          reduce using rule 122 (lpartselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    COMMA           reduce using rule 122 (lpartselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    LE              reduce using rule 122 (lpartselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)


state 753

    (117) lpartselect -> pointer LBRACKET expression COLON expression RBRACKET .

    EQUALS          reduce using rule 117 (lpartselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    RBRACE          reduce using rule 117 (lpartselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 117 (lpartselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    LE              reduce using rule 117 (lpartselect -> pointer LBRACKET expression COLON expression RBRACKET .)


state 754

    (118) lpartselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .

    EQUALS          reduce using rule 118 (lpartselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    RBRACE          reduce using rule 118 (lpartselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    COMMA           reduce using rule 118 (lpartselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    LE              reduce using rule 118 (lpartselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)


state 755

    (119) lpartselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .

    EQUALS          reduce using rule 119 (lpartselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    RBRACE          reduce using rule 119 (lpartselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    COMMA           reduce using rule 119 (lpartselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    LE              reduce using rule 119 (lpartselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)


state 756

    (271) if_statement -> IF LPAREN cond RPAREN true_statement ELSE . else_statement
    (278) else_statement -> . ifcontent_statement
    (276) ifcontent_statement -> . basic_statement
    (229) basic_statement -> . if_statement
    (230) basic_statement -> . case_statement
    (231) basic_statement -> . casex_statement
    (232) basic_statement -> . casez_statement
    (233) basic_statement -> . unique_case_statement
    (234) basic_statement -> . for_statement
    (235) basic_statement -> . while_statement
    (236) basic_statement -> . event_statement
    (237) basic_statement -> . wait_statement
    (238) basic_statement -> . forever_statement
    (239) basic_statement -> . block
    (240) basic_statement -> . namedblock
    (241) basic_statement -> . parallelblock
    (242) basic_statement -> . blocking_substitution
    (243) basic_statement -> . nonblocking_substitution
    (244) basic_statement -> . single_statement
    (271) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (272) if_statement -> . IF LPAREN cond RPAREN true_statement
    (273) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (274) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (289) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (290) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (291) casez_statement -> . CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (292) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (279) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (287) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (302) event_statement -> . senslist SEMICOLON
    (303) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (306) forever_statement -> . FOREVER basic_statement
    (254) block -> . BEGIN block_statements END
    (255) block -> . BEGIN END
    (259) namedblock -> . BEGIN COLON ID namedblock_statements END
    (260) namedblock -> . BEGIN COLON ID END
    (269) parallelblock -> . FORK block_statements JOIN
    (270) parallelblock -> . FORK JOIN
    (246) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (248) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (410) single_statement -> . DELAY expression SEMICOLON
    (411) single_statement -> . systemcall SEMICOLON
    (412) single_statement -> . disable SEMICOLON
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (209) senslist -> . AT LPAREN edgesigs RPAREN
    (217) senslist -> . empty
    (218) senslist -> . AT levelsig
    (219) senslist -> . AT LPAREN levelsigs RPAREN
    (227) senslist -> . AT TIMES
    (228) senslist -> . AT LPAREN TIMES RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (409) disable -> . DISABLE ID
    (413) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 196
    CASE            shift and go to state 198
    CASEX           shift and go to state 199
    CASEZ           shift and go to state 200
    UNIQUE          shift and go to state 201
    FOR             shift and go to state 202
    WHILE           shift and go to state 203
    WAIT            shift and go to state 205
    FOREVER         shift and go to state 206
    BEGIN           shift and go to state 207
    FORK            shift and go to state 208
    DELAY           shift and go to state 209
    AT              shift and go to state 173
    DOLLER          shift and go to state 109
    DISABLE         shift and go to state 213
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    SEMICOLON       reduce using rule 413 (empty -> .)

  ! IF              [ reduce using rule 413 (empty -> .) ]

    else_statement                 shift and go to state 782
    ifcontent_statement            shift and go to state 783
    basic_statement                shift and go to state 704
    if_statement                   shift and go to state 180
    case_statement                 shift and go to state 181
    casex_statement                shift and go to state 182
    casez_statement                shift and go to state 183
    unique_case_statement          shift and go to state 184
    for_statement                  shift and go to state 185
    while_statement                shift and go to state 186
    event_statement                shift and go to state 187
    wait_statement                 shift and go to state 188
    forever_statement              shift and go to state 189
    block                          shift and go to state 190
    namedblock                     shift and go to state 191
    parallelblock                  shift and go to state 192
    blocking_substitution          shift and go to state 193
    nonblocking_substitution       shift and go to state 194
    single_statement               shift and go to state 195
    delays                         shift and go to state 197
    senslist                       shift and go to state 204
    systemcall                     shift and go to state 210
    disable                        shift and go to state 211
    empty                          shift and go to state 212

state 757

    (273) if_statement -> delays IF LPAREN cond RPAREN true_statement . ELSE else_statement
    (274) if_statement -> delays IF LPAREN cond RPAREN true_statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 784
    ENDMODULE       reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    GENERATE        reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    INTEGER         reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    REAL            reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    PARAMETER       reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    LOCALPARAM      reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    GENVAR          reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    ASSIGN          reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    ALWAYS          reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    ALWAYS_FF       reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    ALWAYS_COMB     reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    ALWAYS_LATCH    reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    INITIAL         reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    ID              reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    SENS_OR         reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    FUNCTION        reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    TASK            reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    LPAREN          reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    INPUT           reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    OUTPUT          reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    INOUT           reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    TRI             reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    REG             reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    LOGIC           reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    WIRE            reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    SIGNED          reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    SUPPLY0         reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    SUPPLY1         reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    ENDGENERATE     reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    IF              reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    FOR             reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    END             reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    CASE            reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    CASEX           reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    CASEZ           reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    UNIQUE          reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    WHILE           reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    WAIT            reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    FOREVER         reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    BEGIN           reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    FORK            reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    DELAY           reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    AT              reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    DOLLER          reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    DISABLE         reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    LBRACE          reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    SEMICOLON       reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    JOIN            reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    ENDFUNCTION     reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    ENDTASK         reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    ENDCASE         reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    DEFAULT         reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    MINUS           reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    PLUS            reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    LNOT            reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    NOT             reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    AND             reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    NAND            reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    NOR             reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    OR              reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    XOR             reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    XNOR            reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    INTNUMBER_DEC   reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    INTNUMBER_BIN   reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    INTNUMBER_OCT   reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    INTNUMBER_HEX   reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    FLOATNUMBER     reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    STRING_LITERAL  reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)

  ! ELSE            [ reduce using rule 274 (if_statement -> delays IF LPAREN cond RPAREN true_statement .) ]


state 758

    (246) blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .

    ENDMODULE       reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    GENERATE        reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    INTEGER         reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    REAL            reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    PARAMETER       reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    LOCALPARAM      reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    GENVAR          reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ASSIGN          reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ALWAYS          reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ALWAYS_FF       reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ALWAYS_COMB     reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    INITIAL         reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ID              reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    SENS_OR         reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    FUNCTION        reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    TASK            reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    LPAREN          reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    INPUT           reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    OUTPUT          reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    INOUT           reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    TRI             reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    REG             reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    LOGIC           reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    WIRE            reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    SIGNED          reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    SUPPLY0         reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    SUPPLY1         reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ENDGENERATE     reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    IF              reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    FOR             reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ELSE            reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    END             reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    CASE            reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    CASEX           reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    CASEZ           reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    UNIQUE          reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    WHILE           reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    WAIT            reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    FOREVER         reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    BEGIN           reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    FORK            reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    DELAY           reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    AT              reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    DOLLER          reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    DISABLE         reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    LBRACE          reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    SEMICOLON       reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    JOIN            reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ENDFUNCTION     reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ENDTASK         reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ENDCASE         reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    DEFAULT         reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    MINUS           reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    PLUS            reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    LNOT            reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    NOT             reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    AND             reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    NAND            reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    NOR             reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    OR              reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    XOR             reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    XNOR            reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    INTNUMBER_DEC   reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    SIGNED_INTNUMBER_DEC reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    INTNUMBER_BIN   reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    SIGNED_INTNUMBER_BIN reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    INTNUMBER_OCT   reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    SIGNED_INTNUMBER_OCT reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    INTNUMBER_HEX   reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    SIGNED_INTNUMBER_HEX reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    FLOATNUMBER     reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    STRING_LITERAL  reduce using rule 246 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)


state 759

    (248) nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .

    ENDMODULE       reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    GENERATE        reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    INTEGER         reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    REAL            reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    PARAMETER       reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    LOCALPARAM      reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    GENVAR          reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ASSIGN          reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ALWAYS          reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ALWAYS_FF       reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ALWAYS_COMB     reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ALWAYS_LATCH    reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    INITIAL         reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ID              reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    SENS_OR         reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    FUNCTION        reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    TASK            reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    LPAREN          reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    INPUT           reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    OUTPUT          reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    INOUT           reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    TRI             reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    REG             reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    LOGIC           reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    WIRE            reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    SIGNED          reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    SUPPLY0         reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    SUPPLY1         reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ENDGENERATE     reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    IF              reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    FOR             reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ELSE            reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    END             reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    CASE            reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    CASEX           reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    CASEZ           reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    UNIQUE          reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    WHILE           reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    WAIT            reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    FOREVER         reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    BEGIN           reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    FORK            reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    DELAY           reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    AT              reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    DOLLER          reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    DISABLE         reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    LBRACE          reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    SEMICOLON       reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    JOIN            reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ENDFUNCTION     reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ENDTASK         reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ENDCASE         reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    DEFAULT         reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    MINUS           reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    PLUS            reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    LNOT            reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    NOT             reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    AND             reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    NAND            reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    NOR             reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    OR              reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    XOR             reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    XNOR            reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    INTNUMBER_DEC   reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    SIGNED_INTNUMBER_DEC reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    INTNUMBER_BIN   reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    SIGNED_INTNUMBER_BIN reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    INTNUMBER_OCT   reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    SIGNED_INTNUMBER_OCT reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    INTNUMBER_HEX   reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    SIGNED_INTNUMBER_HEX reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    FLOATNUMBER     reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    STRING_LITERAL  reduce using rule 248 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)


state 760

    (289) case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .

    ENDMODULE       reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    GENERATE        reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTEGER         reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    REAL            reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    PARAMETER       reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LOCALPARAM      reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    GENVAR          reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ASSIGN          reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ALWAYS          reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ALWAYS_FF       reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ALWAYS_COMB     reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ALWAYS_LATCH    reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INITIAL         reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ID              reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SENS_OR         reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FUNCTION        reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    TASK            reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LPAREN          reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INPUT           reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    OUTPUT          reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INOUT           reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    TRI             reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    REG             reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LOGIC           reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    WIRE            reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED          reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SUPPLY0         reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SUPPLY1         reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDGENERATE     reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    IF              reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FOR             reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ELSE            reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    END             reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    CASE            reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    CASEX           reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    CASEZ           reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    UNIQUE          reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    WHILE           reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    WAIT            reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FOREVER         reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    BEGIN           reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FORK            reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DELAY           reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    AT              reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DOLLER          reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DISABLE         reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LBRACE          reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SEMICOLON       reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    JOIN            reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDFUNCTION     reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDTASK         reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDCASE         reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DEFAULT         reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    MINUS           reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    PLUS            reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LNOT            reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    NOT             reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    AND             reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    NAND            reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    NOR             reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    OR              reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    XOR             reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    XNOR            reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_DEC   reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_DEC reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_BIN   reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_BIN reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_OCT   reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_OCT reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_HEX   reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_HEX reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FLOATNUMBER     reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    STRING_LITERAL  reduce using rule 289 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)


state 761

    (294) casecontent_statements -> casecontent_statements casecontent_statement .

    ENDCASE         reduce using rule 294 (casecontent_statements -> casecontent_statements casecontent_statement .)
    DEFAULT         reduce using rule 294 (casecontent_statements -> casecontent_statements casecontent_statement .)
    MINUS           reduce using rule 294 (casecontent_statements -> casecontent_statements casecontent_statement .)
    PLUS            reduce using rule 294 (casecontent_statements -> casecontent_statements casecontent_statement .)
    LNOT            reduce using rule 294 (casecontent_statements -> casecontent_statements casecontent_statement .)
    NOT             reduce using rule 294 (casecontent_statements -> casecontent_statements casecontent_statement .)
    AND             reduce using rule 294 (casecontent_statements -> casecontent_statements casecontent_statement .)
    NAND            reduce using rule 294 (casecontent_statements -> casecontent_statements casecontent_statement .)
    NOR             reduce using rule 294 (casecontent_statements -> casecontent_statements casecontent_statement .)
    OR              reduce using rule 294 (casecontent_statements -> casecontent_statements casecontent_statement .)
    XOR             reduce using rule 294 (casecontent_statements -> casecontent_statements casecontent_statement .)
    XNOR            reduce using rule 294 (casecontent_statements -> casecontent_statements casecontent_statement .)
    LPAREN          reduce using rule 294 (casecontent_statements -> casecontent_statements casecontent_statement .)
    LBRACE          reduce using rule 294 (casecontent_statements -> casecontent_statements casecontent_statement .)
    DOLLER          reduce using rule 294 (casecontent_statements -> casecontent_statements casecontent_statement .)
    ID              reduce using rule 294 (casecontent_statements -> casecontent_statements casecontent_statement .)
    INTNUMBER_DEC   reduce using rule 294 (casecontent_statements -> casecontent_statements casecontent_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 294 (casecontent_statements -> casecontent_statements casecontent_statement .)
    INTNUMBER_BIN   reduce using rule 294 (casecontent_statements -> casecontent_statements casecontent_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 294 (casecontent_statements -> casecontent_statements casecontent_statement .)
    INTNUMBER_OCT   reduce using rule 294 (casecontent_statements -> casecontent_statements casecontent_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 294 (casecontent_statements -> casecontent_statements casecontent_statement .)
    INTNUMBER_HEX   reduce using rule 294 (casecontent_statements -> casecontent_statements casecontent_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 294 (casecontent_statements -> casecontent_statements casecontent_statement .)
    FLOATNUMBER     reduce using rule 294 (casecontent_statements -> casecontent_statements casecontent_statement .)
    STRING_LITERAL  reduce using rule 294 (casecontent_statements -> casecontent_statements casecontent_statement .)


state 762

    (296) casecontent_statement -> casecontent_condition COLON . basic_statement
    (229) basic_statement -> . if_statement
    (230) basic_statement -> . case_statement
    (231) basic_statement -> . casex_statement
    (232) basic_statement -> . casez_statement
    (233) basic_statement -> . unique_case_statement
    (234) basic_statement -> . for_statement
    (235) basic_statement -> . while_statement
    (236) basic_statement -> . event_statement
    (237) basic_statement -> . wait_statement
    (238) basic_statement -> . forever_statement
    (239) basic_statement -> . block
    (240) basic_statement -> . namedblock
    (241) basic_statement -> . parallelblock
    (242) basic_statement -> . blocking_substitution
    (243) basic_statement -> . nonblocking_substitution
    (244) basic_statement -> . single_statement
    (271) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (272) if_statement -> . IF LPAREN cond RPAREN true_statement
    (273) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (274) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (289) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (290) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (291) casez_statement -> . CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (292) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (279) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (287) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (302) event_statement -> . senslist SEMICOLON
    (303) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (306) forever_statement -> . FOREVER basic_statement
    (254) block -> . BEGIN block_statements END
    (255) block -> . BEGIN END
    (259) namedblock -> . BEGIN COLON ID namedblock_statements END
    (260) namedblock -> . BEGIN COLON ID END
    (269) parallelblock -> . FORK block_statements JOIN
    (270) parallelblock -> . FORK JOIN
    (246) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (248) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (410) single_statement -> . DELAY expression SEMICOLON
    (411) single_statement -> . systemcall SEMICOLON
    (412) single_statement -> . disable SEMICOLON
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (209) senslist -> . AT LPAREN edgesigs RPAREN
    (217) senslist -> . empty
    (218) senslist -> . AT levelsig
    (219) senslist -> . AT LPAREN levelsigs RPAREN
    (227) senslist -> . AT TIMES
    (228) senslist -> . AT LPAREN TIMES RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (409) disable -> . DISABLE ID
    (413) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 196
    CASE            shift and go to state 198
    CASEX           shift and go to state 199
    CASEZ           shift and go to state 200
    UNIQUE          shift and go to state 201
    FOR             shift and go to state 202
    WHILE           shift and go to state 203
    WAIT            shift and go to state 205
    FOREVER         shift and go to state 206
    BEGIN           shift and go to state 207
    FORK            shift and go to state 208
    DELAY           shift and go to state 209
    AT              shift and go to state 173
    DOLLER          shift and go to state 109
    DISABLE         shift and go to state 213
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    SEMICOLON       reduce using rule 413 (empty -> .)

  ! IF              [ reduce using rule 413 (empty -> .) ]

    basic_statement                shift and go to state 785
    if_statement                   shift and go to state 180
    case_statement                 shift and go to state 181
    casex_statement                shift and go to state 182
    casez_statement                shift and go to state 183
    unique_case_statement          shift and go to state 184
    for_statement                  shift and go to state 185
    while_statement                shift and go to state 186
    event_statement                shift and go to state 187
    wait_statement                 shift and go to state 188
    forever_statement              shift and go to state 189
    block                          shift and go to state 190
    namedblock                     shift and go to state 191
    parallelblock                  shift and go to state 192
    blocking_substitution          shift and go to state 193
    nonblocking_substitution       shift and go to state 194
    single_statement               shift and go to state 195
    delays                         shift and go to state 197
    senslist                       shift and go to state 204
    systemcall                     shift and go to state 210
    disable                        shift and go to state 211
    empty                          shift and go to state 212

state 763

    (297) casecontent_condition -> casecontent_condition COMMA . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    expression                     shift and go to state 786
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 764

    (299) casecontent_statement -> DEFAULT COLON . basic_statement
    (229) basic_statement -> . if_statement
    (230) basic_statement -> . case_statement
    (231) basic_statement -> . casex_statement
    (232) basic_statement -> . casez_statement
    (233) basic_statement -> . unique_case_statement
    (234) basic_statement -> . for_statement
    (235) basic_statement -> . while_statement
    (236) basic_statement -> . event_statement
    (237) basic_statement -> . wait_statement
    (238) basic_statement -> . forever_statement
    (239) basic_statement -> . block
    (240) basic_statement -> . namedblock
    (241) basic_statement -> . parallelblock
    (242) basic_statement -> . blocking_substitution
    (243) basic_statement -> . nonblocking_substitution
    (244) basic_statement -> . single_statement
    (271) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (272) if_statement -> . IF LPAREN cond RPAREN true_statement
    (273) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (274) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (289) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (290) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (291) casez_statement -> . CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (292) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (279) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (287) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (302) event_statement -> . senslist SEMICOLON
    (303) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (306) forever_statement -> . FOREVER basic_statement
    (254) block -> . BEGIN block_statements END
    (255) block -> . BEGIN END
    (259) namedblock -> . BEGIN COLON ID namedblock_statements END
    (260) namedblock -> . BEGIN COLON ID END
    (269) parallelblock -> . FORK block_statements JOIN
    (270) parallelblock -> . FORK JOIN
    (246) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (248) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (410) single_statement -> . DELAY expression SEMICOLON
    (411) single_statement -> . systemcall SEMICOLON
    (412) single_statement -> . disable SEMICOLON
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (209) senslist -> . AT LPAREN edgesigs RPAREN
    (217) senslist -> . empty
    (218) senslist -> . AT levelsig
    (219) senslist -> . AT LPAREN levelsigs RPAREN
    (227) senslist -> . AT TIMES
    (228) senslist -> . AT LPAREN TIMES RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (409) disable -> . DISABLE ID
    (413) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 196
    CASE            shift and go to state 198
    CASEX           shift and go to state 199
    CASEZ           shift and go to state 200
    UNIQUE          shift and go to state 201
    FOR             shift and go to state 202
    WHILE           shift and go to state 203
    WAIT            shift and go to state 205
    FOREVER         shift and go to state 206
    BEGIN           shift and go to state 207
    FORK            shift and go to state 208
    DELAY           shift and go to state 209
    AT              shift and go to state 173
    DOLLER          shift and go to state 109
    DISABLE         shift and go to state 213
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    SEMICOLON       reduce using rule 413 (empty -> .)

  ! IF              [ reduce using rule 413 (empty -> .) ]

    basic_statement                shift and go to state 787
    if_statement                   shift and go to state 180
    case_statement                 shift and go to state 181
    casex_statement                shift and go to state 182
    casez_statement                shift and go to state 183
    unique_case_statement          shift and go to state 184
    for_statement                  shift and go to state 185
    while_statement                shift and go to state 186
    event_statement                shift and go to state 187
    wait_statement                 shift and go to state 188
    forever_statement              shift and go to state 189
    block                          shift and go to state 190
    namedblock                     shift and go to state 191
    parallelblock                  shift and go to state 192
    blocking_substitution          shift and go to state 193
    nonblocking_substitution       shift and go to state 194
    single_statement               shift and go to state 195
    delays                         shift and go to state 197
    senslist                       shift and go to state 204
    systemcall                     shift and go to state 210
    disable                        shift and go to state 211
    empty                          shift and go to state 212

state 765

    (290) casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .

    ENDMODULE       reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    GENERATE        reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTEGER         reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    REAL            reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    PARAMETER       reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LOCALPARAM      reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    GENVAR          reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ASSIGN          reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ALWAYS          reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ALWAYS_FF       reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ALWAYS_COMB     reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ALWAYS_LATCH    reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INITIAL         reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ID              reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SENS_OR         reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FUNCTION        reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    TASK            reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LPAREN          reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INPUT           reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    OUTPUT          reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INOUT           reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    TRI             reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    REG             reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LOGIC           reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    WIRE            reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED          reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SUPPLY0         reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SUPPLY1         reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDGENERATE     reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    IF              reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FOR             reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ELSE            reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    END             reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    CASE            reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    CASEX           reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    CASEZ           reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    UNIQUE          reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    WHILE           reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    WAIT            reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FOREVER         reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    BEGIN           reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FORK            reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DELAY           reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    AT              reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DOLLER          reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DISABLE         reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LBRACE          reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SEMICOLON       reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    JOIN            reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDFUNCTION     reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDTASK         reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDCASE         reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DEFAULT         reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    MINUS           reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    PLUS            reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LNOT            reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    NOT             reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    AND             reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    NAND            reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    NOR             reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    OR              reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    XOR             reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    XNOR            reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_DEC   reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_DEC reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_BIN   reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_BIN reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_OCT   reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_OCT reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_HEX   reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_HEX reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FLOATNUMBER     reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    STRING_LITERAL  reduce using rule 290 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)


state 766

    (291) casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .

    ENDMODULE       reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    GENERATE        reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTEGER         reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    REAL            reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    PARAMETER       reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LOCALPARAM      reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    GENVAR          reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ASSIGN          reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ALWAYS          reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ALWAYS_FF       reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ALWAYS_COMB     reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ALWAYS_LATCH    reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INITIAL         reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ID              reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SENS_OR         reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FUNCTION        reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    TASK            reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LPAREN          reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INPUT           reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    OUTPUT          reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INOUT           reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    TRI             reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    REG             reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LOGIC           reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    WIRE            reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED          reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SUPPLY0         reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SUPPLY1         reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDGENERATE     reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    IF              reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FOR             reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ELSE            reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    END             reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    CASE            reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    CASEX           reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    CASEZ           reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    UNIQUE          reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    WHILE           reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    WAIT            reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FOREVER         reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    BEGIN           reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FORK            reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DELAY           reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    AT              reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DOLLER          reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DISABLE         reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LBRACE          reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SEMICOLON       reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    JOIN            reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDFUNCTION     reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDTASK         reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDCASE         reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DEFAULT         reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    MINUS           reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    PLUS            reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LNOT            reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    NOT             reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    AND             reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    NAND            reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    NOR             reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    OR              reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    XOR             reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    XNOR            reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_DEC   reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_DEC reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_BIN   reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_BIN reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_OCT   reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_OCT reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_HEX   reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_HEX reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FLOATNUMBER     reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    STRING_LITERAL  reduce using rule 291 (casez_statement -> CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE .)


state 767

    (292) unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements . ENDCASE
    (294) casecontent_statements -> casecontent_statements . casecontent_statement
    (296) casecontent_statement -> . casecontent_condition COLON basic_statement
    (299) casecontent_statement -> . DEFAULT COLON basic_statement
    (297) casecontent_condition -> . casecontent_condition COMMA expression
    (298) casecontent_condition -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    ENDCASE         shift and go to state 788
    DEFAULT         shift and go to state 711
    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    casecontent_statement          shift and go to state 761
    casecontent_condition          shift and go to state 710
    expression                     shift and go to state 712
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 768

    (279) for_statement -> FOR LPAREN forpre forcond forpost RPAREN . forcontent_statement
    (286) forcontent_statement -> . basic_statement
    (229) basic_statement -> . if_statement
    (230) basic_statement -> . case_statement
    (231) basic_statement -> . casex_statement
    (232) basic_statement -> . casez_statement
    (233) basic_statement -> . unique_case_statement
    (234) basic_statement -> . for_statement
    (235) basic_statement -> . while_statement
    (236) basic_statement -> . event_statement
    (237) basic_statement -> . wait_statement
    (238) basic_statement -> . forever_statement
    (239) basic_statement -> . block
    (240) basic_statement -> . namedblock
    (241) basic_statement -> . parallelblock
    (242) basic_statement -> . blocking_substitution
    (243) basic_statement -> . nonblocking_substitution
    (244) basic_statement -> . single_statement
    (271) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (272) if_statement -> . IF LPAREN cond RPAREN true_statement
    (273) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (274) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (289) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (290) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (291) casez_statement -> . CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (292) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (279) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (287) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (302) event_statement -> . senslist SEMICOLON
    (303) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (306) forever_statement -> . FOREVER basic_statement
    (254) block -> . BEGIN block_statements END
    (255) block -> . BEGIN END
    (259) namedblock -> . BEGIN COLON ID namedblock_statements END
    (260) namedblock -> . BEGIN COLON ID END
    (269) parallelblock -> . FORK block_statements JOIN
    (270) parallelblock -> . FORK JOIN
    (246) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (248) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (410) single_statement -> . DELAY expression SEMICOLON
    (411) single_statement -> . systemcall SEMICOLON
    (412) single_statement -> . disable SEMICOLON
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (209) senslist -> . AT LPAREN edgesigs RPAREN
    (217) senslist -> . empty
    (218) senslist -> . AT levelsig
    (219) senslist -> . AT LPAREN levelsigs RPAREN
    (227) senslist -> . AT TIMES
    (228) senslist -> . AT LPAREN TIMES RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (409) disable -> . DISABLE ID
    (413) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 196
    CASE            shift and go to state 198
    CASEX           shift and go to state 199
    CASEZ           shift and go to state 200
    UNIQUE          shift and go to state 201
    FOR             shift and go to state 202
    WHILE           shift and go to state 203
    WAIT            shift and go to state 205
    FOREVER         shift and go to state 206
    BEGIN           shift and go to state 207
    FORK            shift and go to state 208
    DELAY           shift and go to state 209
    AT              shift and go to state 173
    DOLLER          shift and go to state 109
    DISABLE         shift and go to state 213
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    SEMICOLON       reduce using rule 413 (empty -> .)

  ! IF              [ reduce using rule 413 (empty -> .) ]

    forcontent_statement           shift and go to state 789
    basic_statement                shift and go to state 790
    if_statement                   shift and go to state 180
    case_statement                 shift and go to state 181
    casex_statement                shift and go to state 182
    casez_statement                shift and go to state 183
    unique_case_statement          shift and go to state 184
    for_statement                  shift and go to state 185
    while_statement                shift and go to state 186
    event_statement                shift and go to state 187
    wait_statement                 shift and go to state 188
    forever_statement              shift and go to state 189
    block                          shift and go to state 190
    namedblock                     shift and go to state 191
    parallelblock                  shift and go to state 192
    blocking_substitution          shift and go to state 193
    nonblocking_substitution       shift and go to state 194
    single_statement               shift and go to state 195
    delays                         shift and go to state 197
    senslist                       shift and go to state 204
    systemcall                     shift and go to state 210
    disable                        shift and go to state 211
    empty                          shift and go to state 212

state 769

    (312) instance_body -> ID width LPAREN instance_ports RPAREN .

    SEMICOLON       reduce using rule 312 (instance_body -> ID width LPAREN instance_ports RPAREN .)
    COMMA           reduce using rule 312 (instance_body -> ID width LPAREN instance_ports RPAREN .)


state 770

    (327) param_arg -> DOT ID LPAREN expression . RPAREN
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    RPAREN          shift and go to state 791
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 771

    (336) instance_port_arg -> DOT ID LPAREN identifier RPAREN .

    COMMA           reduce using rule 336 (instance_port_arg -> DOT ID LPAREN identifier RPAREN .)
    RPAREN          reduce using rule 336 (instance_port_arg -> DOT ID LPAREN identifier RPAREN .)


state 772

    (337) instance_port_arg -> DOT ID LPAREN expression RPAREN .

    COMMA           reduce using rule 337 (instance_port_arg -> DOT ID LPAREN expression RPAREN .)
    RPAREN          reduce using rule 337 (instance_port_arg -> DOT ID LPAREN expression RPAREN .)


state 773

    (352) generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .

    ENDGENERATE     reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    IF              reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    FOR             reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    INTEGER         reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    REAL            reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    PARAMETER       reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    LOCALPARAM      reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    GENVAR          reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    ASSIGN          reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    ALWAYS          reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    ALWAYS_FF       reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    ALWAYS_COMB     reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    ALWAYS_LATCH    reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    INITIAL         reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    ID              reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    SENS_OR         reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    FUNCTION        reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    TASK            reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    LPAREN          reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    INPUT           reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    OUTPUT          reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    INOUT           reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    TRI             reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    REG             reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    LOGIC           reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    WIRE            reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    SIGNED          reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    SUPPLY0         reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    SUPPLY1         reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    ELSE            reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    END             reduce using rule 352 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)


state 774

    (356) gif_false_item -> generate_item .

    ELSE            reduce using rule 356 (gif_false_item -> generate_item .)
    ENDGENERATE     reduce using rule 356 (gif_false_item -> generate_item .)
    IF              reduce using rule 356 (gif_false_item -> generate_item .)
    FOR             reduce using rule 356 (gif_false_item -> generate_item .)
    INTEGER         reduce using rule 356 (gif_false_item -> generate_item .)
    REAL            reduce using rule 356 (gif_false_item -> generate_item .)
    PARAMETER       reduce using rule 356 (gif_false_item -> generate_item .)
    LOCALPARAM      reduce using rule 356 (gif_false_item -> generate_item .)
    GENVAR          reduce using rule 356 (gif_false_item -> generate_item .)
    ASSIGN          reduce using rule 356 (gif_false_item -> generate_item .)
    ALWAYS          reduce using rule 356 (gif_false_item -> generate_item .)
    ALWAYS_FF       reduce using rule 356 (gif_false_item -> generate_item .)
    ALWAYS_COMB     reduce using rule 356 (gif_false_item -> generate_item .)
    ALWAYS_LATCH    reduce using rule 356 (gif_false_item -> generate_item .)
    INITIAL         reduce using rule 356 (gif_false_item -> generate_item .)
    ID              reduce using rule 356 (gif_false_item -> generate_item .)
    SENS_OR         reduce using rule 356 (gif_false_item -> generate_item .)
    FUNCTION        reduce using rule 356 (gif_false_item -> generate_item .)
    TASK            reduce using rule 356 (gif_false_item -> generate_item .)
    LPAREN          reduce using rule 356 (gif_false_item -> generate_item .)
    INPUT           reduce using rule 356 (gif_false_item -> generate_item .)
    OUTPUT          reduce using rule 356 (gif_false_item -> generate_item .)
    INOUT           reduce using rule 356 (gif_false_item -> generate_item .)
    TRI             reduce using rule 356 (gif_false_item -> generate_item .)
    REG             reduce using rule 356 (gif_false_item -> generate_item .)
    LOGIC           reduce using rule 356 (gif_false_item -> generate_item .)
    WIRE            reduce using rule 356 (gif_false_item -> generate_item .)
    SIGNED          reduce using rule 356 (gif_false_item -> generate_item .)
    SUPPLY0         reduce using rule 356 (gif_false_item -> generate_item .)
    SUPPLY1         reduce using rule 356 (gif_false_item -> generate_item .)
    END             reduce using rule 356 (gif_false_item -> generate_item .)


state 775

    (357) gif_false_item -> generate_block .

    ELSE            reduce using rule 357 (gif_false_item -> generate_block .)
    ENDGENERATE     reduce using rule 357 (gif_false_item -> generate_block .)
    IF              reduce using rule 357 (gif_false_item -> generate_block .)
    FOR             reduce using rule 357 (gif_false_item -> generate_block .)
    INTEGER         reduce using rule 357 (gif_false_item -> generate_block .)
    REAL            reduce using rule 357 (gif_false_item -> generate_block .)
    PARAMETER       reduce using rule 357 (gif_false_item -> generate_block .)
    LOCALPARAM      reduce using rule 357 (gif_false_item -> generate_block .)
    GENVAR          reduce using rule 357 (gif_false_item -> generate_block .)
    ASSIGN          reduce using rule 357 (gif_false_item -> generate_block .)
    ALWAYS          reduce using rule 357 (gif_false_item -> generate_block .)
    ALWAYS_FF       reduce using rule 357 (gif_false_item -> generate_block .)
    ALWAYS_COMB     reduce using rule 357 (gif_false_item -> generate_block .)
    ALWAYS_LATCH    reduce using rule 357 (gif_false_item -> generate_block .)
    INITIAL         reduce using rule 357 (gif_false_item -> generate_block .)
    ID              reduce using rule 357 (gif_false_item -> generate_block .)
    SENS_OR         reduce using rule 357 (gif_false_item -> generate_block .)
    FUNCTION        reduce using rule 357 (gif_false_item -> generate_block .)
    TASK            reduce using rule 357 (gif_false_item -> generate_block .)
    LPAREN          reduce using rule 357 (gif_false_item -> generate_block .)
    INPUT           reduce using rule 357 (gif_false_item -> generate_block .)
    OUTPUT          reduce using rule 357 (gif_false_item -> generate_block .)
    INOUT           reduce using rule 357 (gif_false_item -> generate_block .)
    TRI             reduce using rule 357 (gif_false_item -> generate_block .)
    REG             reduce using rule 357 (gif_false_item -> generate_block .)
    LOGIC           reduce using rule 357 (gif_false_item -> generate_block .)
    WIRE            reduce using rule 357 (gif_false_item -> generate_block .)
    SIGNED          reduce using rule 357 (gif_false_item -> generate_block .)
    SUPPLY0         reduce using rule 357 (gif_false_item -> generate_block .)
    SUPPLY1         reduce using rule 357 (gif_false_item -> generate_block .)
    END             reduce using rule 357 (gif_false_item -> generate_block .)


state 776

    (350) generate_block -> BEGIN generate_items END .

    ELSE            reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    ENDGENERATE     reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    IF              reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    FOR             reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    INTEGER         reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    REAL            reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    PARAMETER       reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    LOCALPARAM      reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    GENVAR          reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    ASSIGN          reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    ALWAYS          reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    ALWAYS_FF       reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    ALWAYS_COMB     reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    ALWAYS_LATCH    reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    INITIAL         reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    ID              reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    SENS_OR         reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    FUNCTION        reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    TASK            reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    LPAREN          reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    INPUT           reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    OUTPUT          reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    INOUT           reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    TRI             reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    REG             reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    LOGIC           reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    WIRE            reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    SIGNED          reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    SUPPLY0         reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    SUPPLY1         reduce using rule 350 (generate_block -> BEGIN generate_items END .)
    END             reduce using rule 350 (generate_block -> BEGIN generate_items END .)


state 777

    (351) generate_block -> BEGIN COLON ID . generate_items END
    (344) generate_items -> . empty
    (345) generate_items -> . generate_items generate_item
    (346) generate_items -> . generate_item
    (413) empty -> .
    (347) generate_item -> . standard_item
    (348) generate_item -> . generate_if
    (349) generate_item -> . generate_for
    (65) standard_item -> . decl
    (66) standard_item -> . integerdecl
    (67) standard_item -> . realdecl
    (68) standard_item -> . declassign
    (69) standard_item -> . parameterdecl
    (70) standard_item -> . localparamdecl
    (71) standard_item -> . genvardecl
    (72) standard_item -> . assignment
    (73) standard_item -> . always
    (74) standard_item -> . always_ff
    (75) standard_item -> . always_comb
    (76) standard_item -> . always_latch
    (77) standard_item -> . initial
    (78) standard_item -> . instance
    (79) standard_item -> . function
    (80) standard_item -> . task
    (81) standard_item -> . pragma
    (352) generate_if -> . IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (353) generate_if -> . IF LPAREN cond RPAREN gif_true_item
    (358) generate_for -> . FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
    (82) decl -> . sigtypes declnamelist SEMICOLON
    (83) decl -> . sigtypes width declnamelist SEMICOLON
    (92) integerdecl -> . INTEGER integernamelist SEMICOLON
    (93) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (98) realdecl -> . REAL realnamelist SEMICOLON
    (88) declassign -> . sigtypes declassign_element SEMICOLON
    (89) declassign -> . sigtypes width declassign_element SEMICOLON
    (102) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (103) parameterdecl -> . PARAMETER SIGNED param_substitution_list SEMICOLON
    (104) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (105) parameterdecl -> . PARAMETER SIGNED width param_substitution_list SEMICOLON
    (106) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (107) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (108) localparamdecl -> . LOCALPARAM SIGNED param_substitution_list SEMICOLON
    (109) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (110) localparamdecl -> . LOCALPARAM SIGNED width param_substitution_list SEMICOLON
    (111) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (339) genvardecl -> . GENVAR genvarlist SEMICOLON
    (115) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (116) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (205) always -> . ALWAYS senslist always_statement
    (206) always_ff -> . ALWAYS_FF senslist always_statement
    (207) always_comb -> . ALWAYS_COMB senslist always_statement
    (208) always_latch -> . ALWAYS_LATCH senslist always_statement
    (300) initial -> . INITIAL initial_statement
    (307) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (308) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (313) instance -> . ID instance_bodylist_noname SEMICOLON
    (314) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (368) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (369) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (370) function -> . FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION
    (389) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
  ! shift/reduce conflict for PARAMETER resolved as shift
  ! shift/reduce conflict for LOCALPARAM resolved as shift
  ! shift/reduce conflict for GENVAR resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for ALWAYS resolved as shift
  ! shift/reduce conflict for ALWAYS_FF resolved as shift
  ! shift/reduce conflict for ALWAYS_COMB resolved as shift
  ! shift/reduce conflict for ALWAYS_LATCH resolved as shift
  ! shift/reduce conflict for INITIAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for SENS_OR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for TASK resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for INOUT resolved as shift
  ! shift/reduce conflict for TRI resolved as shift
  ! shift/reduce conflict for REG resolved as shift
  ! shift/reduce conflict for LOGIC resolved as shift
  ! shift/reduce conflict for WIRE resolved as shift
  ! shift/reduce conflict for SIGNED resolved as shift
  ! shift/reduce conflict for SUPPLY0 resolved as shift
  ! shift/reduce conflict for SUPPLY1 resolved as shift
    END             reduce using rule 413 (empty -> .)
    IF              shift and go to state 132
    FOR             shift and go to state 133
    INTEGER         shift and go to state 48
    REAL            shift and go to state 50
    PARAMETER       shift and go to state 51
    LOCALPARAM      shift and go to state 52
    GENVAR          shift and go to state 53
    ASSIGN          shift and go to state 54
    ALWAYS          shift and go to state 55
    ALWAYS_FF       shift and go to state 56
    ALWAYS_COMB     shift and go to state 57
    ALWAYS_LATCH    shift and go to state 58
    INITIAL         shift and go to state 59
    ID              shift and go to state 60
    SENS_OR         shift and go to state 61
    FUNCTION        shift and go to state 62
    TASK            shift and go to state 63
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 65
    OUTPUT          shift and go to state 66
    INOUT           shift and go to state 67
    TRI             shift and go to state 68
    REG             shift and go to state 69
    LOGIC           shift and go to state 70
    WIRE            shift and go to state 71
    SIGNED          shift and go to state 49
    SUPPLY0         shift and go to state 72
    SUPPLY1         shift and go to state 73

  ! IF              [ reduce using rule 413 (empty -> .) ]
  ! FOR             [ reduce using rule 413 (empty -> .) ]
  ! INTEGER         [ reduce using rule 413 (empty -> .) ]
  ! REAL            [ reduce using rule 413 (empty -> .) ]
  ! PARAMETER       [ reduce using rule 413 (empty -> .) ]
  ! LOCALPARAM      [ reduce using rule 413 (empty -> .) ]
  ! GENVAR          [ reduce using rule 413 (empty -> .) ]
  ! ASSIGN          [ reduce using rule 413 (empty -> .) ]
  ! ALWAYS          [ reduce using rule 413 (empty -> .) ]
  ! ALWAYS_FF       [ reduce using rule 413 (empty -> .) ]
  ! ALWAYS_COMB     [ reduce using rule 413 (empty -> .) ]
  ! ALWAYS_LATCH    [ reduce using rule 413 (empty -> .) ]
  ! INITIAL         [ reduce using rule 413 (empty -> .) ]
  ! ID              [ reduce using rule 413 (empty -> .) ]
  ! SENS_OR         [ reduce using rule 413 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 413 (empty -> .) ]
  ! TASK            [ reduce using rule 413 (empty -> .) ]
  ! LPAREN          [ reduce using rule 413 (empty -> .) ]
  ! INPUT           [ reduce using rule 413 (empty -> .) ]
  ! OUTPUT          [ reduce using rule 413 (empty -> .) ]
  ! INOUT           [ reduce using rule 413 (empty -> .) ]
  ! TRI             [ reduce using rule 413 (empty -> .) ]
  ! REG             [ reduce using rule 413 (empty -> .) ]
  ! LOGIC           [ reduce using rule 413 (empty -> .) ]
  ! WIRE            [ reduce using rule 413 (empty -> .) ]
  ! SIGNED          [ reduce using rule 413 (empty -> .) ]
  ! SUPPLY0         [ reduce using rule 413 (empty -> .) ]
  ! SUPPLY1         [ reduce using rule 413 (empty -> .) ]

    generate_items                 shift and go to state 792
    empty                          shift and go to state 127
    generate_item                  shift and go to state 128
    standard_item                  shift and go to state 129
    generate_if                    shift and go to state 130
    generate_for                   shift and go to state 131
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    always_ff                      shift and go to state 38
    always_comb                    shift and go to state 39
    always_latch                   shift and go to state 40
    initial                        shift and go to state 41
    instance                       shift and go to state 42
    function                       shift and go to state 43
    task                           shift and go to state 44
    pragma                         shift and go to state 45
    sigtypes                       shift and go to state 47
    sigtype                        shift and go to state 64

state 778

    (358) generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .

    ENDGENERATE     reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    IF              reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    FOR             reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    INTEGER         reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    REAL            reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    PARAMETER       reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    LOCALPARAM      reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    GENVAR          reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    ASSIGN          reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    ALWAYS          reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    ALWAYS_FF       reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    ALWAYS_COMB     reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    ALWAYS_LATCH    reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    INITIAL         reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    ID              reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    SENS_OR         reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    FUNCTION        reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    TASK            reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    LPAREN          reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    INPUT           reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    OUTPUT          reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    INOUT           reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    TRI             reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    REG             reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    LOGIC           reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    WIRE            reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    SIGNED          reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    SUPPLY0         reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    SUPPLY1         reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    ELSE            reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    END             reduce using rule 358 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)


state 779

    (359) generate_forcontent -> generate_item .

    ELSE            reduce using rule 359 (generate_forcontent -> generate_item .)
    ENDGENERATE     reduce using rule 359 (generate_forcontent -> generate_item .)
    IF              reduce using rule 359 (generate_forcontent -> generate_item .)
    FOR             reduce using rule 359 (generate_forcontent -> generate_item .)
    INTEGER         reduce using rule 359 (generate_forcontent -> generate_item .)
    REAL            reduce using rule 359 (generate_forcontent -> generate_item .)
    PARAMETER       reduce using rule 359 (generate_forcontent -> generate_item .)
    LOCALPARAM      reduce using rule 359 (generate_forcontent -> generate_item .)
    GENVAR          reduce using rule 359 (generate_forcontent -> generate_item .)
    ASSIGN          reduce using rule 359 (generate_forcontent -> generate_item .)
    ALWAYS          reduce using rule 359 (generate_forcontent -> generate_item .)
    ALWAYS_FF       reduce using rule 359 (generate_forcontent -> generate_item .)
    ALWAYS_COMB     reduce using rule 359 (generate_forcontent -> generate_item .)
    ALWAYS_LATCH    reduce using rule 359 (generate_forcontent -> generate_item .)
    INITIAL         reduce using rule 359 (generate_forcontent -> generate_item .)
    ID              reduce using rule 359 (generate_forcontent -> generate_item .)
    SENS_OR         reduce using rule 359 (generate_forcontent -> generate_item .)
    FUNCTION        reduce using rule 359 (generate_forcontent -> generate_item .)
    TASK            reduce using rule 359 (generate_forcontent -> generate_item .)
    LPAREN          reduce using rule 359 (generate_forcontent -> generate_item .)
    INPUT           reduce using rule 359 (generate_forcontent -> generate_item .)
    OUTPUT          reduce using rule 359 (generate_forcontent -> generate_item .)
    INOUT           reduce using rule 359 (generate_forcontent -> generate_item .)
    TRI             reduce using rule 359 (generate_forcontent -> generate_item .)
    REG             reduce using rule 359 (generate_forcontent -> generate_item .)
    LOGIC           reduce using rule 359 (generate_forcontent -> generate_item .)
    WIRE            reduce using rule 359 (generate_forcontent -> generate_item .)
    SIGNED          reduce using rule 359 (generate_forcontent -> generate_item .)
    SUPPLY0         reduce using rule 359 (generate_forcontent -> generate_item .)
    SUPPLY1         reduce using rule 359 (generate_forcontent -> generate_item .)
    END             reduce using rule 359 (generate_forcontent -> generate_item .)


state 780

    (360) generate_forcontent -> generate_block .

    ELSE            reduce using rule 360 (generate_forcontent -> generate_block .)
    ENDGENERATE     reduce using rule 360 (generate_forcontent -> generate_block .)
    IF              reduce using rule 360 (generate_forcontent -> generate_block .)
    FOR             reduce using rule 360 (generate_forcontent -> generate_block .)
    INTEGER         reduce using rule 360 (generate_forcontent -> generate_block .)
    REAL            reduce using rule 360 (generate_forcontent -> generate_block .)
    PARAMETER       reduce using rule 360 (generate_forcontent -> generate_block .)
    LOCALPARAM      reduce using rule 360 (generate_forcontent -> generate_block .)
    GENVAR          reduce using rule 360 (generate_forcontent -> generate_block .)
    ASSIGN          reduce using rule 360 (generate_forcontent -> generate_block .)
    ALWAYS          reduce using rule 360 (generate_forcontent -> generate_block .)
    ALWAYS_FF       reduce using rule 360 (generate_forcontent -> generate_block .)
    ALWAYS_COMB     reduce using rule 360 (generate_forcontent -> generate_block .)
    ALWAYS_LATCH    reduce using rule 360 (generate_forcontent -> generate_block .)
    INITIAL         reduce using rule 360 (generate_forcontent -> generate_block .)
    ID              reduce using rule 360 (generate_forcontent -> generate_block .)
    SENS_OR         reduce using rule 360 (generate_forcontent -> generate_block .)
    FUNCTION        reduce using rule 360 (generate_forcontent -> generate_block .)
    TASK            reduce using rule 360 (generate_forcontent -> generate_block .)
    LPAREN          reduce using rule 360 (generate_forcontent -> generate_block .)
    INPUT           reduce using rule 360 (generate_forcontent -> generate_block .)
    OUTPUT          reduce using rule 360 (generate_forcontent -> generate_block .)
    INOUT           reduce using rule 360 (generate_forcontent -> generate_block .)
    TRI             reduce using rule 360 (generate_forcontent -> generate_block .)
    REG             reduce using rule 360 (generate_forcontent -> generate_block .)
    LOGIC           reduce using rule 360 (generate_forcontent -> generate_block .)
    WIRE            reduce using rule 360 (generate_forcontent -> generate_block .)
    SIGNED          reduce using rule 360 (generate_forcontent -> generate_block .)
    SUPPLY0         reduce using rule 360 (generate_forcontent -> generate_block .)
    SUPPLY1         reduce using rule 360 (generate_forcontent -> generate_block .)
    END             reduce using rule 360 (generate_forcontent -> generate_block .)


state 781

    (247) blocking_substitution_base -> delays lvalue EQUALS . delays rvalue
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (413) empty -> .

    DELAY           shift and go to state 142
    MINUS           reduce using rule 413 (empty -> .)
    PLUS            reduce using rule 413 (empty -> .)
    LNOT            reduce using rule 413 (empty -> .)
    NOT             reduce using rule 413 (empty -> .)
    AND             reduce using rule 413 (empty -> .)
    NAND            reduce using rule 413 (empty -> .)
    NOR             reduce using rule 413 (empty -> .)
    OR              reduce using rule 413 (empty -> .)
    XOR             reduce using rule 413 (empty -> .)
    XNOR            reduce using rule 413 (empty -> .)
    LPAREN          reduce using rule 413 (empty -> .)
    LBRACE          reduce using rule 413 (empty -> .)
    DOLLER          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    INTNUMBER_DEC   reduce using rule 413 (empty -> .)
    SIGNED_INTNUMBER_DEC reduce using rule 413 (empty -> .)
    INTNUMBER_BIN   reduce using rule 413 (empty -> .)
    SIGNED_INTNUMBER_BIN reduce using rule 413 (empty -> .)
    INTNUMBER_OCT   reduce using rule 413 (empty -> .)
    SIGNED_INTNUMBER_OCT reduce using rule 413 (empty -> .)
    INTNUMBER_HEX   reduce using rule 413 (empty -> .)
    SIGNED_INTNUMBER_HEX reduce using rule 413 (empty -> .)
    FLOATNUMBER     reduce using rule 413 (empty -> .)
    STRING_LITERAL  reduce using rule 413 (empty -> .)

    delays                         shift and go to state 793
    empty                          shift and go to state 143

state 782

    (271) if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .

    ENDMODULE       reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    GENERATE        reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTEGER         reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    REAL            reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    PARAMETER       reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    LOCALPARAM      reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    GENVAR          reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ASSIGN          reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ALWAYS          reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ALWAYS_FF       reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ALWAYS_COMB     reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ALWAYS_LATCH    reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INITIAL         reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ID              reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SENS_OR         reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FUNCTION        reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    TASK            reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    LPAREN          reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INPUT           reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    OUTPUT          reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INOUT           reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    TRI             reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    REG             reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    LOGIC           reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    WIRE            reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED          reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SUPPLY0         reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SUPPLY1         reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ENDGENERATE     reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    IF              reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FOR             reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ELSE            reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    END             reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    CASE            reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    CASEX           reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    CASEZ           reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    UNIQUE          reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    WHILE           reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    WAIT            reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FOREVER         reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    BEGIN           reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FORK            reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    DELAY           reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    AT              reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    DOLLER          reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    DISABLE         reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    LBRACE          reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SEMICOLON       reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    JOIN            reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ENDFUNCTION     reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ENDTASK         reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ENDCASE         reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    DEFAULT         reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    MINUS           reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    PLUS            reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    LNOT            reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    NOT             reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    AND             reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    NAND            reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    NOR             reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    OR              reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    XOR             reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    XNOR            reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTNUMBER_DEC   reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTNUMBER_BIN   reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTNUMBER_OCT   reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTNUMBER_HEX   reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FLOATNUMBER     reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    STRING_LITERAL  reduce using rule 271 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)


state 783

    (278) else_statement -> ifcontent_statement .

    ENDMODULE       reduce using rule 278 (else_statement -> ifcontent_statement .)
    GENERATE        reduce using rule 278 (else_statement -> ifcontent_statement .)
    INTEGER         reduce using rule 278 (else_statement -> ifcontent_statement .)
    REAL            reduce using rule 278 (else_statement -> ifcontent_statement .)
    PARAMETER       reduce using rule 278 (else_statement -> ifcontent_statement .)
    LOCALPARAM      reduce using rule 278 (else_statement -> ifcontent_statement .)
    GENVAR          reduce using rule 278 (else_statement -> ifcontent_statement .)
    ASSIGN          reduce using rule 278 (else_statement -> ifcontent_statement .)
    ALWAYS          reduce using rule 278 (else_statement -> ifcontent_statement .)
    ALWAYS_FF       reduce using rule 278 (else_statement -> ifcontent_statement .)
    ALWAYS_COMB     reduce using rule 278 (else_statement -> ifcontent_statement .)
    ALWAYS_LATCH    reduce using rule 278 (else_statement -> ifcontent_statement .)
    INITIAL         reduce using rule 278 (else_statement -> ifcontent_statement .)
    ID              reduce using rule 278 (else_statement -> ifcontent_statement .)
    SENS_OR         reduce using rule 278 (else_statement -> ifcontent_statement .)
    FUNCTION        reduce using rule 278 (else_statement -> ifcontent_statement .)
    TASK            reduce using rule 278 (else_statement -> ifcontent_statement .)
    LPAREN          reduce using rule 278 (else_statement -> ifcontent_statement .)
    INPUT           reduce using rule 278 (else_statement -> ifcontent_statement .)
    OUTPUT          reduce using rule 278 (else_statement -> ifcontent_statement .)
    INOUT           reduce using rule 278 (else_statement -> ifcontent_statement .)
    TRI             reduce using rule 278 (else_statement -> ifcontent_statement .)
    REG             reduce using rule 278 (else_statement -> ifcontent_statement .)
    LOGIC           reduce using rule 278 (else_statement -> ifcontent_statement .)
    WIRE            reduce using rule 278 (else_statement -> ifcontent_statement .)
    SIGNED          reduce using rule 278 (else_statement -> ifcontent_statement .)
    SUPPLY0         reduce using rule 278 (else_statement -> ifcontent_statement .)
    SUPPLY1         reduce using rule 278 (else_statement -> ifcontent_statement .)
    ENDGENERATE     reduce using rule 278 (else_statement -> ifcontent_statement .)
    IF              reduce using rule 278 (else_statement -> ifcontent_statement .)
    FOR             reduce using rule 278 (else_statement -> ifcontent_statement .)
    ELSE            reduce using rule 278 (else_statement -> ifcontent_statement .)
    END             reduce using rule 278 (else_statement -> ifcontent_statement .)
    CASE            reduce using rule 278 (else_statement -> ifcontent_statement .)
    CASEX           reduce using rule 278 (else_statement -> ifcontent_statement .)
    CASEZ           reduce using rule 278 (else_statement -> ifcontent_statement .)
    UNIQUE          reduce using rule 278 (else_statement -> ifcontent_statement .)
    WHILE           reduce using rule 278 (else_statement -> ifcontent_statement .)
    WAIT            reduce using rule 278 (else_statement -> ifcontent_statement .)
    FOREVER         reduce using rule 278 (else_statement -> ifcontent_statement .)
    BEGIN           reduce using rule 278 (else_statement -> ifcontent_statement .)
    FORK            reduce using rule 278 (else_statement -> ifcontent_statement .)
    DELAY           reduce using rule 278 (else_statement -> ifcontent_statement .)
    AT              reduce using rule 278 (else_statement -> ifcontent_statement .)
    DOLLER          reduce using rule 278 (else_statement -> ifcontent_statement .)
    DISABLE         reduce using rule 278 (else_statement -> ifcontent_statement .)
    LBRACE          reduce using rule 278 (else_statement -> ifcontent_statement .)
    SEMICOLON       reduce using rule 278 (else_statement -> ifcontent_statement .)
    JOIN            reduce using rule 278 (else_statement -> ifcontent_statement .)
    ENDFUNCTION     reduce using rule 278 (else_statement -> ifcontent_statement .)
    ENDTASK         reduce using rule 278 (else_statement -> ifcontent_statement .)
    ENDCASE         reduce using rule 278 (else_statement -> ifcontent_statement .)
    DEFAULT         reduce using rule 278 (else_statement -> ifcontent_statement .)
    MINUS           reduce using rule 278 (else_statement -> ifcontent_statement .)
    PLUS            reduce using rule 278 (else_statement -> ifcontent_statement .)
    LNOT            reduce using rule 278 (else_statement -> ifcontent_statement .)
    NOT             reduce using rule 278 (else_statement -> ifcontent_statement .)
    AND             reduce using rule 278 (else_statement -> ifcontent_statement .)
    NAND            reduce using rule 278 (else_statement -> ifcontent_statement .)
    NOR             reduce using rule 278 (else_statement -> ifcontent_statement .)
    OR              reduce using rule 278 (else_statement -> ifcontent_statement .)
    XOR             reduce using rule 278 (else_statement -> ifcontent_statement .)
    XNOR            reduce using rule 278 (else_statement -> ifcontent_statement .)
    INTNUMBER_DEC   reduce using rule 278 (else_statement -> ifcontent_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 278 (else_statement -> ifcontent_statement .)
    INTNUMBER_BIN   reduce using rule 278 (else_statement -> ifcontent_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 278 (else_statement -> ifcontent_statement .)
    INTNUMBER_OCT   reduce using rule 278 (else_statement -> ifcontent_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 278 (else_statement -> ifcontent_statement .)
    INTNUMBER_HEX   reduce using rule 278 (else_statement -> ifcontent_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 278 (else_statement -> ifcontent_statement .)
    FLOATNUMBER     reduce using rule 278 (else_statement -> ifcontent_statement .)
    STRING_LITERAL  reduce using rule 278 (else_statement -> ifcontent_statement .)


state 784

    (273) if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE . else_statement
    (278) else_statement -> . ifcontent_statement
    (276) ifcontent_statement -> . basic_statement
    (229) basic_statement -> . if_statement
    (230) basic_statement -> . case_statement
    (231) basic_statement -> . casex_statement
    (232) basic_statement -> . casez_statement
    (233) basic_statement -> . unique_case_statement
    (234) basic_statement -> . for_statement
    (235) basic_statement -> . while_statement
    (236) basic_statement -> . event_statement
    (237) basic_statement -> . wait_statement
    (238) basic_statement -> . forever_statement
    (239) basic_statement -> . block
    (240) basic_statement -> . namedblock
    (241) basic_statement -> . parallelblock
    (242) basic_statement -> . blocking_substitution
    (243) basic_statement -> . nonblocking_substitution
    (244) basic_statement -> . single_statement
    (271) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (272) if_statement -> . IF LPAREN cond RPAREN true_statement
    (273) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (274) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (289) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (290) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (291) casez_statement -> . CASEZ LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (292) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (279) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (287) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (302) event_statement -> . senslist SEMICOLON
    (303) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (306) forever_statement -> . FOREVER basic_statement
    (254) block -> . BEGIN block_statements END
    (255) block -> . BEGIN END
    (259) namedblock -> . BEGIN COLON ID namedblock_statements END
    (260) namedblock -> . BEGIN COLON ID END
    (269) parallelblock -> . FORK block_statements JOIN
    (270) parallelblock -> . FORK JOIN
    (246) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (248) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (410) single_statement -> . DELAY expression SEMICOLON
    (411) single_statement -> . systemcall SEMICOLON
    (412) single_statement -> . disable SEMICOLON
    (249) delays -> . DELAY LPAREN expression RPAREN
    (250) delays -> . DELAY identifier
    (251) delays -> . DELAY intnumber
    (252) delays -> . DELAY floatnumber
    (253) delays -> . empty
    (209) senslist -> . AT LPAREN edgesigs RPAREN
    (217) senslist -> . empty
    (218) senslist -> . AT levelsig
    (219) senslist -> . AT LPAREN levelsigs RPAREN
    (227) senslist -> . AT TIMES
    (228) senslist -> . AT LPAREN TIMES RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (409) disable -> . DISABLE ID
    (413) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 196
    CASE            shift and go to state 198
    CASEX           shift and go to state 199
    CASEZ           shift and go to state 200
    UNIQUE          shift and go to state 201
    FOR             shift and go to state 202
    WHILE           shift and go to state 203
    WAIT            shift and go to state 205
    FOREVER         shift and go to state 206
    BEGIN           shift and go to state 207
    FORK            shift and go to state 208
    DELAY           shift and go to state 209
    AT              shift and go to state 173
    DOLLER          shift and go to state 109
    DISABLE         shift and go to state 213
    LBRACE          reduce using rule 413 (empty -> .)
    ID              reduce using rule 413 (empty -> .)
    SEMICOLON       reduce using rule 413 (empty -> .)

  ! IF              [ reduce using rule 413 (empty -> .) ]

    delays                         shift and go to state 197
    else_statement                 shift and go to state 794
    ifcontent_statement            shift and go to state 783
    basic_statement                shift and go to state 704
    if_statement                   shift and go to state 180
    case_statement                 shift and go to state 181
    casex_statement                shift and go to state 182
    casez_statement                shift and go to state 183
    unique_case_statement          shift and go to state 184
    for_statement                  shift and go to state 185
    while_statement                shift and go to state 186
    event_statement                shift and go to state 187
    wait_statement                 shift and go to state 188
    forever_statement              shift and go to state 189
    block                          shift and go to state 190
    namedblock                     shift and go to state 191
    parallelblock                  shift and go to state 192
    blocking_substitution          shift and go to state 193
    nonblocking_substitution       shift and go to state 194
    single_statement               shift and go to state 195
    senslist                       shift and go to state 204
    systemcall                     shift and go to state 210
    disable                        shift and go to state 211
    empty                          shift and go to state 212

state 785

    (296) casecontent_statement -> casecontent_condition COLON basic_statement .

    ENDCASE         reduce using rule 296 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    DEFAULT         reduce using rule 296 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    MINUS           reduce using rule 296 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    PLUS            reduce using rule 296 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    LNOT            reduce using rule 296 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    NOT             reduce using rule 296 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    AND             reduce using rule 296 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    NAND            reduce using rule 296 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    NOR             reduce using rule 296 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    OR              reduce using rule 296 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    XOR             reduce using rule 296 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    XNOR            reduce using rule 296 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    LPAREN          reduce using rule 296 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    LBRACE          reduce using rule 296 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    DOLLER          reduce using rule 296 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    ID              reduce using rule 296 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    INTNUMBER_DEC   reduce using rule 296 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 296 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    INTNUMBER_BIN   reduce using rule 296 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 296 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    INTNUMBER_OCT   reduce using rule 296 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 296 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    INTNUMBER_HEX   reduce using rule 296 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 296 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    FLOATNUMBER     reduce using rule 296 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    STRING_LITERAL  reduce using rule 296 (casecontent_statement -> casecontent_condition COLON basic_statement .)


state 786

    (297) casecontent_condition -> casecontent_condition COMMA expression .
    (146) expression -> expression . POWER expression
    (147) expression -> expression . TIMES expression
    (148) expression -> expression . DIVIDE expression
    (149) expression -> expression . MOD expression
    (150) expression -> expression . PLUS expression
    (151) expression -> expression . MINUS expression
    (152) expression -> expression . LSHIFT expression
    (153) expression -> expression . RSHIFT expression
    (154) expression -> expression . LSHIFTA expression
    (155) expression -> expression . RSHIFTA expression
    (156) expression -> expression . LT expression
    (157) expression -> expression . GT expression
    (158) expression -> expression . LE expression
    (159) expression -> expression . GE expression
    (160) expression -> expression . EQ expression
    (161) expression -> expression . NE expression
    (162) expression -> expression . EQL expression
    (163) expression -> expression . NEL expression
    (164) expression -> expression . AND expression
    (165) expression -> expression . XOR expression
    (166) expression -> expression . XNOR expression
    (167) expression -> expression . OR expression
    (168) expression -> expression . LAND expression
    (169) expression -> expression . LOR expression
    (170) expression -> expression . COND expression COLON expression

    COLON           reduce using rule 297 (casecontent_condition -> casecontent_condition COMMA expression .)
    COMMA           reduce using rule 297 (casecontent_condition -> casecontent_condition COMMA expression .)
    POWER           shift and go to state 242
    TIMES           shift and go to state 409
    DIVIDE          shift and go to state 243
    MOD             shift and go to state 244
    PLUS            shift and go to state 245
    MINUS           shift and go to state 246
    LSHIFT          shift and go to state 247
    RSHIFT          shift and go to state 248
    LSHIFTA         shift and go to state 249
    RSHIFTA         shift and go to state 250
    LT              shift and go to state 251
    GT              shift and go to state 252
    LE              shift and go to state 253
    GE              shift and go to state 254
    EQ              shift and go to state 255
    NE              shift and go to state 256
    EQL             shift and go to state 257
    NEL             shift and go to state 258
    AND             shift and go to state 259
    XOR             shift and go to state 260
    XNOR            shift and go to state 261
    OR              shift and go to state 262
    LAND            shift and go to state 263
    LOR             shift and go to state 264
    COND            shift and go to state 265


state 787

    (299) casecontent_statement -> DEFAULT COLON basic_statement .

    ENDCASE         reduce using rule 299 (casecontent_statement -> DEFAULT COLON basic_statement .)
    DEFAULT         reduce using rule 299 (casecontent_statement -> DEFAULT COLON basic_statement .)
    MINUS           reduce using rule 299 (casecontent_statement -> DEFAULT COLON basic_statement .)
    PLUS            reduce using rule 299 (casecontent_statement -> DEFAULT COLON basic_statement .)
    LNOT            reduce using rule 299 (casecontent_statement -> DEFAULT COLON basic_statement .)
    NOT             reduce using rule 299 (casecontent_statement -> DEFAULT COLON basic_statement .)
    AND             reduce using rule 299 (casecontent_statement -> DEFAULT COLON basic_statement .)
    NAND            reduce using rule 299 (casecontent_statement -> DEFAULT COLON basic_statement .)
    NOR             reduce using rule 299 (casecontent_statement -> DEFAULT COLON basic_statement .)
    OR              reduce using rule 299 (casecontent_statement -> DEFAULT COLON basic_statement .)
    XOR             reduce using rule 299 (casecontent_statement -> DEFAULT COLON basic_statement .)
    XNOR            reduce using rule 299 (casecontent_statement -> DEFAULT COLON basic_statement .)
    LPAREN          reduce using rule 299 (casecontent_statement -> DEFAULT COLON basic_statement .)
    LBRACE          reduce using rule 299 (casecontent_statement -> DEFAULT COLON basic_statement .)
    DOLLER          reduce using rule 299 (casecontent_statement -> DEFAULT COLON basic_statement .)
    ID              reduce using rule 299 (casecontent_statement -> DEFAULT COLON basic_statement .)
    INTNUMBER_DEC   reduce using rule 299 (casecontent_statement -> DEFAULT COLON basic_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 299 (casecontent_statement -> DEFAULT COLON basic_statement .)
    INTNUMBER_BIN   reduce using rule 299 (casecontent_statement -> DEFAULT COLON basic_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 299 (casecontent_statement -> DEFAULT COLON basic_statement .)
    INTNUMBER_OCT   reduce using rule 299 (casecontent_statement -> DEFAULT COLON basic_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 299 (casecontent_statement -> DEFAULT COLON basic_statement .)
    INTNUMBER_HEX   reduce using rule 299 (casecontent_statement -> DEFAULT COLON basic_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 299 (casecontent_statement -> DEFAULT COLON basic_statement .)
    FLOATNUMBER     reduce using rule 299 (casecontent_statement -> DEFAULT COLON basic_statement .)
    STRING_LITERAL  reduce using rule 299 (casecontent_statement -> DEFAULT COLON basic_statement .)


state 788

    (292) unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .

    ENDMODULE       reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    GENERATE        reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTEGER         reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    REAL            reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    PARAMETER       reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LOCALPARAM      reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    GENVAR          reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ASSIGN          reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ALWAYS          reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ALWAYS_FF       reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ALWAYS_COMB     reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ALWAYS_LATCH    reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INITIAL         reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ID              reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SENS_OR         reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FUNCTION        reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    TASK            reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LPAREN          reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INPUT           reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    OUTPUT          reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INOUT           reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    TRI             reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    REG             reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LOGIC           reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    WIRE            reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED          reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SUPPLY0         reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SUPPLY1         reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDGENERATE     reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    IF              reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FOR             reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ELSE            reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    END             reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    CASE            reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    CASEX           reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    CASEZ           reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    UNIQUE          reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    WHILE           reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    WAIT            reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FOREVER         reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    BEGIN           reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FORK            reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DELAY           reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    AT              reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DOLLER          reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DISABLE         reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LBRACE          reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SEMICOLON       reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    JOIN            reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDFUNCTION     reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDTASK         reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDCASE         reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DEFAULT         reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    MINUS           reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    PLUS            reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LNOT            reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    NOT             reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    AND             reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    NAND            reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    NOR             reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    OR              reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    XOR             reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    XNOR            reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_DEC   reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_DEC reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_BIN   reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_BIN reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_OCT   reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_OCT reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_HEX   reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_HEX reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FLOATNUMBER     reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    STRING_LITERAL  reduce using rule 292 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)


state 789

    (279) for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .

    ENDMODULE       reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    GENERATE        reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    INTEGER         reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    REAL            reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    PARAMETER       reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    LOCALPARAM      reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    GENVAR          reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ASSIGN          reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ALWAYS          reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ALWAYS_FF       reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ALWAYS_COMB     reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ALWAYS_LATCH    reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    INITIAL         reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ID              reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    SENS_OR         reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    FUNCTION        reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    TASK            reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    LPAREN          reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    INPUT           reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    OUTPUT          reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    INOUT           reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    TRI             reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    REG             reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    LOGIC           reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    WIRE            reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    SIGNED          reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    SUPPLY0         reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    SUPPLY1         reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ENDGENERATE     reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    IF              reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    FOR             reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ELSE            reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    END             reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    CASE            reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    CASEX           reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    CASEZ           reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    UNIQUE          reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    WHILE           reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    WAIT            reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    FOREVER         reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    BEGIN           reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    FORK            reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    DELAY           reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    AT              reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    DOLLER          reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    DISABLE         reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    LBRACE          reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    SEMICOLON       reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    JOIN            reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ENDFUNCTION     reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ENDTASK         reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ENDCASE         reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    DEFAULT         reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    MINUS           reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    PLUS            reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    LNOT            reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    NOT             reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    AND             reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    NAND            reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    NOR             reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    OR              reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    XOR             reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    XNOR            reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    INTNUMBER_DEC   reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    INTNUMBER_BIN   reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    INTNUMBER_OCT   reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    INTNUMBER_HEX   reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    FLOATNUMBER     reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    STRING_LITERAL  reduce using rule 279 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)


state 790

    (286) forcontent_statement -> basic_statement .

    ENDMODULE       reduce using rule 286 (forcontent_statement -> basic_statement .)
    GENERATE        reduce using rule 286 (forcontent_statement -> basic_statement .)
    INTEGER         reduce using rule 286 (forcontent_statement -> basic_statement .)
    REAL            reduce using rule 286 (forcontent_statement -> basic_statement .)
    PARAMETER       reduce using rule 286 (forcontent_statement -> basic_statement .)
    LOCALPARAM      reduce using rule 286 (forcontent_statement -> basic_statement .)
    GENVAR          reduce using rule 286 (forcontent_statement -> basic_statement .)
    ASSIGN          reduce using rule 286 (forcontent_statement -> basic_statement .)
    ALWAYS          reduce using rule 286 (forcontent_statement -> basic_statement .)
    ALWAYS_FF       reduce using rule 286 (forcontent_statement -> basic_statement .)
    ALWAYS_COMB     reduce using rule 286 (forcontent_statement -> basic_statement .)
    ALWAYS_LATCH    reduce using rule 286 (forcontent_statement -> basic_statement .)
    INITIAL         reduce using rule 286 (forcontent_statement -> basic_statement .)
    ID              reduce using rule 286 (forcontent_statement -> basic_statement .)
    SENS_OR         reduce using rule 286 (forcontent_statement -> basic_statement .)
    FUNCTION        reduce using rule 286 (forcontent_statement -> basic_statement .)
    TASK            reduce using rule 286 (forcontent_statement -> basic_statement .)
    LPAREN          reduce using rule 286 (forcontent_statement -> basic_statement .)
    INPUT           reduce using rule 286 (forcontent_statement -> basic_statement .)
    OUTPUT          reduce using rule 286 (forcontent_statement -> basic_statement .)
    INOUT           reduce using rule 286 (forcontent_statement -> basic_statement .)
    TRI             reduce using rule 286 (forcontent_statement -> basic_statement .)
    REG             reduce using rule 286 (forcontent_statement -> basic_statement .)
    LOGIC           reduce using rule 286 (forcontent_statement -> basic_statement .)
    WIRE            reduce using rule 286 (forcontent_statement -> basic_statement .)
    SIGNED          reduce using rule 286 (forcontent_statement -> basic_statement .)
    SUPPLY0         reduce using rule 286 (forcontent_statement -> basic_statement .)
    SUPPLY1         reduce using rule 286 (forcontent_statement -> basic_statement .)
    ENDGENERATE     reduce using rule 286 (forcontent_statement -> basic_statement .)
    IF              reduce using rule 286 (forcontent_statement -> basic_statement .)
    FOR             reduce using rule 286 (forcontent_statement -> basic_statement .)
    ELSE            reduce using rule 286 (forcontent_statement -> basic_statement .)
    END             reduce using rule 286 (forcontent_statement -> basic_statement .)
    CASE            reduce using rule 286 (forcontent_statement -> basic_statement .)
    CASEX           reduce using rule 286 (forcontent_statement -> basic_statement .)
    CASEZ           reduce using rule 286 (forcontent_statement -> basic_statement .)
    UNIQUE          reduce using rule 286 (forcontent_statement -> basic_statement .)
    WHILE           reduce using rule 286 (forcontent_statement -> basic_statement .)
    WAIT            reduce using rule 286 (forcontent_statement -> basic_statement .)
    FOREVER         reduce using rule 286 (forcontent_statement -> basic_statement .)
    BEGIN           reduce using rule 286 (forcontent_statement -> basic_statement .)
    FORK            reduce using rule 286 (forcontent_statement -> basic_statement .)
    DELAY           reduce using rule 286 (forcontent_statement -> basic_statement .)
    AT              reduce using rule 286 (forcontent_statement -> basic_statement .)
    DOLLER          reduce using rule 286 (forcontent_statement -> basic_statement .)
    DISABLE         reduce using rule 286 (forcontent_statement -> basic_statement .)
    LBRACE          reduce using rule 286 (forcontent_statement -> basic_statement .)
    SEMICOLON       reduce using rule 286 (forcontent_statement -> basic_statement .)
    JOIN            reduce using rule 286 (forcontent_statement -> basic_statement .)
    ENDFUNCTION     reduce using rule 286 (forcontent_statement -> basic_statement .)
    ENDTASK         reduce using rule 286 (forcontent_statement -> basic_statement .)
    ENDCASE         reduce using rule 286 (forcontent_statement -> basic_statement .)
    DEFAULT         reduce using rule 286 (forcontent_statement -> basic_statement .)
    MINUS           reduce using rule 286 (forcontent_statement -> basic_statement .)
    PLUS            reduce using rule 286 (forcontent_statement -> basic_statement .)
    LNOT            reduce using rule 286 (forcontent_statement -> basic_statement .)
    NOT             reduce using rule 286 (forcontent_statement -> basic_statement .)
    AND             reduce using rule 286 (forcontent_statement -> basic_statement .)
    NAND            reduce using rule 286 (forcontent_statement -> basic_statement .)
    NOR             reduce using rule 286 (forcontent_statement -> basic_statement .)
    OR              reduce using rule 286 (forcontent_statement -> basic_statement .)
    XOR             reduce using rule 286 (forcontent_statement -> basic_statement .)
    XNOR            reduce using rule 286 (forcontent_statement -> basic_statement .)
    INTNUMBER_DEC   reduce using rule 286 (forcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 286 (forcontent_statement -> basic_statement .)
    INTNUMBER_BIN   reduce using rule 286 (forcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 286 (forcontent_statement -> basic_statement .)
    INTNUMBER_OCT   reduce using rule 286 (forcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 286 (forcontent_statement -> basic_statement .)
    INTNUMBER_HEX   reduce using rule 286 (forcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 286 (forcontent_statement -> basic_statement .)
    FLOATNUMBER     reduce using rule 286 (forcontent_statement -> basic_statement .)
    STRING_LITERAL  reduce using rule 286 (forcontent_statement -> basic_statement .)


state 791

    (327) param_arg -> DOT ID LPAREN expression RPAREN .

    RPAREN          reduce using rule 327 (param_arg -> DOT ID LPAREN expression RPAREN .)
    COMMA           reduce using rule 327 (param_arg -> DOT ID LPAREN expression RPAREN .)


state 792

    (351) generate_block -> BEGIN COLON ID generate_items . END
    (345) generate_items -> generate_items . generate_item
    (347) generate_item -> . standard_item
    (348) generate_item -> . generate_if
    (349) generate_item -> . generate_for
    (65) standard_item -> . decl
    (66) standard_item -> . integerdecl
    (67) standard_item -> . realdecl
    (68) standard_item -> . declassign
    (69) standard_item -> . parameterdecl
    (70) standard_item -> . localparamdecl
    (71) standard_item -> . genvardecl
    (72) standard_item -> . assignment
    (73) standard_item -> . always
    (74) standard_item -> . always_ff
    (75) standard_item -> . always_comb
    (76) standard_item -> . always_latch
    (77) standard_item -> . initial
    (78) standard_item -> . instance
    (79) standard_item -> . function
    (80) standard_item -> . task
    (81) standard_item -> . pragma
    (352) generate_if -> . IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (353) generate_if -> . IF LPAREN cond RPAREN gif_true_item
    (358) generate_for -> . FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
    (82) decl -> . sigtypes declnamelist SEMICOLON
    (83) decl -> . sigtypes width declnamelist SEMICOLON
    (92) integerdecl -> . INTEGER integernamelist SEMICOLON
    (93) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (98) realdecl -> . REAL realnamelist SEMICOLON
    (88) declassign -> . sigtypes declassign_element SEMICOLON
    (89) declassign -> . sigtypes width declassign_element SEMICOLON
    (102) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (103) parameterdecl -> . PARAMETER SIGNED param_substitution_list SEMICOLON
    (104) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (105) parameterdecl -> . PARAMETER SIGNED width param_substitution_list SEMICOLON
    (106) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (107) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (108) localparamdecl -> . LOCALPARAM SIGNED param_substitution_list SEMICOLON
    (109) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (110) localparamdecl -> . LOCALPARAM SIGNED width param_substitution_list SEMICOLON
    (111) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (339) genvardecl -> . GENVAR genvarlist SEMICOLON
    (115) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (116) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (205) always -> . ALWAYS senslist always_statement
    (206) always_ff -> . ALWAYS_FF senslist always_statement
    (207) always_comb -> . ALWAYS_COMB senslist always_statement
    (208) always_latch -> . ALWAYS_LATCH senslist always_statement
    (300) initial -> . INITIAL initial_statement
    (307) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (308) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (313) instance -> . ID instance_bodylist_noname SEMICOLON
    (314) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (368) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (369) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (370) function -> . FUNCTION INTEGER ID SEMICOLON function_statement ENDFUNCTION
    (389) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

    END             shift and go to state 795
    IF              shift and go to state 132
    FOR             shift and go to state 133
    INTEGER         shift and go to state 48
    REAL            shift and go to state 50
    PARAMETER       shift and go to state 51
    LOCALPARAM      shift and go to state 52
    GENVAR          shift and go to state 53
    ASSIGN          shift and go to state 54
    ALWAYS          shift and go to state 55
    ALWAYS_FF       shift and go to state 56
    ALWAYS_COMB     shift and go to state 57
    ALWAYS_LATCH    shift and go to state 58
    INITIAL         shift and go to state 59
    ID              shift and go to state 60
    SENS_OR         shift and go to state 61
    FUNCTION        shift and go to state 62
    TASK            shift and go to state 63
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 65
    OUTPUT          shift and go to state 66
    INOUT           shift and go to state 67
    TRI             shift and go to state 68
    REG             shift and go to state 69
    LOGIC           shift and go to state 70
    WIRE            shift and go to state 71
    SIGNED          shift and go to state 49
    SUPPLY0         shift and go to state 72
    SUPPLY1         shift and go to state 73

    generate_item                  shift and go to state 287
    standard_item                  shift and go to state 129
    generate_if                    shift and go to state 130
    generate_for                   shift and go to state 131
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    always_ff                      shift and go to state 38
    always_comb                    shift and go to state 39
    always_latch                   shift and go to state 40
    initial                        shift and go to state 41
    instance                       shift and go to state 42
    function                       shift and go to state 43
    task                           shift and go to state 44
    pragma                         shift and go to state 45
    sigtypes                       shift and go to state 47
    sigtype                        shift and go to state 64

state 793

    (247) blocking_substitution_base -> delays lvalue EQUALS delays . rvalue
    (135) rvalue -> . expression
    (136) expression -> . MINUS expression
    (137) expression -> . PLUS expression
    (138) expression -> . LNOT expression
    (139) expression -> . NOT expression
    (140) expression -> . AND expression
    (141) expression -> . NAND expression
    (142) expression -> . NOR expression
    (143) expression -> . OR expression
    (144) expression -> . XOR expression
    (145) expression -> . XNOR expression
    (146) expression -> . expression POWER expression
    (147) expression -> . expression TIMES expression
    (148) expression -> . expression DIVIDE expression
    (149) expression -> . expression MOD expression
    (150) expression -> . expression PLUS expression
    (151) expression -> . expression MINUS expression
    (152) expression -> . expression LSHIFT expression
    (153) expression -> . expression RSHIFT expression
    (154) expression -> . expression LSHIFTA expression
    (155) expression -> . expression RSHIFTA expression
    (156) expression -> . expression LT expression
    (157) expression -> . expression GT expression
    (158) expression -> . expression LE expression
    (159) expression -> . expression GE expression
    (160) expression -> . expression EQ expression
    (161) expression -> . expression NE expression
    (162) expression -> . expression EQL expression
    (163) expression -> . expression NEL expression
    (164) expression -> . expression AND expression
    (165) expression -> . expression XOR expression
    (166) expression -> . expression XNOR expression
    (167) expression -> . expression OR expression
    (168) expression -> . expression LAND expression
    (169) expression -> . expression LOR expression
    (170) expression -> . expression COND expression COLON expression
    (171) expression -> . LPAREN expression RPAREN
    (172) expression -> . concat
    (173) expression -> . repeat
    (174) expression -> . partselect
    (175) expression -> . pointer
    (176) expression -> . functioncall
    (177) expression -> . systemcall
    (178) expression -> . identifier
    (179) expression -> . const_expression
    (180) concat -> . LBRACE concatlist RBRACE
    (183) repeat -> . LBRACE expression concat RBRACE
    (184) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (185) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (186) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (187) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (188) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (189) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (190) pointer -> . identifier LBRACKET expression RBRACKET
    (191) pointer -> . pointer LBRACKET expression RBRACKET
    (385) functioncall -> . identifier LPAREN func_args RPAREN
    (361) systemcall -> . DOLLER ID
    (362) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (363) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (405) identifier -> . ID
    (406) identifier -> . scope ID
    (192) const_expression -> . intnumber
    (193) const_expression -> . floatnumber
    (194) const_expression -> . stringliteral
    (407) scope -> . identifier DOT
    (408) scope -> . pointer DOT
    (196) intnumber -> . INTNUMBER_DEC
    (197) intnumber -> . SIGNED_INTNUMBER_DEC
    (198) intnumber -> . INTNUMBER_BIN
    (199) intnumber -> . SIGNED_INTNUMBER_BIN
    (200) intnumber -> . INTNUMBER_OCT
    (201) intnumber -> . SIGNED_INTNUMBER_OCT
    (202) intnumber -> . INTNUMBER_HEX
    (203) intnumber -> . SIGNED_INTNUMBER_HEX
    (195) floatnumber -> . FLOATNUMBER
    (204) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 90
    PLUS            shift and go to state 91
    LNOT            shift and go to state 92
    NOT             shift and go to state 93
    AND             shift and go to state 94
    NAND            shift and go to state 95
    NOR             shift and go to state 96
    OR              shift and go to state 97
    XOR             shift and go to state 98
    XNOR            shift and go to state 99
    LPAREN          shift and go to state 87
    LBRACE          shift and go to state 108
    DOLLER          shift and go to state 109
    ID              shift and go to state 88
    INTNUMBER_DEC   shift and go to state 114
    SIGNED_INTNUMBER_DEC shift and go to state 115
    INTNUMBER_BIN   shift and go to state 116
    SIGNED_INTNUMBER_BIN shift and go to state 117
    INTNUMBER_OCT   shift and go to state 118
    SIGNED_INTNUMBER_OCT shift and go to state 119
    INTNUMBER_HEX   shift and go to state 120
    SIGNED_INTNUMBER_HEX shift and go to state 121
    FLOATNUMBER     shift and go to state 122
    STRING_LITERAL  shift and go to state 123

    rvalue                         shift and go to state 796
    expression                     shift and go to state 459
    concat                         shift and go to state 100
    repeat                         shift and go to state 101
    partselect                     shift and go to state 102
    pointer                        shift and go to state 103
    functioncall                   shift and go to state 104
    systemcall                     shift and go to state 105
    identifier                     shift and go to state 106
    const_expression               shift and go to state 107
    scope                          shift and go to state 110
    intnumber                      shift and go to state 111
    floatnumber                    shift and go to state 112
    stringliteral                  shift and go to state 113

state 794

    (273) if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .

    ENDMODULE       reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    GENERATE        reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTEGER         reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    REAL            reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    PARAMETER       reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    LOCALPARAM      reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    GENVAR          reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ASSIGN          reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ALWAYS          reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ALWAYS_FF       reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ALWAYS_COMB     reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ALWAYS_LATCH    reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INITIAL         reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ID              reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SENS_OR         reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FUNCTION        reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    TASK            reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    LPAREN          reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INPUT           reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    OUTPUT          reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INOUT           reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    TRI             reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    REG             reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    LOGIC           reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    WIRE            reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED          reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SUPPLY0         reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SUPPLY1         reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ENDGENERATE     reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    IF              reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FOR             reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ELSE            reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    END             reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    CASE            reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    CASEX           reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    CASEZ           reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    UNIQUE          reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    WHILE           reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    WAIT            reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FOREVER         reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    BEGIN           reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FORK            reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    DELAY           reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    AT              reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    DOLLER          reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    DISABLE         reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    LBRACE          reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SEMICOLON       reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    JOIN            reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ENDFUNCTION     reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ENDTASK         reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ENDCASE         reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    DEFAULT         reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    MINUS           reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    PLUS            reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    LNOT            reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    NOT             reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    AND             reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    NAND            reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    NOR             reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    OR              reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    XOR             reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    XNOR            reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTNUMBER_DEC   reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTNUMBER_BIN   reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTNUMBER_OCT   reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTNUMBER_HEX   reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FLOATNUMBER     reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    STRING_LITERAL  reduce using rule 273 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)


state 795

    (351) generate_block -> BEGIN COLON ID generate_items END .

    ELSE            reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    ENDGENERATE     reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    IF              reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    FOR             reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    INTEGER         reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    REAL            reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    PARAMETER       reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    LOCALPARAM      reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    GENVAR          reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    ASSIGN          reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    ALWAYS          reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    ALWAYS_FF       reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    ALWAYS_COMB     reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    ALWAYS_LATCH    reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    INITIAL         reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    ID              reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    SENS_OR         reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    FUNCTION        reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    TASK            reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    LPAREN          reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    INPUT           reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    OUTPUT          reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    INOUT           reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    TRI             reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    REG             reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    LOGIC           reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    WIRE            reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    SIGNED          reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    SUPPLY0         reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    SUPPLY1         reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)
    END             reduce using rule 351 (generate_block -> BEGIN COLON ID generate_items END .)


state 796

    (247) blocking_substitution_base -> delays lvalue EQUALS delays rvalue .

    RPAREN          reduce using rule 247 (blocking_substitution_base -> delays lvalue EQUALS delays rvalue .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for GENERATE in state 18 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 18 resolved as shift
WARNING: shift/reduce conflict for REAL in state 18 resolved as shift
WARNING: shift/reduce conflict for PARAMETER in state 18 resolved as shift
WARNING: shift/reduce conflict for LOCALPARAM in state 18 resolved as shift
WARNING: shift/reduce conflict for GENVAR in state 18 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 18 resolved as shift
WARNING: shift/reduce conflict for ALWAYS in state 18 resolved as shift
WARNING: shift/reduce conflict for ALWAYS_FF in state 18 resolved as shift
WARNING: shift/reduce conflict for ALWAYS_COMB in state 18 resolved as shift
WARNING: shift/reduce conflict for ALWAYS_LATCH in state 18 resolved as shift
WARNING: shift/reduce conflict for INITIAL in state 18 resolved as shift
WARNING: shift/reduce conflict for ID in state 18 resolved as shift
WARNING: shift/reduce conflict for SENS_OR in state 18 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 18 resolved as shift
WARNING: shift/reduce conflict for TASK in state 18 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 18 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 18 resolved as shift
WARNING: shift/reduce conflict for OUTPUT in state 18 resolved as shift
WARNING: shift/reduce conflict for INOUT in state 18 resolved as shift
WARNING: shift/reduce conflict for TRI in state 18 resolved as shift
WARNING: shift/reduce conflict for REG in state 18 resolved as shift
WARNING: shift/reduce conflict for LOGIC in state 18 resolved as shift
WARNING: shift/reduce conflict for WIRE in state 18 resolved as shift
WARNING: shift/reduce conflict for SIGNED in state 18 resolved as shift
WARNING: shift/reduce conflict for SUPPLY0 in state 18 resolved as shift
WARNING: shift/reduce conflict for SUPPLY1 in state 18 resolved as shift
WARNING: shift/reduce conflict for IF in state 46 resolved as shift
WARNING: shift/reduce conflict for FOR in state 46 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 46 resolved as shift
WARNING: shift/reduce conflict for REAL in state 46 resolved as shift
WARNING: shift/reduce conflict for PARAMETER in state 46 resolved as shift
WARNING: shift/reduce conflict for LOCALPARAM in state 46 resolved as shift
WARNING: shift/reduce conflict for GENVAR in state 46 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 46 resolved as shift
WARNING: shift/reduce conflict for ALWAYS in state 46 resolved as shift
WARNING: shift/reduce conflict for ALWAYS_FF in state 46 resolved as shift
WARNING: shift/reduce conflict for ALWAYS_COMB in state 46 resolved as shift
WARNING: shift/reduce conflict for ALWAYS_LATCH in state 46 resolved as shift
WARNING: shift/reduce conflict for INITIAL in state 46 resolved as shift
WARNING: shift/reduce conflict for ID in state 46 resolved as shift
WARNING: shift/reduce conflict for SENS_OR in state 46 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 46 resolved as shift
WARNING: shift/reduce conflict for TASK in state 46 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 46 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 46 resolved as shift
WARNING: shift/reduce conflict for OUTPUT in state 46 resolved as shift
WARNING: shift/reduce conflict for INOUT in state 46 resolved as shift
WARNING: shift/reduce conflict for TRI in state 46 resolved as shift
WARNING: shift/reduce conflict for REG in state 46 resolved as shift
WARNING: shift/reduce conflict for LOGIC in state 46 resolved as shift
WARNING: shift/reduce conflict for WIRE in state 46 resolved as shift
WARNING: shift/reduce conflict for SIGNED in state 46 resolved as shift
WARNING: shift/reduce conflict for SUPPLY0 in state 46 resolved as shift
WARNING: shift/reduce conflict for SUPPLY1 in state 46 resolved as shift
WARNING: shift/reduce conflict for ID in state 47 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 54 resolved as shift
WARNING: shift/reduce conflict for ID in state 54 resolved as shift
WARNING: shift/reduce conflict for AT in state 55 resolved as shift
WARNING: shift/reduce conflict for AT in state 56 resolved as shift
WARNING: shift/reduce conflict for AT in state 57 resolved as shift
WARNING: shift/reduce conflict for AT in state 58 resolved as shift
WARNING: shift/reduce conflict for IF in state 59 resolved as shift
WARNING: shift/reduce conflict for ID in state 135 resolved as shift
WARNING: shift/reduce conflict for IF in state 172 resolved as shift
WARNING: shift/reduce conflict for IF in state 175 resolved as shift
WARNING: shift/reduce conflict for IF in state 176 resolved as shift
WARNING: shift/reduce conflict for IF in state 177 resolved as shift
WARNING: shift/reduce conflict for IF in state 206 resolved as shift
WARNING: shift/reduce conflict for IF in state 207 resolved as shift
WARNING: shift/reduce conflict for IF in state 208 resolved as shift
WARNING: shift/reduce conflict for IF in state 361 resolved as shift
WARNING: shift/reduce conflict for IF in state 366 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 395 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 395 resolved as shift
WARNING: shift/reduce conflict for OUTPUT in state 395 resolved as shift
WARNING: shift/reduce conflict for INOUT in state 395 resolved as shift
WARNING: shift/reduce conflict for TRI in state 395 resolved as shift
WARNING: shift/reduce conflict for REG in state 395 resolved as shift
WARNING: shift/reduce conflict for LOGIC in state 395 resolved as shift
WARNING: shift/reduce conflict for WIRE in state 395 resolved as shift
WARNING: shift/reduce conflict for SIGNED in state 395 resolved as shift
WARNING: shift/reduce conflict for SUPPLY0 in state 395 resolved as shift
WARNING: shift/reduce conflict for SUPPLY1 in state 395 resolved as shift
WARNING: shift/reduce conflict for IF in state 510 resolved as shift
WARNING: shift/reduce conflict for IF in state 533 resolved as shift
WARNING: shift/reduce conflict for IF in state 540 resolved as shift
WARNING: shift/reduce conflict for IF in state 606 resolved as shift
WARNING: shift/reduce conflict for IF in state 615 resolved as shift
WARNING: shift/reduce conflict for IF in state 616 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 616 resolved as shift
WARNING: shift/reduce conflict for IF in state 617 resolved as shift
WARNING: shift/reduce conflict for POWER in state 668 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 668 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 668 resolved as shift
WARNING: shift/reduce conflict for MOD in state 668 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 668 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 668 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 668 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 668 resolved as shift
WARNING: shift/reduce conflict for LSHIFTA in state 668 resolved as shift
WARNING: shift/reduce conflict for RSHIFTA in state 668 resolved as shift
WARNING: shift/reduce conflict for LT in state 668 resolved as shift
WARNING: shift/reduce conflict for GT in state 668 resolved as shift
WARNING: shift/reduce conflict for LE in state 668 resolved as shift
WARNING: shift/reduce conflict for GE in state 668 resolved as shift
WARNING: shift/reduce conflict for EQ in state 668 resolved as shift
WARNING: shift/reduce conflict for NE in state 668 resolved as shift
WARNING: shift/reduce conflict for EQL in state 668 resolved as shift
WARNING: shift/reduce conflict for NEL in state 668 resolved as shift
WARNING: shift/reduce conflict for AND in state 668 resolved as shift
WARNING: shift/reduce conflict for XOR in state 668 resolved as shift
WARNING: shift/reduce conflict for XNOR in state 668 resolved as shift
WARNING: shift/reduce conflict for OR in state 668 resolved as shift
WARNING: shift/reduce conflict for LAND in state 668 resolved as shift
WARNING: shift/reduce conflict for LOR in state 668 resolved as shift
WARNING: shift/reduce conflict for COND in state 668 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 679 resolved as shift
WARNING: shift/reduce conflict for IF in state 682 resolved as shift
WARNING: shift/reduce conflict for FOR in state 682 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 682 resolved as shift
WARNING: shift/reduce conflict for REAL in state 682 resolved as shift
WARNING: shift/reduce conflict for PARAMETER in state 682 resolved as shift
WARNING: shift/reduce conflict for LOCALPARAM in state 682 resolved as shift
WARNING: shift/reduce conflict for GENVAR in state 682 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 682 resolved as shift
WARNING: shift/reduce conflict for ALWAYS in state 682 resolved as shift
WARNING: shift/reduce conflict for ALWAYS_FF in state 682 resolved as shift
WARNING: shift/reduce conflict for ALWAYS_COMB in state 682 resolved as shift
WARNING: shift/reduce conflict for ALWAYS_LATCH in state 682 resolved as shift
WARNING: shift/reduce conflict for INITIAL in state 682 resolved as shift
WARNING: shift/reduce conflict for ID in state 682 resolved as shift
WARNING: shift/reduce conflict for SENS_OR in state 682 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 682 resolved as shift
WARNING: shift/reduce conflict for TASK in state 682 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 682 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 682 resolved as shift
WARNING: shift/reduce conflict for OUTPUT in state 682 resolved as shift
WARNING: shift/reduce conflict for INOUT in state 682 resolved as shift
WARNING: shift/reduce conflict for TRI in state 682 resolved as shift
WARNING: shift/reduce conflict for REG in state 682 resolved as shift
WARNING: shift/reduce conflict for LOGIC in state 682 resolved as shift
WARNING: shift/reduce conflict for WIRE in state 682 resolved as shift
WARNING: shift/reduce conflict for SIGNED in state 682 resolved as shift
WARNING: shift/reduce conflict for SUPPLY0 in state 682 resolved as shift
WARNING: shift/reduce conflict for SUPPLY1 in state 682 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 702 resolved as shift
WARNING: shift/reduce conflict for IF in state 705 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 729 resolved as shift
WARNING: shift/reduce conflict for IF in state 756 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 757 resolved as shift
WARNING: shift/reduce conflict for IF in state 762 resolved as shift
WARNING: shift/reduce conflict for IF in state 764 resolved as shift
WARNING: shift/reduce conflict for IF in state 768 resolved as shift
WARNING: shift/reduce conflict for IF in state 777 resolved as shift
WARNING: shift/reduce conflict for FOR in state 777 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 777 resolved as shift
WARNING: shift/reduce conflict for REAL in state 777 resolved as shift
WARNING: shift/reduce conflict for PARAMETER in state 777 resolved as shift
WARNING: shift/reduce conflict for LOCALPARAM in state 777 resolved as shift
WARNING: shift/reduce conflict for GENVAR in state 777 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 777 resolved as shift
WARNING: shift/reduce conflict for ALWAYS in state 777 resolved as shift
WARNING: shift/reduce conflict for ALWAYS_FF in state 777 resolved as shift
WARNING: shift/reduce conflict for ALWAYS_COMB in state 777 resolved as shift
WARNING: shift/reduce conflict for ALWAYS_LATCH in state 777 resolved as shift
WARNING: shift/reduce conflict for INITIAL in state 777 resolved as shift
WARNING: shift/reduce conflict for ID in state 777 resolved as shift
WARNING: shift/reduce conflict for SENS_OR in state 777 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 777 resolved as shift
WARNING: shift/reduce conflict for TASK in state 777 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 777 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 777 resolved as shift
WARNING: shift/reduce conflict for OUTPUT in state 777 resolved as shift
WARNING: shift/reduce conflict for INOUT in state 777 resolved as shift
WARNING: shift/reduce conflict for TRI in state 777 resolved as shift
WARNING: shift/reduce conflict for REG in state 777 resolved as shift
WARNING: shift/reduce conflict for LOGIC in state 777 resolved as shift
WARNING: shift/reduce conflict for WIRE in state 777 resolved as shift
WARNING: shift/reduce conflict for SIGNED in state 777 resolved as shift
WARNING: shift/reduce conflict for SUPPLY0 in state 777 resolved as shift
WARNING: shift/reduce conflict for SUPPLY1 in state 777 resolved as shift
WARNING: shift/reduce conflict for IF in state 784 resolved as shift
